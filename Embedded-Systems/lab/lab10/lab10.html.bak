<!DOCTYPE html>
<html lang="en">
<!----- http://getbootstrap.com/css/ ----->
    <head>
        <title>Embedded System Design: Lab #9 - Record Playback</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="description" content="EENG 383 - Microcomputer Architecture and Interfacing">
        <meta name="author" content="Chris Coulston">
        <link rel='stylesheet' type='text/css' href='//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.min.css'>
        <script src='//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/js/bootstrap.min.js'></script>
    </head>

<body>
        <div class = "container">
            <div class = "navbar navbar-inverse">
                <div class = "navbar-inner">
                    <a class = "brand" href="../../index.html">EENG 383</a>
                    <ul class = "nav">
                        <li><a href="../../index.html">Home</a></li>                     </ul>
                    <ul class="nav pull-right">
                        <li><a href="../lab09/lab09.html">&lt;Prev</a></li>
                        <li><a href="../lab11/lab11.html">Next&gt;</a></li>
                    </ul>
                </div>
            </div>

<center>
<h1>EENG 383</h1>
Lab 10 - Audio recording and playback
</center>
<br>

<table class="table table-striped table-bordered table-condensed">
<tr><td>Start date:</td>        <td>Oct 24</td></tr>
<tr><td>End date:</td>          <td>Oct 31</td></tr>
<tr><td>Lab:</td>               <td>10</td></tr>
<tr><td>Status                  <td bgcolor = #D0FFD0>Live
</table>


<h2>InLab 10</h2>
Some self guided <a href="./inlab10.html">activities.</a>

<h2>Lab 10 assignment</h2>
Create an embedded system that plays an audio recording stored on an SD
Card.  You program should store either a pure sine wave or an audio
recording from a microphone sampled at a user adjustable rate (default
to 100&micro;s).

<h2>Software</h2>
At start-up your program should present a splash screen - this would
be a great place for some ascii art. The splash screen should also contain
connection instruction for the development board; for this assignment tell
the user there are no jumpers to install! When you press "?" at the
terminal you should be greeted with the following menu.

<pre>
-------------------------------------------------
    Play length in blocks: 0
    sdCardAddress: 0000:0000
    sample rate: 100us
-------------------------------------------------
?: help menu
o: k
Z: Reset processor
z: Clear the terminal
-------------------------------------------------
i: Initialize SD card
-------------------------------------------------
a/A: decrease/increase read address
r: read a block of 512 bytes from SD card
1: write perfect 26 value sine wave to 128 blocks
-------------------------------------------------
s: spool memory to a csv file
-------------------------------------------------
+/-: Increase/Decrease the sample rate by 10 us
P: Play from SD card to PWM -> LPF -> Audio
W: Write microphone => SD card 
-------------------------------------------------
</pre>

The header of the help menu should display the following status information
about the record/playback system.
<ul>	<li>Play length in blocks is set by the "1" or "W" functions.
	Whenever either of these functions is run, you need to keep
	track of the number of blocks written to the SD card in order 
	to playback the correct number of blocks.  This does not need
	to be a global variable.
	<li>sdCardAddress is the address used by the "r" and "+" or "-"
	functions.  I find these functions super useful when debugging
	what I have written into memory.  The "1", "W" and "P" functions
	should have their own address variable and NOT change this 
	address.
	<li>sample rate is the TMR0 interrupt frequency. Both the
	record and playback utilize the TMR0 ISR.  If you change the
	sample rate between recording and playback you will change the 
	pitch of the sound recorded - this can be fun.  Display the
	sample rate in microseconds by dividing the timer counts by
	an apropreiate constant.
</ul>
	

<ul>
<li><b>?</b><br>
Prints out the ever useful help menu.  Display the current upper and
lower audio thresholds as part of the menu.
<br><br>

<li><b>Z</b><br>
Reset the processor so that we can see that splash screen.
<br><br>

<li><b>z</b><br>
Clear the terminal using a bunch of new lines.
<br><br>

<li><b>i</b><br>
Initialize the SD Card using the routines given in the inLab code.
<br><Br>

<li><b>a/A</b><br>
decrement or increment the address used to read the memory.  This is
also a cut-and-paste from the inlab code.
<br><br>

<li><b>r</b><br>
This should read a block from the SD Card and display it to the terminal
just as was done in the inLab code - just cut-and-paste
<br><br>


<li><b>1</b><br>
In order to test next weeks program, it will be very helpful to have
a known waveform stored in the SD Card.  Let's do future you a favor
and take care of this now.  Copy the following sine wave 
over and over again in the SD Card.  You need to copy the wave
"smoothly" across block boundaries.  In other words, when your code runs
out of room in one block at sin[index], the first value stored in the 
next block should be sin[index+1], NOT sin[0].  Continue storing sine
waves until the user presses any key.  After a keypress, tell the user
how many blocks have been stored.

<pre>
const uint8_t   sin[SINE_WAVE_ARRAY_LENGTH] = {128,	159,	187,	213,	233,	248,	255,	255,	248,	233,	213,	187,	159,	128,	97,	69,	43,	23,	8,	1,	1,	8,	23,	43,	69,	97};
</pre>

<li><b>s</b><br>
Spool block of data off the SD Card to the terminal.  Before you start 
spooling, you will configure PuTTY to store anything that appears on
the terminal into a file.  You will then spool blocks of the SD CArd
to the terminal.  Finally you will instruct PuTTY to close
the file.  
<br><br>


<li><b>+/-</b><br>
Change SAMPLE_RATE from a #define to a global variable sampleRate. 
Initialize the sampleRate to generate an interrupt every 100&micro;s.
Allow the '+' function the increase the sampleRate by 10&micro;s and
the '-' function the decrease the sampleRate by 10&micro;s.  Do not
allow the sampleRate to go below 20&micro;s. 
<br><br>

<li><b>P</b><br>
Play back the audio samples stored in the SD Card.

The audio level of the voice recordings will be pretty low, so make 
sure to listen to the recordings in a silent room.


<li><b>W</b><br>
This will record the microphone values converted through the ADC into the
SD Card at the sampling rate (default to 100 us).  When the user types 
'W' in the terminal window, prompt with user with
<font face="courier">Press any key to start recording audio and
press  any key to stop recording.</font>.  
This will allow the user to get all set-up without having to pay attention
to which key they press in order to start the audio recording.  
<br><br>

Your program must use double buffering so that it can acquire new samples
while storing old samples.  To do this you will use the TMR0 ISR to 
collected converted values from the ADC and start a new conversion.
In addition, the TMR0
ISR is responsible for moving the sampled value into either the red
or blue buffer (both global variables because of their size), and set 
flags true to indicate when either buffer is full.  Main should be 
monitoring these flags and writing the red or blue buffer to the SD
Card when either is full.  While main is doing this, the ISR should be
storing microphone samples to the other buffer.
<br><Br>


<h3>Volume hack</h3>
When you get the playback and record system to function correctly,
you will no doubt notice that the playback volume is very low.  This
is due in part to the low corner frequency of the output low pass
filter and the low gain of the output amplifier.  I provided you
a means to increase the volume of the output by connecting the two
pads on the solder jumper labeledl "volume" shown in the image below.  
To do this, grab a piece of solder, heat up a solder iron and add solder 
to the two pads until you intentionally create a solder bridge between
the two pads.

<img src="./img/increaseVolume.jpg"><br><br>

Note, that the down-side to this modification is that it will also
increase the volume level of the already loud square-wave output.
This may cause the development board to brown-out.

<h3>Bonus</h3>
Add a bonus feature that changes the playback rate of the audio recording
to slow them down or speed them up.  To do this increase or decrease
the time period between playback samples.  Since we are close to the
maximum playback rate, there will not be much room to increase the
payback rate without dropping samples.  However, there should be lots
of room to slow down the audio recording.  Experiment and choose 
playback rates which you feel best demonstrate this capability.
<pre>
s: slow down the playback rate
S: Speed up the playback rate
</pre>

<h2>Turn-in</h2>
Students can work in teams of two and turn in one hardcopy of their
work which includes:

<ol>
<li>A completed hardcopy of <a href="./eval10.docx">eval10.docx</a>.
	The form must be word processed. 
<li>Double column formatted hardcopy of the code in main.c
<li>Demonstrate your software in class.  
</ol>

<h2>Get ahead</h2>
For next week's lab we will be starting work on building a velocity sensitive
piano key using a Hall efffect sensor.  In order to make this happen, you will
be builind a low-cost piano key that looks like the following.
<br><img width=500 src="../lab11/img/assemble04.jpg"><br>

While not required, you may want to laser-cut and assemble a cardboard
box to hold your development board while you press the piano key.  This
box is shown in the image below.
<table>
<tr>
	<td width=500><img src="../lab11/img/box01.jpg"></td>
	<td width=500><img src="../lab11/img/box02.jpg"></td></tr>
</tr>
</table>

To laser but the parts for this box you will need to grab some 
cardboard (an 8.5"x11" piece of carboard would be more than
large enough) and head down to basement of Brown building during
business hours.  In the North West corner of the basement is a
room containing a laser cutter and a bunch of 3D printers.
Log onto the computer next to the Epilog laser cutter.  Open
a browser and download the Corel Draw file 
<a href="../lab11/laser/boxSupport.cdr">boxSupport.cdr</a>
that contains the plans for the box.
<br><br>

Open the file in Corel Draw (you need to log into this software with:
<ul>	<li>user:	bhaun@mines.edu
	<li>pwd:	epilog
</ul>

The file that I ghae you has a lot of tabs, click through them and look
for the plan for the box.  When you have found the plans, you need to
"print" the plans to the laser cutter using the following instructions:

<ul>
	<li>File &rarr; Print,
	<li>In the Print pop-up and in the General tab, select 
	Epilog Engraver as the printer,
	<li>Click  on the Preferences&hellip; button,
	<li>In the EpilogEngraver Properties pop-up:
	<ul>	<li>PieceSize (inches)	<br>
		Horiziontal: 36"	<br>
		Vertical: 24"
		<li>Vector Settings	<br>
		Speed:	30%		<br>
		Power	40%		<br>
		Freq:	500Hz
	</ul>
	<li>Click OK to leave the EpilogEngraver  pop-up,
	<li>Click Print to send your job to the Epilog laser cutter,
</ul>

<br><img src="./img/epilogPopUp.bmp"><br><br>


<h2>Running the EPILOG laser cutter</h2>

The Epilog laser cutter in the Mines Garage is a big dangerous, 
expensive piece of equipment.  The main danger from the laser cutter
is the myrid of small fires that it creates, not from the laser beam 
cutting you in half.  Consequently, you must be present at all times
while the laser is cutting material, no exception grated.  If you must
leave the laser cutter, open the top cover of the laser cutter and the
safety interlocks of the laser cutter will automatically turn off the
laser.

You can find more information about the laser cutter on the 
<a href="https://cecs.mines.edu/design-lab/">Design Lab</a>



fin.
</html
