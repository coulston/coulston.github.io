<!DOCTYPE html>
<html lang="en">
<!----- http://getbootstrap.com/css/ ----->
    <head>
        <title>Embedded System Design: Lab #8 - Signal acquisiton</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="description" content="EENG 383 - Microcomputer Architecture and Interfacing">
        <meta name="author" content="Chris Coulston">
        <link rel='stylesheet' type='text/css' href='//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.min.css'>
        <script src='//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/js/bootstrap.min.js'></script>
    </head>

<body>
        <div class = "container">
            <div class = "navbar navbar-inverse">
                <div class = "navbar-inner">
                    <a class = "brand" href="../../index.html">EENG 383</a>
                    <ul class = "nav">
                        <li><a href="../../index.html">Home</a></li>                     </ul>
                    <ul class="nav pull-right">
                        <li><a href="../lab08/lab08.html">&lt;Prev</a></li>
                        <li><a href="../lab10/lab10.html">Next&gt;</a></li>
                    </ul>
                </div>
            </div>

<center>
<h1>EENG 383</h1>
Lab 9 - Signal acquisition
</center>
<br>

<table class="table table-striped table-bordered table-condensed">
<tr><td>Start date:</td>        <td>Oct 18</td></tr>
<tr><td>End date:</td>          <td>Oct 25</td></tr>
<tr><td>Lab:</td>               <td>9</td></tr>
<tr><td>Status                  <td bgcolor = #D0FFD0>Live
</table>


<h2>InLab 9</h2>
Some self guided <a href="./inlab09.html">activities.</a>

<h2>Lab 9 assignment</h2>
Create an embedded application that fills the EEPROm with audio data
that, in the next lab, will be played back through the speaker.
The general architecture of the lab is shown below.  You will use an
ISR to collect microphone samples and store them in one of two buffers,
the blue buffer in the figure below.  While samples are being stored
in the blueBuffer, the redBuffer is being sent out to the EEPROM
over an I2C bus through the I2C2_MasterWrite interface function 
supplied by MCC.  Once blueBuffer is full and the redBuffer has
been sent, their roles are swapped.  The blueBuffer is then sent to 
the EEPROM and, while this is being done,  new microphone samples are
sent to the redBuffer.  This is called double buffering and an 
important technique in signal processing.

<br><img src="./img/system.bmp"><br><Br>

<h2>Software</h2>
At start-up your program should present a splash screen - this would
be a great place for some ascii art. The splash screen should also contain
connection instruction for the Dev'17 board; for this assignment tell
the user there are no jumpers to install! When you press "?" at the
terminal you should be greeted with the following menu.

<pre>
-------------------------------------------------
-------------------------------------------------
?: help menu
o: k
Z: Reset processor
z: Clear the terminal
r: read a page of memory from EEPROM
a/A decrease/increase read address
w: write perfect sine wave into the EEPROM
t: write incremental values on each page
W: Write microphone => EEPROM at 106 us
s: spool memory to a csv file
-------------------------------------------------
</pre>

<ul>
<li><b>?</b><br>
Prints out the ever useful help menu.  Display the current upper and
lower audio thresholds as part of the menu.
<br><br>

<li><b>z</b><br>
Clear the terminal using a bunch of new lines.
<br><br>

<li><b>z</b><br>
Reset the processor so that we can see that splash screen.
<br><br>

<li><b>r</b><br>
This should read a page from the EEPROM and display it to the terminal
just as was done in the inLab code - just cut-and-paste.

<li><b>a/A</b><br>
decrement or increment the address used to read the memory.  This is
also a cut-and-paste from the inlab code.

<li><b>w</b><br>
In order to test next weeks program, it will be very helpful to have
a known waveform stored in the EEPROM.  Let's do future you a favor
and take care of this now.  Copy the following 32 entry sin look up
table over and over again in the EEPROM.  Notice that the last entry
in the array, 103, leads nicely into the zero<sup>th</sup> entry of the
array, 128.

<pre>
uint8_t sin[32] = {128	,153	,177	,199	,219	,234	,246	,254	,255	,254	,246	,234	,219	,199	,177	,153	,128	,103	,79	,57	,37	,22	,10	,2	,0	,2	,10	,22	,37	,57	,79	,103};
</pre>

<b>Technical Notes:</b><br>
Unlike the following function, you will need to poll the 
I2C2_MESSAGE_PENDING and I2C2_DATA_NO_ACK flags to determine when the 
I2C data has been transmitted and when the write data has been committed
to non-volatile storage inside the EEPROM.  After both of these flags
are cleared, then you can proceed to continue storing another page of
sinusiods.


<li><b>t</b><br>
This is the "W" function from the inLab code.  After storing incremental
values on each page in the EEPROM, you will plot them out to demonstrate
that you are storing and spolling values correctly.

<li><b>W</b><br>
This will record the microphone values converted through the ADC
into the EEPROM every 106 us.  When the user types "W" in the terminal
window, prompt with user with
<font face="courier">Press any key to start recording 
3.2 seconds of audio</font>.  This will allow them to get all set-up
without having to pay attention to which key they press in order to 
start the brief recording.  Write ADC values until the entire memory 
is filled and the prompt the user with something like
<font face="courier">Completed filling up EEPROM</font>.<br><br>

<b>Technical Notes:</b><br>
Your write algorithm needs to use double buffering.  Since it takes
64*106&micro;s = 6.784 ms to read in a page worth's of microphone samples
and it takes 6.556 ms to write and commit a page's worth of data into
the EEPROM, you do not need to poll the I2C2_MESSAGE_PENDING flag.
You should definitely not poll the I2C2_DATA_NO_ACK flag, because 
you will be storing the new microphone samples in the array that is
not currently being stored.

<li><b>s</b><br>
In computing the term spooling is generally taken to mean outputting
a lot of raw data.  I want you to provide the capability to spool 
the entire EEPROM contents out to the terminal.  Before you start 
spooling, you will configure PuTTY to store anything that appears on
the terminal into a file.  You will then spool the contents of the 
EEPROM to the terminal.  Finally you will instruct PuTTY to close
the file.  You will then open the file in Excel and plot the audio
data.  I have found spooling to take around 2 minutes and 40 seconds,
its not quick.
<br><br>

When the user presses "s", provide them with the following prompt:
<pre>
Spooling the entire EEPROM will take 2.5 minutes.
You may terminate spooling at anytime with a keypress.
To spool terminal contents into a file follow these instructions:

Right mouse click on the upper left of the PuTTY window
Select:     Change settings...
Select:     Logging
Select:     Session logging: All session output
Log file name:  Browse and provide a .csv extension to your file name
Select:     Apply
Press any key to start
</pre>

Your program should then read consecutive pages of the EEPROM and
print the ADC values, one per row, out to the terminal.  After 
each page is printed to the terminal, check if a key has been pressed,
if not continue to read that page, print all 64-bytes and then check
again for a keypress.  Continue until a key is pressed or the last 
byte of the last page has been printed to the terminal.  At this
point you should present the user with some instructions to close 
the log file.  They should look something like:
<pre>
117
116
115
116
115
117
115
115
115
117
113
112
112
112
113
Spooled 512 out of the 512 blocks.
To close the file follow these instructions:

Right mouse click on the upper left of the PuTTY window
Select:     Change settings...
Select:     Logging
Select:     Session  logging: None
Select:     Apply
</pre>

<b>Technical Notes:</b><br>
Since the EEPROM auto-increments it's address, you should only
initialize the EEPROM address once before you start looping 
through the pages, the EEPROM will correctly keep track of the 
address between pages and move you from the end of one page to
the beginning of the next.
<br><br>

For this command, don't bother double buffering because the terminal 
output is the real bandwidth limited and you will gain no appreciable
advantage in download speed for all your efforts.  This means
that after issuing a read command you should poll on the
I2C2_MESSAGE_PENDING flag.


</ul>

<h3>Excel Instructions</h3>
In order to plot the spooled data, follow these instructions.
<ul>	<li>Open putty.csv in excel,
	<li>Delete any non-data lines at the top of column A by
	selecting the row numbers, right mouse and select delete,
	<li>Go to the bottom of the A column by clicking on any
	cell in the A column and then pressing the "End" key 
	and then pressing the down-arrow key,
	<li>Delete any non-data rows at the bottom of column A,
	<li>Go back to the top of column A by clicking on any
	cell in column A and the pressing the "End" key and then
	pressing the up-arrow key,
	<li>Select column A by clicking on the A,
	<li>Add a X-Y scatter plot Insert &rarr; Charts &rarr; X-Y scatter
	&rarr; Scatter with Straight Lines, 
	<li>Change the title of the plot with that you said, by clicking 
	on "title" and typing,
	<li>Stretch the graph horizontally by grabbing the right edge
	and mousing right.
</ul>
You should have something that looks like the following.

<img src="./img/soundWave.bmp"><br><br>

When you plot the values from the "t" function you should get 
something that looks like the following.
<img src="./img/triangleWave.bmp"><br><br>

When you plot the first 512 entries of the sine wave you should
get something that looks like the following.
<img src="./img/sineWave.bmp"><br><br>


<h2>Turn-in</h2>
Students can work in teams of two and turn in one hardcopy of their
work which includes:

<ol>
<li>A completed hardcopy of <a href="../eval.docx">eval.docx</a>.
	The form must be word processed. Include a copy of your
	Excel sound waveform on the evaluation.
<li>Double column formatted hardcopy of the code in main.c
<li>Demonstrate your software in class.  
</ol>

</html
