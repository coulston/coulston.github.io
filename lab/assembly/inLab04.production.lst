

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Tue Apr 16 13:12:58 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           ; Version 2.00
    45                           ; Generated 27/05/2018 GMT
    46                           ; 
    47                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F26K22 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataCOMRAM
    80  000B4E                     __pidataCOMRAM:
    81                           	opt stack 0
    82                           
    83                           ;initializer for TMR1_DefaultInterruptHandler@F5723
    84  000B4E  1FB0               	dw	8112
    85  000B50  2380               	dw	9088
    86  000B52  27E0               	dw	10208
    87                           
    88                           	psect	mediumconst
    89  00FDE2                     __pmediumconst:
    90                           	opt stack 0
    91  00FDE2  00                 	db	0
    92  00FDE3                     _hexpowers:
    93                           	opt stack 0
    94  00FDE3  0001               	dw	1
    95  00FDE5  0010               	dw	16
    96  00FDE7  0100               	dw	256
    97  00FDE9  1000               	dw	4096
    98  00FDEB                     __end_of_hexpowers:
    99                           	opt stack 0
   100  0000                     _ANSELA	set	3896
   101  0000                     _ANSELB	set	3897
   102  0000                     _ANSELC	set	3898
   103  0000                     _TMR1	set	4046
   104  0000                     _LATBbits	set	3978
   105  0000                     _LATCbits	set	3979
   106  0000                     _TXREG1	set	4013
   107  0000                     _RCREG1	set	4014
   108  0000                     _RCSTA1bits	set	4011
   109  0000                     _SPBRGH1	set	4016
   110  0000                     _SPBRG1	set	4015
   111  0000                     _TXSTA1	set	4012
   112  0000                     _RCSTA1	set	4011
   113  0000                     _BAUDCON1	set	4024
   114  0000                     _INTCONbits	set	4082
   115  0000                     _RCONbits	set	4048
   116  0000                     _T1GCONbits	set	4044
   117  0000                     _T1CONbits	set	4045
   118  0000                     _PIE1bits	set	3997
   119  0000                     _PIR1bits	set	3998
   120  0000                     _TMR1L	set	4046
   121  0000                     _TMR1H	set	4047
   122  0000                     _T1GCON	set	4044
   123  0000                     _T1CON	set	4045
   124  0000                     _INTCON2bits	set	4081
   125  0000                     _WPUB	set	3937
   126  0000                     _TRISC	set	3988
   127  0000                     _TRISB	set	3987
   128  0000                     _TRISA	set	3986
   129  0000                     _LATC	set	3979
   130  0000                     _LATB	set	3978
   131  0000                     _LATA	set	3977
   132  0000                     _OSCTUNE	set	3995
   133  0000                     _OSCCON2	set	4050
   134  0000                     _OSCCON	set	4051
   135  0000                     _PLLRDY	set	32407
   136  00FDEB                     STR_20:
   137  00FDEB  43                 	db	67	;'C'
   138  00FDEC  6F                 	db	111	;'o'
   139  00FDED  6E                 	db	110	;'n'
   140  00FDEE  6E                 	db	110	;'n'
   141  00FDEF  65                 	db	101	;'e'
   142  00FDF0  63                 	db	99	;'c'
   143  00FDF1  74                 	db	116	;'t'
   144  00FDF2  20                 	db	32
   145  00FDF3  6F                 	db	111	;'o'
   146  00FDF4  73                 	db	115	;'s'
   147  00FDF5  63                 	db	99	;'c'
   148  00FDF6  6F                 	db	111	;'o'
   149  00FDF7  70                 	db	112	;'p'
   150  00FDF8  65                 	db	101	;'e'
   151  00FDF9  20                 	db	32
   152  00FDFA  74                 	db	116	;'t'
   153  00FDFB  6F                 	db	111	;'o'
   154  00FDFC  20                 	db	32
   155  00FDFD  52                 	db	82	;'R'
   156  00FDFE  43                 	db	67	;'C'
   157  00FDFF  31                 	db	49	;'1'
   158  00FE00  2E                 	db	46
   159  00FE01  20                 	db	32
   160  00FE02  20                 	db	32
   161  00FE03  50                 	db	80	;'P'
   162  00FE04  72                 	db	114	;'r'
   163  00FE05  65                 	db	101	;'e'
   164  00FE06  73                 	db	115	;'s'
   165  00FE07  73                 	db	115	;'s'
   166  00FE08  20                 	db	32
   167  00FE09  61                 	db	97	;'a'
   168  00FE0A  6E                 	db	110	;'n'
   169  00FE0B  79                 	db	121	;'y'
   170  00FE0C  20                 	db	32
   171  00FE0D  6B                 	db	107	;'k'
   172  00FE0E  65                 	db	101	;'e'
   173  00FE0F  79                 	db	121	;'y'
   174  00FE10  20                 	db	32
   175  00FE11  77                 	db	119	;'w'
   176  00FE12  68                 	db	104	;'h'
   177  00FE13  65                 	db	101	;'e'
   178  00FE14  6E                 	db	110	;'n'
   179  00FE15  20                 	db	32
   180  00FE16  72                 	db	114	;'r'
   181  00FE17  65                 	db	101	;'e'
   182  00FE18  61                 	db	97	;'a'
   183  00FE19  64                 	db	100	;'d'
   184  00FE1A  79                 	db	121	;'y'
   185  00FE1B  20                 	db	32
   186  00FE1C  74                 	db	116	;'t'
   187  00FE1D  68                 	db	104	;'h'
   188  00FE1E  65                 	db	101	;'e'
   189  00FE1F  6E                 	db	110	;'n'
   190  00FE20  20                 	db	32
   191  00FE21  70                 	db	112	;'p'
   192  00FE22  72                 	db	114	;'r'
   193  00FE23  65                 	db	101	;'e'
   194  00FE24  73                 	db	115	;'s'
   195  00FE25  73                 	db	115	;'s'
   196  00FE26  20                 	db	32
   197  00FE27  61                 	db	97	;'a'
   198  00FE28  6E                 	db	110	;'n'
   199  00FE29  79                 	db	121	;'y'
   200  00FE2A  20                 	db	32
   201  00FE2B  6B                 	db	107	;'k'
   202  00FE2C  65                 	db	101	;'e'
   203  00FE2D  79                 	db	121	;'y'
   204  00FE2E  20                 	db	32
   205  00FE2F  74                 	db	116	;'t'
   206  00FE30  6F                 	db	111	;'o'
   207  00FE31  20                 	db	32
   208  00FE32  72                 	db	114	;'r'
   209  00FE33  65                 	db	101	;'e'
   210  00FE34  73                 	db	115	;'s'
   211  00FE35  75                 	db	117	;'u'
   212  00FE36  6D                 	db	109	;'m'
   213  00FE37  65                 	db	101	;'e'
   214  00FE38  2E                 	db	46
   215  00FE39  0D                 	db	13
   216  00FE3A  0A                 	db	10
   217  00FE3B  00                 	db	0
   218  00FE3C                     STR_3:
   219  00FE3C  52                 	db	82	;'R'
   220  00FE3D  42                 	db	66	;'B'
   221  00FE3E  35                 	db	53	;'5'
   222  00FE3F  20                 	db	32
   223  00FE40  2D                 	db	45
   224  00FE41  3E                 	db	62	;'>'
   225  00FE42  20                 	db	32
   226  00FE43  4C                 	db	76	;'L'
   227  00FE44  50                 	db	80	;'P'
   228  00FE45  46                 	db	70	;'F'
   229  00FE46  69                 	db	105	;'i'
   230  00FE47  6E                 	db	110	;'n'
   231  00FE48  20                 	db	32
   232  00FE49  61                 	db	97	;'a'
   233  00FE4A  6E                 	db	110	;'n'
   234  00FE4B  64                 	db	100	;'d'
   235  00FE4C  20                 	db	32
   236  00FE4D  69                 	db	105	;'i'
   237  00FE4E  6E                 	db	110	;'n'
   238  00FE4F  73                 	db	115	;'s'
   239  00FE50  74                 	db	116	;'t'
   240  00FE51  61                 	db	97	;'a'
   241  00FE52  6C                 	db	108	;'l'
   242  00FE53  6C                 	db	108	;'l'
   243  00FE54  20                 	db	32
   244  00FE55  4C                 	db	76	;'L'
   245  00FE56  50                 	db	80	;'P'
   246  00FE57  46                 	db	70	;'F'
   247  00FE58  6F                 	db	111	;'o'
   248  00FE59  75                 	db	117	;'u'
   249  00FE5A  74                 	db	116	;'t'
   250  00FE5B  2F                 	db	47
   251  00FE5C  41                 	db	65	;'A'
   252  00FE5D  4D                 	db	77	;'M'
   253  00FE5E  50                 	db	80	;'P'
   254  00FE5F  69                 	db	105	;'i'
   255  00FE60  6E                 	db	110	;'n'
   256  00FE61  20                 	db	32
   257  00FE62  6A                 	db	106	;'j'
   258  00FE63  75                 	db	117	;'u'
   259  00FE64  6D                 	db	109	;'m'
   260  00FE65  70                 	db	112	;'p'
   261  00FE66  65                 	db	101	;'e'
   262  00FE67  72                 	db	114	;'r'
   263  00FE68  00                 	db	0
   264  00FE69                     STR_14:
   265  00FE69  62                 	db	98	;'b'
   266  00FE6A  2F                 	db	47
   267  00FE6B  42                 	db	66	;'B'
   268  00FE6C  3A                 	db	58	;':'
   269  00FE6D  20                 	db	32
   270  00FE6E  73                 	db	115	;'s'
   271  00FE6F  74                 	db	116	;'t'
   272  00FE70  61                 	db	97	;'a'
   273  00FE71  72                 	db	114	;'r'
   274  00FE72  74                 	db	116	;'t'
   275  00FE73  2F                 	db	47
   276  00FE74  73                 	db	115	;'s'
   277  00FE75  74                 	db	116	;'t'
   278  00FE76  6F                 	db	111	;'o'
   279  00FE77  70                 	db	112	;'p'
   280  00FE78  20                 	db	32
   281  00FE79  70                 	db	112	;'p'
   282  00FE7A  72                 	db	114	;'r'
   283  00FE7B  69                 	db	105	;'i'
   284  00FE7C  6E                 	db	110	;'n'
   285  00FE7D  74                 	db	116	;'t'
   286  00FE7E  69                 	db	105	;'i'
   287  00FE7F  6E                 	db	110	;'n'
   288  00FE80  67                 	db	103	;'g'
   289  00FE81  20                 	db	32
   290  00FE82  69                 	db	105	;'i'
   291  00FE83  6E                 	db	110	;'n'
   292  00FE84  20                 	db	32
   293  00FE85  54                 	db	84	;'T'
   294  00FE86  4D                 	db	77	;'M'
   295  00FE87  52                 	db	82	;'R'
   296  00FE88  31                 	db	49	;'1'
   297  00FE89  20                 	db	32
   298  00FE8A  49                 	db	73	;'I'
   299  00FE8B  53                 	db	83	;'S'
   300  00FE8C  52                 	db	82	;'R'
   301  00FE8D  0D                 	db	13
   302  00FE8E  0A                 	db	10
   303  00FE8F  00                 	db	0
   304  00FE90                     STR_5:
   305  00FE90  2D                 	db	45
   306  00FE91  2D                 	db	45
   307  00FE92  2D                 	db	45
   308  00FE93  2D                 	db	45
   309  00FE94  2D                 	db	45
   310  00FE95  2D                 	db	45
   311  00FE96  2D                 	db	45
   312  00FE97  2D                 	db	45
   313  00FE98  2D                 	db	45
   314  00FE99  2D                 	db	45
   315  00FE9A  2D                 	db	45
   316  00FE9B  2D                 	db	45
   317  00FE9C  2D                 	db	45
   318  00FE9D  2D                 	db	45
   319  00FE9E  2D                 	db	45
   320  00FE9F  2D                 	db	45
   321  00FEA0  2D                 	db	45
   322  00FEA1  2D                 	db	45
   323  00FEA2  2D                 	db	45
   324  00FEA3  2D                 	db	45
   325  00FEA4  2D                 	db	45
   326  00FEA5  2D                 	db	45
   327  00FEA6  2D                 	db	45
   328  00FEA7  2D                 	db	45
   329  00FEA8  2D                 	db	45
   330  00FEA9  2D                 	db	45
   331  00FEAA  2D                 	db	45
   332  00FEAB  2D                 	db	45
   333  00FEAC  2D                 	db	45
   334  00FEAD  2D                 	db	45
   335  00FEAE  0D                 	db	13
   336  00FEAF  0A                 	db	10
   337  00FEB0  00                 	db	0
   338  00FEB1                     STR_12:
   339  00FEB1  6E                 	db	110	;'n'
   340  00FEB2  2F                 	db	47
   341  00FEB3  4E                 	db	78	;'N'
   342  00FEB4  3A                 	db	58	;':'
   343  00FEB5  20                 	db	32
   344  00FEB6  70                 	db	112	;'p'
   345  00FEB7  6C                 	db	108	;'l'
   346  00FEB8  61                 	db	97	;'a'
   347  00FEB9  79                 	db	121	;'y'
   348  00FEBA  2F                 	db	47
   349  00FEBB  53                 	db	83	;'S'
   350  00FEBC  74                 	db	116	;'t'
   351  00FEBD  6F                 	db	111	;'o'
   352  00FEBE  70                 	db	112	;'p'
   353  00FEBF  20                 	db	32
   354  00FEC0  70                 	db	112	;'p'
   355  00FEC1  6C                 	db	108	;'l'
   356  00FEC2  61                 	db	97	;'a'
   357  00FEC3  79                 	db	121	;'y'
   358  00FEC4  69                 	db	105	;'i'
   359  00FEC5  6E                 	db	110	;'n'
   360  00FEC6  67                 	db	103	;'g'
   361  00FEC7  20                 	db	32
   362  00FEC8  61                 	db	97	;'a'
   363  00FEC9  20                 	db	32
   364  00FECA  6E                 	db	110	;'n'
   365  00FECB  6F                 	db	111	;'o'
   366  00FECC  74                 	db	116	;'t'
   367  00FECD  65                 	db	101	;'e'
   368  00FECE  0D                 	db	13
   369  00FECF  0A                 	db	10
   370  00FED0  00                 	db	0
   371  00FED1                     STR_15:
   372  00FED1  74                 	db	116	;'t'
   373  00FED2  3A                 	db	58	;':'
   374  00FED3  20                 	db	32
   375  00FED4  74                 	db	116	;'t'
   376  00FED5  69                 	db	105	;'i'
   377  00FED6  6D                 	db	109	;'m'
   378  00FED7  65                 	db	101	;'e'
   379  00FED8  20                 	db	32
   380  00FED9  74                 	db	116	;'t'
   381  00FEDA  6F                 	db	111	;'o'
   382  00FEDB  20                 	db	32
   383  00FEDC  70                 	db	112	;'p'
   384  00FEDD  72                 	db	114	;'r'
   385  00FEDE  69                 	db	105	;'i'
   386  00FEDF  6E                 	db	110	;'n'
   387  00FEE0  74                 	db	116	;'t'
   388  00FEE1  20                 	db	32
   389  00FEE2  68                 	db	104	;'h'
   390  00FEE3  65                 	db	101	;'e'
   391  00FEE4  6C                 	db	108	;'l'
   392  00FEE5  6C                 	db	108	;'l'
   393  00FEE6  6F                 	db	111	;'o'
   394  00FEE7  20                 	db	32
   395  00FEE8  77                 	db	119	;'w'
   396  00FEE9  6F                 	db	111	;'o'
   397  00FEEA  72                 	db	114	;'r'
   398  00FEEB  6C                 	db	108	;'l'
   399  00FEEC  64                 	db	100	;'d'
   400  00FEED  0D                 	db	13
   401  00FEEE  0A                 	db	10
   402  00FEEF  00                 	db	0
   403  00FEF0                     STR_13:
   404  00FEF0  69                 	db	105	;'i'
   405  00FEF1  3A                 	db	58	;':'
   406  00FEF2  20                 	db	32
   407  00FEF3  69                 	db	105	;'i'
   408  00FEF4  6E                 	db	110	;'n'
   409  00FEF5  63                 	db	99	;'c'
   410  00FEF6  72                 	db	114	;'r'
   411  00FEF7  65                 	db	101	;'e'
   412  00FEF8  6D                 	db	109	;'m'
   413  00FEF9  65                 	db	101	;'e'
   414  00FEFA  6E                 	db	110	;'n'
   415  00FEFB  74                 	db	116	;'t'
   416  00FEFC  20                 	db	32
   417  00FEFD  6E                 	db	110	;'n'
   418  00FEFE  6F                 	db	111	;'o'
   419  00FEFF  74                 	db	116	;'t'
   420  00FF00  65                 	db	101	;'e'
   421  00FF01  20                 	db	32
   422  00FF02  69                 	db	105	;'i'
   423  00FF03  6E                 	db	110	;'n'
   424  00FF04  20                 	db	32
   425  00FF05  73                 	db	115	;'s'
   426  00FF06  6F                 	db	111	;'o'
   427  00FF07  6E                 	db	110	;'n'
   428  00FF08  67                 	db	103	;'g'
   429  00FF09  2E                 	db	46
   430  00FF0A  0D                 	db	13
   431  00FF0B  0A                 	db	10
   432  00FF0C  00                 	db	0
   433  00FF0D                     STR_11:
   434  00FF0D  7A                 	db	122	;'z'
   435  00FF0E  3A                 	db	58	;':'
   436  00FF0F  20                 	db	32
   437  00FF10  43                 	db	67	;'C'
   438  00FF11  6C                 	db	108	;'l'
   439  00FF12  65                 	db	101	;'e'
   440  00FF13  61                 	db	97	;'a'
   441  00FF14  72                 	db	114	;'r'
   442  00FF15  20                 	db	32
   443  00FF16  74                 	db	116	;'t'
   444  00FF17  68                 	db	104	;'h'
   445  00FF18  65                 	db	101	;'e'
   446  00FF19  20                 	db	32
   447  00FF1A  74                 	db	116	;'t'
   448  00FF1B  65                 	db	101	;'e'
   449  00FF1C  72                 	db	114	;'r'
   450  00FF1D  6D                 	db	109	;'m'
   451  00FF1E  69                 	db	105	;'i'
   452  00FF1F  6E                 	db	110	;'n'
   453  00FF20  61                 	db	97	;'a'
   454  00FF21  6C                 	db	108	;'l'
   455  00FF22  0D                 	db	13
   456  00FF23  0A                 	db	10
   457  00FF24  00                 	db	0
   458  00FF25                     STR_6:
   459  00FF25  20                 	db	32
   460  00FF26  20                 	db	32
   461  00FF27  20                 	db	32
   462  00FF28  20                 	db	32
   463  00FF29  20                 	db	32
   464  00FF2A  20                 	db	32
   465  00FF2B  20                 	db	32
   466  00FF2C  20                 	db	32
   467  00FF2D  54                 	db	84	;'T'
   468  00FF2E  4D                 	db	77	;'M'
   469  00FF2F  52                 	db	82	;'R'
   470  00FF30  31                 	db	49	;'1'
   471  00FF31  20                 	db	32
   472  00FF32  3D                 	db	61	;'='
   473  00FF33  20                 	db	32
   474  00FF34  30                 	db	48	;'0'
   475  00FF35  78                 	db	120	;'x'
   476  00FF36  25                 	db	37
   477  00FF37  30                 	db	48	;'0'
   478  00FF38  34                 	db	52	;'4'
   479  00FF39  78                 	db	120	;'x'
   480  00FF3A  0D                 	db	13
   481  00FF3B  0A                 	db	10
   482  00FF3C  00                 	db	0
   483  00FF3D                     STR_17:
   484  00FF3D  53                 	db	83	;'S'
   485  00FF3E  74                 	db	116	;'t'
   486  00FF3F  61                 	db	97	;'a'
   487  00FF40  72                 	db	114	;'r'
   488  00FF41  74                 	db	116	;'t'
   489  00FF42  20                 	db	32
   490  00FF43  70                 	db	112	;'p'
   491  00FF44  6C                 	db	108	;'l'
   492  00FF45  61                 	db	97	;'a'
   493  00FF46  79                 	db	121	;'y'
   494  00FF47  69                 	db	105	;'i'
   495  00FF48  6E                 	db	110	;'n'
   496  00FF49  67                 	db	103	;'g'
   497  00FF4A  20                 	db	32
   498  00FF4B  6E                 	db	110	;'n'
   499  00FF4C  6F                 	db	111	;'o'
   500  00FF4D  74                 	db	116	;'t'
   501  00FF4E  65                 	db	101	;'e'
   502  00FF4F  2E                 	db	46
   503  00FF50  0D                 	db	13
   504  00FF51  0A                 	db	10
   505  00FF52  00                 	db	0
   506  00FF53                     STR_2:
   507  00FF53  44                 	db	68	;'D'
   508  00FF54  65                 	db	101	;'e'
   509  00FF55  76                 	db	118	;'v'
   510  00FF56  27                 	db	39
   511  00FF57  31                 	db	49	;'1'
   512  00FF58  38                 	db	56	;'8'
   513  00FF59  20                 	db	32
   514  00FF5A  62                 	db	98	;'b'
   515  00FF5B  6F                 	db	111	;'o'
   516  00FF5C  61                 	db	97	;'a'
   517  00FF5D  72                 	db	114	;'r'
   518  00FF5E  64                 	db	100	;'d'
   519  00FF5F  20                 	db	32
   520  00FF60  77                 	db	119	;'w'
   521  00FF61  69                 	db	105	;'i'
   522  00FF62  72                 	db	114	;'r'
   523  00FF63  69                 	db	105	;'i'
   524  00FF64  6E                 	db	110	;'n'
   525  00FF65  67                 	db	103	;'g'
   526  00FF66  0D                 	db	13
   527  00FF67  0A                 	db	10
   528  00FF68  00                 	db	0
   529  00FF69                     STR_18:
   530  00FF69  53                 	db	83	;'S'
   531  00FF6A  74                 	db	116	;'t'
   532  00FF6B  6F                 	db	111	;'o'
   533  00FF6C  70                 	db	112	;'p'
   534  00FF6D  20                 	db	32
   535  00FF6E  70                 	db	112	;'p'
   536  00FF6F  6C                 	db	108	;'l'
   537  00FF70  61                 	db	97	;'a'
   538  00FF71  79                 	db	121	;'y'
   539  00FF72  69                 	db	105	;'i'
   540  00FF73  6E                 	db	110	;'n'
   541  00FF74  67                 	db	103	;'g'
   542  00FF75  20                 	db	32
   543  00FF76  6E                 	db	110	;'n'
   544  00FF77  6F                 	db	111	;'o'
   545  00FF78  74                 	db	116	;'t'
   546  00FF79  65                 	db	101	;'e'
   547  00FF7A  2E                 	db	46
   548  00FF7B  0D                 	db	13
   549  00FF7C  0A                 	db	10
   550  00FF7D  00                 	db	0
   551  00FF7E                     STR_19:
   552  00FF7E  50                 	db	80	;'P'
   553  00FF7F  6C                 	db	108	;'l'
   554  00FF80  61                 	db	97	;'a'
   555  00FF81  79                 	db	121	;'y'
   556  00FF82  69                 	db	105	;'i'
   557  00FF83  6E                 	db	110	;'n'
   558  00FF84  67                 	db	103	;'g'
   559  00FF85  20                 	db	32
   560  00FF86  6E                 	db	110	;'n'
   561  00FF87  65                 	db	101	;'e'
   562  00FF88  78                 	db	120	;'x'
   563  00FF89  74                 	db	116	;'t'
   564  00FF8A  20                 	db	32
   565  00FF8B  6E                 	db	110	;'n'
   566  00FF8C  6F                 	db	111	;'o'
   567  00FF8D  74                 	db	116	;'t'
   568  00FF8E  65                 	db	101	;'e'
   569  00FF8F  2E                 	db	46
   570  00FF90  0D                 	db	13
   571  00FF91  0A                 	db	10
   572  00FF92  00                 	db	0
   573  00FF93                     STR_10:
   574  00FF93  5A                 	db	90	;'Z'
   575  00FF94  3A                 	db	58	;':'
   576  00FF95  20                 	db	32
   577  00FF96  52                 	db	82	;'R'
   578  00FF97  65                 	db	101	;'e'
   579  00FF98  73                 	db	115	;'s'
   580  00FF99  65                 	db	101	;'e'
   581  00FF9A  74                 	db	116	;'t'
   582  00FF9B  20                 	db	32
   583  00FF9C  70                 	db	112	;'p'
   584  00FF9D  72                 	db	114	;'r'
   585  00FF9E  6F                 	db	111	;'o'
   586  00FF9F  63                 	db	99	;'c'
   587  00FFA0  65                 	db	101	;'e'
   588  00FFA1  73                 	db	115	;'s'
   589  00FFA2  73                 	db	115	;'s'
   590  00FFA3  6F                 	db	111	;'o'
   591  00FFA4  72                 	db	114	;'r'
   592  00FFA5  0D                 	db	13
   593  00FFA6  0A                 	db	10
   594  00FFA7  00                 	db	0
   595  00FFA8                     STR_1:
   596  00FFA8  69                 	db	105	;'i'
   597  00FFA9  6E                 	db	110	;'n'
   598  00FFAA  4C                 	db	76	;'L'
   599  00FFAB  61                 	db	97	;'a'
   600  00FFAC  62                 	db	98	;'b'
   601  00FFAD  20                 	db	32
   602  00FFAE  30                 	db	48	;'0'
   603  00FFAF  34                 	db	52	;'4'
   604  00FFB0  20                 	db	32
   605  00FFB1  74                 	db	116	;'t'
   606  00FFB2  65                 	db	101	;'e'
   607  00FFB3  72                 	db	114	;'r'
   608  00FFB4  6D                 	db	109	;'m'
   609  00FFB5  69                 	db	105	;'i'
   610  00FFB6  6E                 	db	110	;'n'
   611  00FFB7  61                 	db	97	;'a'
   612  00FFB8  6C                 	db	108	;'l'
   613  00FFB9  0D                 	db	13
   614  00FFBA  0A                 	db	10
   615  00FFBB  00                 	db	0
   616  00FFBC                     STR_27:
   617  00FFBC  30                 	db	48	;'0'
   618  00FFBD  31                 	db	49	;'1'
   619  00FFBE  32                 	db	50	;'2'
   620  00FFBF  33                 	db	51	;'3'
   621  00FFC0  34                 	db	52	;'4'
   622  00FFC1  35                 	db	53	;'5'
   623  00FFC2  36                 	db	54	;'6'
   624  00FFC3  37                 	db	55	;'7'
   625  00FFC4  38                 	db	56	;'8'
   626  00FFC5  39                 	db	57	;'9'
   627  00FFC6  61                 	db	97	;'a'
   628  00FFC7  62                 	db	98	;'b'
   629  00FFC8  63                 	db	99	;'c'
   630  00FFC9  64                 	db	100	;'d'
   631  00FFCA  65                 	db	101	;'e'
   632  00FFCB  66                 	db	102	;'f'
   633  00FFCC  00                 	db	0
   634  00FFCD                     STR_25:
   635  00FFCD  55                 	db	85	;'U'
   636  00FFCE  6E                 	db	110	;'n'
   637  00FFCF  6B                 	db	107	;'k'
   638  00FFD0  6E                 	db	110	;'n'
   639  00FFD1  6F                 	db	111	;'o'
   640  00FFD2  77                 	db	119	;'w'
   641  00FFD3  6E                 	db	110	;'n'
   642  00FFD4  20                 	db	32
   643  00FFD5  6B                 	db	107	;'k'
   644  00FFD6  65                 	db	101	;'e'
   645  00FFD7  79                 	db	121	;'y'
   646  00FFD8  20                 	db	32
   647  00FFD9  25                 	db	37
   648  00FFDA  63                 	db	99	;'c'
   649  00FFDB  0D                 	db	13
   650  00FFDC  0A                 	db	10
   651  00FFDD  00                 	db	0
   652  00FFDE                     STR_8:
   653  00FFDE  3F                 	db	63	;'?'
   654  00FFDF  3A                 	db	58	;':'
   655  00FFE0  20                 	db	32
   656  00FFE1  48                 	db	72	;'H'
   657  00FFE2  65                 	db	101	;'e'
   658  00FFE3  6C                 	db	108	;'l'
   659  00FFE4  70                 	db	112	;'p'
   660  00FFE5  20                 	db	32
   661  00FFE6  6D                 	db	109	;'m'
   662  00FFE7  65                 	db	101	;'e'
   663  00FFE8  6E                 	db	110	;'n'
   664  00FFE9  75                 	db	117	;'u'
   665  00FFEA  0D                 	db	13
   666  00FFEB  0A                 	db	10
   667  00FFEC  00                 	db	0
   668  00FFED                     STR_9:
   669  00FFED  6F                 	db	111	;'o'
   670  00FFEE  3A                 	db	58	;':'
   671  00FFEF  20                 	db	32
   672  00FFF0  6B                 	db	107	;'k'
   673  00FFF1  0D                 	db	13
   674  00FFF2  0A                 	db	10
   675  00FFF3  00                 	db	0
   676  00FFF4                     STR_22:
   677  00FFF4  6B                 	db	107	;'k'
   678  00FFF5  2E                 	db	46
   679  00FFF6  0D                 	db	13
   680  00FFF7  0A                 	db	10
   681  00FFF8  00                 	db	0
   682  00FFF9                     STR_4:
   683  00FFF9  0D                 	db	13
   684  00FFFA  0A                 	db	10
   685  00FFFB  3E                 	db	62	;'>'
   686  00FFFC  20                 	db	32
   687  00FFFD  00                 	db	0
   688  0000                     
   689                           ; #config settings
   690  00FFFE  00                 	db	0	; dummy byte at the end
   691  0000                     
   692                           	psect	cinit
   693  000940                     __pcinit:
   694                           	opt stack 0
   695  000940                     start_initialization:
   696                           	opt stack 0
   697  000940                     __initialization:
   698                           	opt stack 0
   699                           
   700                           ; Initialize objects allocated to COMRAM (6 bytes)
   701                           ; load TBLPTR registers with __pidataCOMRAM
   702  000940  0E4E               	movlw	low __pidataCOMRAM
   703  000942  6EF6               	movwf	tblptrl,c
   704  000944  0E0B               	movlw	high __pidataCOMRAM
   705  000946  6EF7               	movwf	tblptrh,c
   706  000948  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   707  00094A  6EF8               	movwf	tblptru,c
   708  00094C  EE00  F038         	lfsr	0,__pdataCOMRAM
   709  000950  EE10 F006          	lfsr	1,6
   710  000954                     copy_data0:
   711  000954  0009               	tblrd		*+
   712  000956  CFF5 FFEE          	movff	tablat,postinc0
   713  00095A  50E5               	movf	postdec1,w,c
   714  00095C  50E1               	movf	fsr1l,w,c
   715  00095E  E1FA               	bnz	copy_data0
   716                           
   717                           ; Clear objects allocated to COMRAM (8 bytes)
   718  000960  EE00  F030         	lfsr	0,__pbssCOMRAM
   719  000964  0E08               	movlw	8
   720  000966                     clear_0:
   721  000966  6AEE               	clrf	postinc0,c
   722  000968  06E8               	decf	wreg,f,c
   723  00096A  E1FD               	bnz	clear_0
   724  00096C                     end_of_initialization:
   725                           	opt stack 0
   726  00096C                     __end_of__initialization:
   727                           	opt stack 0
   728  00096C  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   729  00096E  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   730  000970  0100               	movlb	0
   731  000972  EFEB  F002         	goto	_main	;jump to C main() function
   732                           tblptru	equ	0xFF8
   733                           tblptrh	equ	0xFF7
   734                           tblptrl	equ	0xFF6
   735                           tablat	equ	0xFF5
   736                           postinc0	equ	0xFEE
   737                           wreg	equ	0xFE8
   738                           postdec1	equ	0xFE5
   739                           fsr1l	equ	0xFE1
   740                           
   741                           	psect	bssCOMRAM
   742  000030                     __pbssCOMRAM:
   743                           	opt stack 0
   744  000030                     _TMR1_InterruptHandler:
   745                           	opt stack 0
   746  000030                     	ds	2
   747  000032                     _timer1ReloadVal:
   748                           	opt stack 0
   749  000032                     	ds	2
   750  000034                     TMR1_DefaultInterruptHandler@noteIndex:
   751                           	opt stack 0
   752  000034                     	ds	1
   753  000035                     _doSomethingBad:
   754                           	opt stack 0
   755  000035                     	ds	1
   756  000036                     _incNote:
   757                           	opt stack 0
   758  000036                     	ds	1
   759  000037                     _playNote:
   760                           	opt stack 0
   761  000037                     	ds	1
   762                           tblptru	equ	0xFF8
   763                           tblptrh	equ	0xFF7
   764                           tblptrl	equ	0xFF6
   765                           tablat	equ	0xFF5
   766                           postinc0	equ	0xFEE
   767                           wreg	equ	0xFE8
   768                           postdec1	equ	0xFE5
   769                           fsr1l	equ	0xFE1
   770                           
   771                           	psect	dataCOMRAM
   772  000038                     __pdataCOMRAM:
   773                           	opt stack 0
   774  000038                     TMR1_DefaultInterruptHandler@F5723:
   775                           	opt stack 0
   776  000038                     	ds	6
   777                           tblptru	equ	0xFF8
   778                           tblptrh	equ	0xFF7
   779                           tblptrl	equ	0xFF6
   780                           tablat	equ	0xFF5
   781                           postinc0	equ	0xFEE
   782                           wreg	equ	0xFE8
   783                           postdec1	equ	0xFE5
   784                           fsr1l	equ	0xFE1
   785                           
   786                           	psect	cstackBANK0
   787  000060                     __pcstackBANK0:
   788                           	opt stack 0
   789  000060                     ??_isdigit:
   790  000060                     ?_TMR1_ReadTimer:
   791                           	opt stack 0
   792  000060                     ?___wmul:
   793                           	opt stack 0
   794  000060                     ?___lwdiv:
   795                           	opt stack 0
   796  000060                     EUSART1_Write@txData:
   797                           	opt stack 0
   798  000060                     TMR1_SetInterruptHandler@InterruptHandler:
   799                           	opt stack 0
   800  000060                     ___wmul@multiplier:
   801                           	opt stack 0
   802  000060                     ___lwdiv@dividend:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x0
   806  000060                     	ds	1
   807  000061                     putch@txData:
   808                           	opt stack 0
   809  000061                     _isdigit$1289:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x1
   813  000061                     	ds	1
   814  000062                     ??_TMR1_ReadTimer:
   815  000062                     isdigit@c:
   816                           	opt stack 0
   817  000062                     ___wmul@multiplicand:
   818                           	opt stack 0
   819  000062                     ___lwdiv@divisor:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0x2
   823  000062                     	ds	2
   824  000064                     ___lwdiv@counter:
   825                           	opt stack 0
   826  000064                     TMR1_ReadTimer@readVal:
   827                           	opt stack 0
   828  000064                     ___wmul@product:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x4
   832  000064                     	ds	1
   833  000065                     ___lwdiv@quotient:
   834                           	opt stack 0
   835                           
   836                           ; 2 bytes @ 0x5
   837  000065                     	ds	1
   838  000066                     TMR1_ReadTimer@readValHigh:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x6
   842  000066                     	ds	1
   843  000067                     TMR1_ReadTimer@readValLow:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x7
   847  000067                     	ds	1
   848  000068                     ?_printf:
   849                           	opt stack 0
   850  000068                     printf@f:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x8
   854  000068                     	ds	4
   855  00006C                     ??_printf:
   856                           
   857                           ; 1 bytes @ 0xC
   858  00006C                     	ds	4
   859  000070                     printf@idx:
   860                           	opt stack 0
   861                           
   862                           ; 1 bytes @ 0x10
   863  000070                     	ds	1
   864  000071                     printf@cp:
   865                           	opt stack 0
   866                           
   867                           ; 2 bytes @ 0x11
   868  000071                     	ds	2
   869  000073                     printf@flag:
   870                           	opt stack 0
   871                           
   872                           ; 1 bytes @ 0x13
   873  000073                     	ds	1
   874  000074                     printf@val:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x14
   878  000074                     	ds	2
   879  000076                     printf@prec:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x16
   883  000076                     	ds	1
   884  000077                     printf@ap:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0x17
   888  000077                     	ds	2
   889  000079                     printf@len:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0x19
   893  000079                     	ds	2
   894  00007B                     printf@width:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x1B
   898  00007B                     	ds	2
   899  00007D                     printf@c:
   900                           	opt stack 0
   901                           
   902                           ; 1 bytes @ 0x1D
   903  00007D                     	ds	1
   904  00007E                     main@cmd:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x1E
   908  00007E                     	ds	1
   909  00007F                     main@i:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x1F
   913  00007F                     	ds	1
   914                           tblptru	equ	0xFF8
   915                           tblptrh	equ	0xFF7
   916                           tblptrl	equ	0xFF6
   917                           tablat	equ	0xFF5
   918                           postinc0	equ	0xFEE
   919                           wreg	equ	0xFE8
   920                           postdec1	equ	0xFE5
   921                           fsr1l	equ	0xFE1
   922                           
   923                           	psect	cstackCOMRAM
   924  000001                     __pcstackCOMRAM:
   925                           	opt stack 0
   926  000001                     ??i2_isdigit:
   927  000001                     ?i2___wmul:
   928                           	opt stack 0
   929  000001                     ?i2___lwdiv:
   930                           	opt stack 0
   931  000001                     i2EUSART1_Write@txData:
   932                           	opt stack 0
   933  000001                     TMR1_WriteTimer@timerVal:
   934                           	opt stack 0
   935  000001                     i2___wmul@multiplier:
   936                           	opt stack 0
   937  000001                     i2___lwdiv@dividend:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x0
   941  000001                     	ds	1
   942  000002                     i2putch@txData:
   943                           	opt stack 0
   944  000002                     i2_isdigit$1289:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x1
   948  000002                     	ds	1
   949  000003                     i2isdigit@c:
   950                           	opt stack 0
   951  000003                     i2___wmul@multiplicand:
   952                           	opt stack 0
   953  000003                     i2___lwdiv@divisor:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x2
   957  000003                     	ds	2
   958  000005                     i2___wmul@product:
   959                           	opt stack 0
   960  000005                     i2___lwdiv@quotient:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x4
   964  000005                     	ds	2
   965  000007                     i2___lwdiv@counter:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x6
   969  000007                     	ds	1
   970  000008                     ?i2_printf:
   971                           	opt stack 0
   972  000008                     i2printf@f:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x7
   976  000008                     	ds	2
   977  00000A                     ??i2_printf:
   978                           
   979                           ; 1 bytes @ 0x9
   980  00000A                     	ds	4
   981  00000E                     i2printf@cp:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0xD
   985  00000E                     	ds	2
   986  000010                     i2printf@idx:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0xF
   990  000010                     	ds	1
   991  000011                     i2printf@flag:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x10
   995  000011                     	ds	1
   996  000012                     i2printf@val:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x11
  1000  000012                     	ds	2
  1001  000014                     i2printf@prec:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x13
  1005  000014                     	ds	1
  1006  000015                     i2printf@ap:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x14
  1010  000015                     	ds	2
  1011  000017                     i2printf@len:
  1012                           	opt stack 0
  1013                           
  1014                           ; 2 bytes @ 0x16
  1015  000017                     	ds	2
  1016  000019                     i2printf@width:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0x18
  1020  000019                     	ds	2
  1021  00001B                     i2printf@c:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x1A
  1025  00001B                     	ds	1
  1026  00001C                     ??_TMR1_DefaultInterruptHandler:
  1027                           
  1028                           ; 1 bytes @ 0x1B
  1029  00001C                     	ds	2
  1030  00001E                     TMR1_DefaultInterruptHandler@halfPeriod:
  1031                           	opt stack 0
  1032                           
  1033                           ; 6 bytes @ 0x1D
  1034  00001E                     	ds	6
  1035  000024                     ??_INTERRUPT_InterruptManager:
  1036                           
  1037                           ; 1 bytes @ 0x23
  1038  000024                     	ds	12
  1039                           tblptru	equ	0xFF8
  1040                           tblptrh	equ	0xFF7
  1041                           tblptrl	equ	0xFF6
  1042                           tablat	equ	0xFF5
  1043                           postinc0	equ	0xFEE
  1044                           wreg	equ	0xFE8
  1045                           postdec1	equ	0xFE5
  1046                           fsr1l	equ	0xFE1
  1047                           
  1048 ;;
  1049 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1050 ;;
  1051 ;; *************** function _main *****************
  1052 ;; Defined at:
  1053 ;;		line 33 in file "main.c"
  1054 ;; Parameters:    Size  Location     Type
  1055 ;;		None
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;  i               1   31[BANK0 ] unsigned char 
  1058 ;;  cmd             1   30[BANK0 ] unsigned char 
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  1    wreg      void 
  1061 ;; Registers used:
  1062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1069 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1071 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1072 ;;Total ram usage:        2 bytes
  1073 ;; Hardware stack levels required when called:    9
  1074 ;; This function calls:
  1075 ;;		_EUSART1_Read
  1076 ;;		_SYSTEM_Initialize
  1077 ;;		_TMR1_ReadTimer
  1078 ;;		_printf
  1079 ;; This function is called by:
  1080 ;;		Startup code after reset
  1081 ;; This function uses a non-reentrant model
  1082 ;;
  1083                           
  1084                           	psect	text0
  1085  0005D6                     __ptext0:
  1086                           	opt stack 0
  1087  0005D6                     _main:
  1088                           	opt stack 22
  1089                           
  1090                           ;main.c: 35: uint8_t i;;main.c: 36: char cmd;;main.c: 38: SYSTEM_Initialize();
  1091                           
  1092                           ;incstack = 0
  1093  0005D6  EC62  F005         	call	_SYSTEM_Initialize	;wreg free
  1094                           
  1095                           ;main.c: 39: (INTCONbits.GIE = 1);
  1096  0005DA  8EF2               	bsf	intcon,7,c	;volatile
  1097                           
  1098                           ;main.c: 40: (INTCONbits.PEIE = 1);
  1099  0005DC  8CF2               	bsf	intcon,6,c	;volatile
  1100                           
  1101                           ;main.c: 42: printf("inLab 04 terminal\r\n");
  1102  0005DE  0EA8               	movlw	low STR_1
  1103  0005E0  0100               	movlb	0	; () banked
  1104  0005E2  6F68               	movwf	printf@f& (0+255),b
  1105  0005E4  0EFF               	movlw	high STR_1
  1106  0005E6  6F69               	movwf	(printf@f+1)& (0+255),b
  1107  0005E8  EC3F  F000         	call	_printf	;wreg free
  1108                           
  1109                           ;main.c: 43: printf("Dev'18 board wiring\r\n");
  1110  0005EC  0E53               	movlw	low STR_2
  1111  0005EE  0100               	movlb	0	; () banked
  1112  0005F0  6F68               	movwf	printf@f& (0+255),b
  1113  0005F2  0EFF               	movlw	high STR_2
  1114  0005F4  6F69               	movwf	(printf@f+1)& (0+255),b
  1115  0005F6  EC3F  F000         	call	_printf	;wreg free
  1116                           
  1117                           ;main.c: 44: printf("RB5 -> LPFin and install LPFout/AMPin jumper");
  1118  0005FA  0E3C               	movlw	low STR_3
  1119  0005FC  0100               	movlb	0	; () banked
  1120  0005FE  6F68               	movwf	printf@f& (0+255),b
  1121  000600  0EFE               	movlw	high STR_3
  1122  000602  6F69               	movwf	(printf@f+1)& (0+255),b
  1123  000604  EC3F  F000         	call	_printf	;wreg free
  1124                           
  1125                           ;main.c: 45: printf("\r\n> ");
  1126  000608  0EF9               	movlw	low STR_4
  1127  00060A  0100               	movlb	0	; () banked
  1128  00060C  6F68               	movwf	printf@f& (0+255),b
  1129  00060E  0EFF               	movlw	high STR_4
  1130  000610  6F69               	movwf	(printf@f+1)& (0+255),b
  1131  000612  EC3F  F000         	call	_printf	;wreg free
  1132  000616                     
  1133                           ;main.c: 49: if ((PIR1bits.RC1IF)) {
  1134  000616  AA9E               	btfss	3998,5,c	;volatile
  1135  000618  D7FE               	goto	l205
  1136                           
  1137                           ;main.c: 50: cmd = EUSART1_Read();
  1138  00061A  EC81  F005         	call	_EUSART1_Read	;wreg free
  1139  00061E  0100               	movlb	0	; () banked
  1140  000620  6F7E               	movwf	main@cmd& (0+255),b
  1141                           
  1142                           ;main.c: 51: switch (cmd) {
  1143  000622  D0D3               	goto	l207
  1144  000624                     
  1145                           ; BSR set to: 0
  1146                           ;main.c: 53: printf("------------------------------\r\n");
  1147                           
  1148                           ; BSR set to: 0
  1149  000624  0E90               	movlw	low STR_5
  1150  000626  6F68               	movwf	printf@f& (0+255),b
  1151  000628  0EFE               	movlw	high STR_5
  1152  00062A  6F69               	movwf	(printf@f+1)& (0+255),b
  1153  00062C  EC3F  F000         	call	_printf	;wreg free
  1154                           
  1155                           ;main.c: 54: printf("        TMR1 = 0x%04x\r\n",TMR1_ReadTimer());
  1156  000630  0E25               	movlw	low STR_6
  1157  000632  0100               	movlb	0	; () banked
  1158  000634  6F68               	movwf	printf@f& (0+255),b
  1159  000636  0EFF               	movlw	high STR_6
  1160  000638  6F69               	movwf	(printf@f+1)& (0+255),b
  1161  00063A  EC35  F005         	call	_TMR1_ReadTimer	;wreg free
  1162  00063E  C060  F06A         	movff	?_TMR1_ReadTimer,?_printf+2
  1163  000642  C061  F06B         	movff	?_TMR1_ReadTimer+1,?_printf+3
  1164  000646  EC3F  F000         	call	_printf	;wreg free
  1165                           
  1166                           ;main.c: 55: printf("------------------------------\r\n");
  1167  00064A  0E90               	movlw	low STR_5
  1168  00064C  0100               	movlb	0	; () banked
  1169  00064E  6F68               	movwf	printf@f& (0+255),b
  1170  000650  0EFE               	movlw	high STR_5
  1171  000652  6F69               	movwf	(printf@f+1)& (0+255),b
  1172  000654  EC3F  F000         	call	_printf	;wreg free
  1173                           
  1174                           ;main.c: 56: printf("?: Help menu\r\n");
  1175  000658  0EDE               	movlw	low STR_8
  1176  00065A  0100               	movlb	0	; () banked
  1177  00065C  6F68               	movwf	printf@f& (0+255),b
  1178  00065E  0EFF               	movlw	high STR_8
  1179  000660  6F69               	movwf	(printf@f+1)& (0+255),b
  1180  000662  EC3F  F000         	call	_printf	;wreg free
  1181                           
  1182                           ;main.c: 57: printf("o: k\r\n");
  1183  000666  0EED               	movlw	low STR_9
  1184  000668  0100               	movlb	0	; () banked
  1185  00066A  6F68               	movwf	printf@f& (0+255),b
  1186  00066C  0EFF               	movlw	high STR_9
  1187  00066E  6F69               	movwf	(printf@f+1)& (0+255),b
  1188  000670  EC3F  F000         	call	_printf	;wreg free
  1189                           
  1190                           ;main.c: 58: printf("Z: Reset processor\r\n");
  1191  000674  0E93               	movlw	low STR_10
  1192  000676  0100               	movlb	0	; () banked
  1193  000678  6F68               	movwf	printf@f& (0+255),b
  1194  00067A  0EFF               	movlw	high STR_10
  1195  00067C  6F69               	movwf	(printf@f+1)& (0+255),b
  1196  00067E  EC3F  F000         	call	_printf	;wreg free
  1197                           
  1198                           ;main.c: 59: printf("z: Clear the terminal\r\n");
  1199  000682  0E0D               	movlw	low STR_11
  1200  000684  0100               	movlb	0	; () banked
  1201  000686  6F68               	movwf	printf@f& (0+255),b
  1202  000688  0EFF               	movlw	high STR_11
  1203  00068A  6F69               	movwf	(printf@f+1)& (0+255),b
  1204  00068C  EC3F  F000         	call	_printf	;wreg free
  1205                           
  1206                           ;main.c: 60: printf("n/N: play/Stop playing a note\r\n");
  1207  000690  0EB1               	movlw	low STR_12
  1208  000692  0100               	movlb	0	; () banked
  1209  000694  6F68               	movwf	printf@f& (0+255),b
  1210  000696  0EFE               	movlw	high STR_12
  1211  000698  6F69               	movwf	(printf@f+1)& (0+255),b
  1212  00069A  EC3F  F000         	call	_printf	;wreg free
  1213                           
  1214                           ;main.c: 61: printf("i: increment note in song.\r\n");
  1215  00069E  0EF0               	movlw	low STR_13
  1216  0006A0  0100               	movlb	0	; () banked
  1217  0006A2  6F68               	movwf	printf@f& (0+255),b
  1218  0006A4  0EFE               	movlw	high STR_13
  1219  0006A6  6F69               	movwf	(printf@f+1)& (0+255),b
  1220  0006A8  EC3F  F000         	call	_printf	;wreg free
  1221                           
  1222                           ;main.c: 62: printf("b/B: start/stop printing in TMR1 ISR\r\n");
  1223  0006AC  0E69               	movlw	low STR_14
  1224  0006AE  0100               	movlb	0	; () banked
  1225  0006B0  6F68               	movwf	printf@f& (0+255),b
  1226  0006B2  0EFE               	movlw	high STR_14
  1227  0006B4  6F69               	movwf	(printf@f+1)& (0+255),b
  1228  0006B6  EC3F  F000         	call	_printf	;wreg free
  1229                           
  1230                           ;main.c: 63: printf("t: time to print ""hello world""\r\n");
  1231  0006BA  0ED1               	movlw	low STR_15
  1232  0006BC  0100               	movlb	0	; () banked
  1233  0006BE  6F68               	movwf	printf@f& (0+255),b
  1234  0006C0  0EFE               	movlw	high STR_15
  1235  0006C2  6F69               	movwf	(printf@f+1)& (0+255),b
  1236  0006C4  EC3F  F000         	call	_printf	;wreg free
  1237                           
  1238                           ;main.c: 64: printf("------------------------------\r\n");
  1239  0006C8  0E90               	movlw	low STR_5
  1240  0006CA  0100               	movlb	0	; () banked
  1241  0006CC  6F68               	movwf	printf@f& (0+255),b
  1242  0006CE  0EFE               	movlw	high STR_5
  1243  0006D0  6F69               	movwf	(printf@f+1)& (0+255),b
  1244  0006D2  EC3F  F000         	call	_printf	;wreg free
  1245                           
  1246                           ;main.c: 65: break;
  1247  0006D6  D79F               	goto	l205
  1248  0006D8                     
  1249                           ;main.c: 71: printf("Start playing note.\r\n");
  1250  0006D8  0E3D               	movlw	low STR_17
  1251  0006DA  0100               	movlb	0	; () banked
  1252  0006DC  6F68               	movwf	printf@f& (0+255),b
  1253  0006DE  0EFF               	movlw	high STR_17
  1254  0006E0  6F69               	movwf	(printf@f+1)& (0+255),b
  1255  0006E2  EC3F  F000         	call	_printf	;wreg free
  1256                           
  1257                           ;main.c: 72: playNote = 1;
  1258  0006E6  0E01               	movlw	1
  1259  0006E8  D008               	goto	L1
  1260  0006EA                     
  1261                           ;main.c: 79: printf("Stop playing note.\r\n");
  1262  0006EA  0E69               	movlw	low STR_18
  1263  0006EC  0100               	movlb	0	; () banked
  1264  0006EE  6F68               	movwf	printf@f& (0+255),b
  1265  0006F0  0EFF               	movlw	high STR_18
  1266  0006F2  6F69               	movwf	(printf@f+1)& (0+255),b
  1267  0006F4  EC3F  F000         	call	_printf	;wreg free
  1268                           
  1269                           ;main.c: 80: playNote = 0;
  1270  0006F8  0E00               	movlw	0
  1271  0006FA                     L1:
  1272  0006FA  6E37               	movwf	_playNote,c
  1273                           
  1274                           ;main.c: 81: break;
  1275  0006FC  D78C               	goto	l205
  1276  0006FE                     
  1277                           ;main.c: 87: printf("Playing next note.\r\n");
  1278  0006FE  0E7E               	movlw	low STR_19
  1279  000700  0100               	movlb	0	; () banked
  1280  000702  6F68               	movwf	printf@f& (0+255),b
  1281  000704  0EFF               	movlw	high STR_19
  1282  000706  6F69               	movwf	(printf@f+1)& (0+255),b
  1283  000708  EC3F  F000         	call	_printf	;wreg free
  1284                           
  1285                           ;main.c: 88: incNote = 1;
  1286  00070C  0E01               	movlw	1
  1287  00070E  6E36               	movwf	_incNote,c
  1288                           
  1289                           ;main.c: 89: break;
  1290  000710  D782               	goto	l205
  1291  000712                     
  1292                           ;main.c: 95: case 'B':;main.c: 96: if (cmd == 'b') doSomethingBad = 1;
  1293  000712  0E62               	movlw	98
  1294  000714  0100               	movlb	0	; () banked
  1295  000716  197E               	xorwf	main@cmd& (0+255),w,b
  1296  000718  A4D8               	btfss	status,2,c
  1297  00071A  D002               	goto	l215
  1298                           
  1299                           ; BSR set to: 0
  1300  00071C  0E01               	movlw	1
  1301  00071E  6E35               	movwf	_doSomethingBad,c
  1302  000720                     l215:
  1303                           
  1304                           ; BSR set to: 0
  1305                           ;main.c: 97: if (cmd == 'B') doSomethingBad = 0;
  1306                           
  1307                           ; BSR set to: 0
  1308  000720  0E42               	movlw	66
  1309  000722  197E               	xorwf	main@cmd& (0+255),w,b
  1310  000724  A4D8               	btfss	status,2,c
  1311  000726  D777               	goto	l205
  1312                           
  1313                           ; BSR set to: 0
  1314  000728  0E00               	movlw	0
  1315  00072A  6E35               	movwf	_doSomethingBad,c
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;main.c: 98: break;
  1319  00072C  D774               	goto	l205
  1320  00072E                     l217:
  1321                           
  1322                           ; BSR set to: 0
  1323                           ;main.c: 104: (INTCONbits.GIE = 0);
  1324  00072E  9EF2               	bcf	intcon,7,c	;volatile
  1325                           
  1326                           ; BSR set to: 0
  1327                           ;main.c: 105: printf("Connect oscope to RC1.  Press any key when ready then press any ke
      +                          y to resume.\r\n");
  1328  000730  0EEB               	movlw	low STR_20
  1329  000732  6F68               	movwf	printf@f& (0+255),b
  1330  000734  0EFD               	movlw	high STR_20
  1331  000736  6F69               	movwf	(printf@f+1)& (0+255),b
  1332  000738  EC3F  F000         	call	_printf	;wreg free
  1333  00073C  AA9E               	btfss	3998,5,c	;volatile
  1334  00073E  D7FE               	goto	l219
  1335                           
  1336                           ;main.c: 108: (void) EUSART1_Read();
  1337  000740  EC81  F005         	call	_EUSART1_Read	;wreg free
  1338                           
  1339                           ;main.c: 109: do { LATCbits.LATC1 = 1; } while(0);
  1340  000744  828B               	bsf	3979,1,c	;volatile
  1341                           
  1342                           ;main.c: 110: printf("hello world\r\n");
  1343  000746  0EE2               	movlw	low (STR_15+17)
  1344  000748  0100               	movlb	0	; () banked
  1345  00074A  6F68               	movwf	printf@f& (0+255),b
  1346  00074C  0EFE               	movlw	high (STR_15+17)
  1347  00074E  6F69               	movwf	(printf@f+1)& (0+255),b
  1348  000750  EC3F  F000         	call	_printf	;wreg free
  1349                           
  1350                           ;main.c: 111: do { LATCbits.LATC1 = 0; } while(0);
  1351  000754  928B               	bcf	3979,1,c	;volatile
  1352  000756                     
  1353                           ;main.c: 113: while(!(PIR1bits.RC1IF));
  1354  000756  AA9E               	btfss	3998,5,c	;volatile
  1355  000758  D7FE               	goto	l224
  1356                           
  1357                           ;main.c: 114: (void) EUSART1_Read();
  1358  00075A  EC81  F005         	call	_EUSART1_Read	;wreg free
  1359                           
  1360                           ;main.c: 115: (INTCONbits.GIE = 1);
  1361  00075E  8EF2               	bsf	intcon,7,c	;volatile
  1362                           
  1363                           ;main.c: 117: break;
  1364  000760  D75A               	goto	l205
  1365  000762                     
  1366                           ;main.c: 123: printf("k.\r\n");
  1367  000762  0EF4               	movlw	low STR_22
  1368  000764  0100               	movlb	0	; () banked
  1369  000766  6F68               	movwf	printf@f& (0+255),b
  1370  000768  0EFF               	movlw	high STR_22
  1371  00076A  6F69               	movwf	(printf@f+1)& (0+255),b
  1372  00076C  EC3F  F000         	call	_printf	;wreg free
  1373                           
  1374                           ;main.c: 124: break;
  1375  000770  D752               	goto	l205
  1376  000772                     
  1377                           ;main.c: 130: for (i=0; i<40; i++) printf("\r\n");
  1378  000772  0E00               	movlw	0
  1379  000774  0100               	movlb	0	; () banked
  1380  000776  6F7F               	movwf	main@i& (0+255),b
  1381  000778                     l2313:
  1382                           
  1383                           ; BSR set to: 0
  1384  000778  0E27               	movlw	39
  1385  00077A  657F               	cpfsgt	main@i& (0+255),b
  1386  00077C  D001               	goto	l230
  1387  00077E  D009               	goto	u1710
  1388  000780                     l230:
  1389                           
  1390                           ; BSR set to: 0
  1391                           
  1392                           ; BSR set to: 0
  1393  000780  0EAE               	movlw	low (STR_5+30)
  1394  000782  6F68               	movwf	printf@f& (0+255),b
  1395  000784  0EFE               	movlw	high (STR_5+30)
  1396  000786  6F69               	movwf	(printf@f+1)& (0+255),b
  1397  000788  EC3F  F000         	call	_printf	;wreg free
  1398  00078C  0100               	movlb	0	; () banked
  1399  00078E  2B7F               	incf	main@i& (0+255),f,b
  1400  000790  D7F3               	goto	l2313
  1401  000792                     u1710:
  1402                           
  1403                           ; BSR set to: 0
  1404  000792  00FF               	reset		;# 
  1405                           
  1406                           ;main.c: 132: break;
  1407  000794  D740               	goto	l205
  1408  000796                     
  1409                           ;main.c: 138: for (i=0; i<40; i++) printf("\r\n");
  1410  000796  0E00               	movlw	0
  1411  000798  0100               	movlb	0	; () banked
  1412  00079A  6F7F               	movwf	main@i& (0+255),b
  1413  00079C                     l2325:
  1414                           
  1415                           ; BSR set to: 0
  1416  00079C  0E27               	movlw	39
  1417  00079E  657F               	cpfsgt	main@i& (0+255),b
  1418  0007A0  D001               	goto	l233
  1419  0007A2  D739               	goto	l205
  1420  0007A4                     l233:
  1421                           
  1422                           ; BSR set to: 0
  1423                           
  1424                           ; BSR set to: 0
  1425  0007A4  0EAE               	movlw	low (STR_5+30)
  1426  0007A6  6F68               	movwf	printf@f& (0+255),b
  1427  0007A8  0EFE               	movlw	high (STR_5+30)
  1428  0007AA  6F69               	movwf	(printf@f+1)& (0+255),b
  1429  0007AC  EC3F  F000         	call	_printf	;wreg free
  1430  0007B0  0100               	movlb	0	; () banked
  1431  0007B2  2B7F               	incf	main@i& (0+255),f,b
  1432  0007B4  D7F3               	goto	l2325
  1433  0007B6                     
  1434                           ; BSR set to: 0
  1435                           ;main.c: 145: printf("Unknown key %c\r\n",cmd);
  1436                           
  1437                           ; BSR set to: 0
  1438  0007B6  0ECD               	movlw	low STR_25
  1439  0007B8  6F68               	movwf	printf@f& (0+255),b
  1440  0007BA  0EFF               	movlw	high STR_25
  1441  0007BC  6F69               	movwf	(printf@f+1)& (0+255),b
  1442  0007BE  C07E  F06A         	movff	main@cmd,?_printf+2
  1443  0007C2  6B6B               	clrf	(?_printf+3)& (0+255),b
  1444  0007C4  EC3F  F000         	call	_printf	;wreg free
  1445                           
  1446                           ;main.c: 147: }
  1447                           
  1448                           ;main.c: 146: break;
  1449  0007C8  D726               	goto	l205
  1450  0007CA                     l207:
  1451  0007CA  0100               	movlb	0	; () banked
  1452  0007CC  517E               	movf	main@cmd& (0+255),w,b
  1453                           
  1454                           ; Switch size 1, requested type "space"
  1455                           ; Number of cases is 10, Range of values is 63 to 122
  1456                           ; switch strategies available:
  1457                           ; Name         Instructions Cycles
  1458                           ; simple_byte           31    16 (average)
  1459                           ;	Chosen strategy is simple_byte
  1460  0007CE  0A3F               	xorlw	63	; case 63
  1461  0007D0  B4D8               	btfsc	status,2,c
  1462  0007D2  D728               	goto	l208
  1463  0007D4  0A7D               	xorlw	125	; case 66
  1464  0007D6  B4D8               	btfsc	status,2,c
  1465  0007D8  D79C               	goto	l213
  1466  0007DA  0A0C               	xorlw	12	; case 78
  1467  0007DC  B4D8               	btfsc	status,2,c
  1468  0007DE  D785               	goto	l211
  1469  0007E0  0A14               	xorlw	20	; case 90
  1470  0007E2  B4D8               	btfsc	status,2,c
  1471  0007E4  D7C6               	goto	l229
  1472  0007E6  0A38               	xorlw	56	; case 98
  1473  0007E8  B4D8               	btfsc	status,2,c
  1474  0007EA  D793               	goto	l213
  1475  0007EC  0A0B               	xorlw	11	; case 105
  1476  0007EE  B4D8               	btfsc	status,2,c
  1477  0007F0  D786               	goto	l212
  1478  0007F2  0A07               	xorlw	7	; case 110
  1479  0007F4  B4D8               	btfsc	status,2,c
  1480  0007F6  D770               	goto	l210
  1481  0007F8  0A01               	xorlw	1	; case 111
  1482  0007FA  B4D8               	btfsc	status,2,c
  1483  0007FC  D7B2               	goto	l228
  1484  0007FE  0A1B               	xorlw	27	; case 116
  1485  000800  B4D8               	btfsc	status,2,c
  1486  000802  D795               	goto	l217
  1487  000804  0A0E               	xorlw	14	; case 122
  1488  000806  B4D8               	btfsc	status,2,c
  1489  000808  D7C6               	goto	l232
  1490  00080A  D7D5               	goto	l235
  1491  00080C                     __end_of_main:
  1492                           	opt stack 0
  1493                           tblptru	equ	0xFF8
  1494                           tblptrh	equ	0xFF7
  1495                           tblptrl	equ	0xFF6
  1496                           tablat	equ	0xFF5
  1497                           intcon	equ	0xFF2
  1498                           postinc0	equ	0xFEE
  1499                           wreg	equ	0xFE8
  1500                           postdec1	equ	0xFE5
  1501                           fsr1l	equ	0xFE1
  1502                           status	equ	0xFD8
  1503                           
  1504 ;; *************** function _printf *****************
  1505 ;; Defined at:
  1506 ;;		line 472 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;  f               2    8[BANK0 ] PTR const unsigned char 
  1509 ;;		 -> STR_26(14), STR_25(17), STR_24(3), STR_23(3), 
  1510 ;;		 -> STR_22(5), STR_21(14), STR_20(81), STR_19(21), 
  1511 ;;		 -> STR_18(21), STR_17(22), STR_16(33), STR_15(31), 
  1512 ;;		 -> STR_14(39), STR_13(29), STR_12(32), STR_11(24), 
  1513 ;;		 -> STR_10(21), STR_9(7), STR_8(15), STR_7(33), 
  1514 ;;		 -> STR_6(24), STR_5(33), STR_4(5), STR_3(45), 
  1515 ;;		 -> STR_2(22), STR_1(20), 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  idx             1   16[BANK0 ] unsigned char 
  1518 ;;  tmpval          4    0        struct .
  1519 ;;  width           2   27[BANK0 ] int 
  1520 ;;  len             2   25[BANK0 ] unsigned int 
  1521 ;;  ap              2   23[BANK0 ] PTR void [1]
  1522 ;;		 -> ?_printf(2), 
  1523 ;;  val             2   20[BANK0 ] unsigned int 
  1524 ;;  cp              2   17[BANK0 ] PTR const unsigned char 
  1525 ;;		 -> printf@c(1), 
  1526 ;;  c               1   29[BANK0 ] unsigned char 
  1527 ;;  prec            1   22[BANK0 ] char 
  1528 ;;  flag            1   19[BANK0 ] unsigned char 
  1529 ;; Return value:  Size  Location     Type
  1530 ;;                  2    8[BANK0 ] int 
  1531 ;; Registers used:
  1532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1538 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1539 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1540 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1541 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;Total ram usage:       22 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; Hardware stack levels required when called:    8
  1545 ;; This function calls:
  1546 ;;		___lwdiv
  1547 ;;		___wmul
  1548 ;;		_isdigit
  1549 ;;		_putch
  1550 ;; This function is called by:
  1551 ;;		_main
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           	psect	text1
  1556  00007E                     __ptext1:
  1557                           	opt stack 0
  1558  00007E                     _printf:
  1559                           	opt stack 22
  1560                           
  1561                           ;doprnt.c: 474: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          16: signed char prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c
      +                          : 536: unsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c:
      +                           540: unsigned int val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;dop
      +                          rnt.c: 545: *ap = __va_start();
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;incstack = 0
  1565  00007E  0E6A               	movlw	low (?_printf+2)
  1566  000080  0100               	movlb	0	; () banked
  1567  000082  6F77               	movwf	printf@ap& (0+255),b
  1568  000084  0E00               	movlw	high (?_printf+2)
  1569  000086  6F78               	movwf	(printf@ap+1)& (0+255),b
  1570                           
  1571                           ;doprnt.c: 548: while((c = *f++)) {
  1572  000088  D149               	goto	u1630
  1573  00008A                     
  1574                           ; BSR set to: 0
  1575                           ;doprnt.c: 550: if(c != '%')
  1576                           
  1577                           ; BSR set to: 0
  1578  00008A  0E25               	movlw	37
  1579  00008C  197D               	xorwf	printf@c& (0+255),w,b
  1580  00008E  B4D8               	btfsc	status,2,c
  1581  000090  D004               	goto	l269
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;doprnt.c: 552: {;doprnt.c: 553: (putch(c) );
  1585  000092  517D               	movf	printf@c& (0+255),w,b
  1586  000094  EC89  F005         	call	_putch
  1587                           
  1588                           ;doprnt.c: 554: continue;
  1589  000098  D141               	goto	u1630
  1590  00009A                     l269:
  1591                           
  1592                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  1593  00009A  0E00               	movlw	0
  1594  00009C  0100               	movlb	0	; () banked
  1595  00009E  6F7C               	movwf	(printf@width+1)& (0+255),b
  1596  0000A0  0E00               	movlw	0
  1597  0000A2  6F7B               	movwf	printf@width& (0+255),b
  1598                           
  1599                           ;doprnt.c: 560: flag = 0;
  1600  0000A4  0E00               	movlw	0
  1601  0000A6  6F73               	movwf	printf@flag& (0+255),b
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;doprnt.c: 563: switch(*f) {
  1605                           
  1606                           ;doprnt.c: 562: for(;;) {
  1607  0000A8  D004               	goto	l271
  1608  0000AA                     
  1609                           ;doprnt.c: 592: flag |= 0x04;
  1610                           
  1611                           ; BSR set to: 0
  1612  0000AA  0100               	movlb	0	; () banked
  1613  0000AC  8573               	bsf	printf@flag& (0+255),2,b
  1614                           
  1615                           ;doprnt.c: 593: f++;
  1616  0000AE  4B68               	infsnz	printf@f& (0+255),f,b
  1617  0000B0  2B69               	incf	(printf@f+1)& (0+255),f,b
  1618  0000B2                     l271:
  1619                           
  1620                           ; BSR set to: 0
  1621  0000B2  C068  FFF6         	movff	printf@f,tblptrl
  1622  0000B6  C069  FFF7         	movff	printf@f+1,tblptrh
  1623  0000BA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1624  0000BA  6AF8               	clrf	tblptru,c
  1625  0000BC                     	endif
  1626  0000BC                     	if	0	;tblptru may be non-zero
  1627  0000BC                     	endif
  1628  0000BC  0008               	tblrd		*
  1629  0000BE  50F5               	movf	tablat,w,c
  1630                           
  1631                           ; Switch size 1, requested type "space"
  1632                           ; Number of cases is 1, Range of values is 48 to 48
  1633                           ; switch strategies available:
  1634                           ; Name         Instructions Cycles
  1635                           ; simple_byte            4     3 (average)
  1636                           ;	Chosen strategy is simple_byte
  1637  0000C0  0A30               	xorlw	48	; case 48
  1638  0000C2  B4D8               	btfsc	status,2,c
  1639  0000C4  D7F2               	goto	l272
  1640                           
  1641                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  1642                           
  1643                           ;doprnt.c: 598: }
  1644                           
  1645                           ;doprnt.c: 597: break;
  1646  0000C6  C068  FFF6         	movff	printf@f,tblptrl
  1647  0000CA  C069  FFF7         	movff	printf@f+1,tblptrh
  1648  0000CE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1649  0000CE  6AF8               	clrf	tblptru,c
  1650  0000D0                     	endif
  1651  0000D0                     	if	0	;tblptru may be non-zero
  1652  0000D0                     	endif
  1653  0000D0  0008               	tblrd		*
  1654  0000D2  50F5               	movf	tablat,w,c
  1655  0000D4  EC24  F005         	call	_isdigit
  1656  0000D8  A0D8               	btfss	status,0,c
  1657  0000DA  D07C               	goto	l279
  1658                           
  1659                           ;doprnt.c: 610: width = 0;
  1660  0000DC  0E00               	movlw	0
  1661  0000DE  0100               	movlb	0	; () banked
  1662  0000E0  6F7C               	movwf	(printf@width+1)& (0+255),b
  1663  0000E2  0E00               	movlw	0
  1664  0000E4  6F7B               	movwf	printf@width& (0+255),b
  1665  0000E6                     
  1666                           ;doprnt.c: 612: width *= 10;
  1667                           
  1668                           ; BSR set to: 0
  1669  0000E6  C07B  F060         	movff	printf@width,___wmul@multiplier
  1670  0000EA  C07C  F061         	movff	printf@width+1,___wmul@multiplier+1
  1671  0000EE  0E00               	movlw	0
  1672  0000F0  0100               	movlb	0	; () banked
  1673  0000F2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1674  0000F4  0E0A               	movlw	10
  1675  0000F6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1676  0000F8  ECE9  F004         	call	___wmul	;wreg free
  1677  0000FC  C060  F07B         	movff	?___wmul,printf@width
  1678  000100  C061  F07C         	movff	?___wmul+1,printf@width+1
  1679                           
  1680                           ;doprnt.c: 613: width += *f++ - '0';
  1681  000104  0ED0               	movlw	208
  1682  000106  0100               	movlb	0	; () banked
  1683  000108  6F6C               	movwf	??_printf& (0+255),b
  1684  00010A  0EFF               	movlw	255
  1685  00010C  6F6D               	movwf	(??_printf+1)& (0+255),b
  1686  00010E  C068  FFF6         	movff	printf@f,tblptrl
  1687  000112  C069  FFF7         	movff	printf@f+1,tblptrh
  1688  000116                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1689  000116  6AF8               	clrf	tblptru,c
  1690  000118                     	endif
  1691  000118                     	if	0	;tblptru may be non-zero
  1692  000118                     	endif
  1693  000118  0008               	tblrd		*
  1694  00011A  50F5               	movf	tablat,w,c
  1695  00011C  6F6E               	movwf	(??_printf+2)& (0+255),b
  1696  00011E  6B6F               	clrf	(??_printf+3)& (0+255),b
  1697  000120  516C               	movf	??_printf& (0+255),w,b
  1698  000122  276E               	addwf	(??_printf+2)& (0+255),f,b
  1699  000124  516D               	movf	(??_printf+1)& (0+255),w,b
  1700  000126  236F               	addwfc	(??_printf+3)& (0+255),f,b
  1701  000128  516E               	movf	(??_printf+2)& (0+255),w,b
  1702  00012A  277B               	addwf	printf@width& (0+255),f,b
  1703  00012C  516F               	movf	(??_printf+3)& (0+255),w,b
  1704  00012E  237C               	addwfc	(printf@width+1)& (0+255),f,b
  1705                           
  1706                           ; BSR set to: 0
  1707  000130  4B68               	infsnz	printf@f& (0+255),f,b
  1708  000132  2B69               	incf	(printf@f+1)& (0+255),f,b
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  1712  000134  C068  FFF6         	movff	printf@f,tblptrl
  1713  000138  C069  FFF7         	movff	printf@f+1,tblptrh
  1714  00013C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1715  00013C  6AF8               	clrf	tblptru,c
  1716  00013E                     	endif
  1717  00013E                     	if	0	;tblptru may be non-zero
  1718  00013E                     	endif
  1719  00013E  0008               	tblrd		*
  1720  000140  50F5               	movf	tablat,w,c
  1721  000142  EC24  F005         	call	_isdigit
  1722  000146  A0D8               	btfss	status,0,c
  1723  000148  D045               	goto	l279
  1724  00014A  D7CD               	goto	l277
  1725  00014C                     
  1726                           ;doprnt.c: 776: if(width > len)
  1727  00014C  0100               	movlb	0	; () banked
  1728  00014E  517B               	movf	printf@width& (0+255),w,b
  1729  000150  5D79               	subwf	printf@len& (0+255),w,b
  1730  000152  517C               	movf	(printf@width+1)& (0+255),w,b
  1731  000154  597A               	subwfb	(printf@len+1)& (0+255),w,b
  1732  000156  B0D8               	btfsc	status,0,c
  1733  000158  D005               	goto	l285
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;doprnt.c: 777: width -= len;
  1737  00015A  5179               	movf	printf@len& (0+255),w,b
  1738  00015C  5F7B               	subwf	printf@width& (0+255),f,b
  1739  00015E  517A               	movf	(printf@len+1)& (0+255),w,b
  1740  000160  5B7C               	subwfb	(printf@width+1)& (0+255),f,b
  1741  000162  D008               	goto	l287
  1742  000164                     l285:
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;doprnt.c: 778: else;doprnt.c: 779: width = 0;
  1746                           
  1747                           ; BSR set to: 0
  1748  000164  0E00               	movlw	0
  1749  000166  6F7C               	movwf	(printf@width+1)& (0+255),b
  1750  000168  0E00               	movlw	0
  1751  00016A  6F7B               	movwf	printf@width& (0+255),b
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;doprnt.c: 783: while(width--)
  1755  00016C  D003               	goto	l287
  1756  00016E                     l2181:
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;doprnt.c: 784: (putch(' ') );
  1760  00016E  0E20               	movlw	32
  1761  000170  EC89  F005         	call	_putch
  1762  000174                     l287:
  1763  000174  0100               	movlb	0	; () banked
  1764  000176  077B               	decf	printf@width& (0+255),f,b
  1765  000178  A0D8               	btfss	status,0,c
  1766  00017A  077C               	decf	(printf@width+1)& (0+255),f,b
  1767  00017C  297B               	incf	printf@width& (0+255),w,b
  1768  00017E  E1F7               	bnz	l2181
  1769  000180  297C               	incf	(printf@width+1)& (0+255),w,b
  1770  000182  B4D8               	btfsc	status,2,c
  1771  000184  D00B               	goto	l290
  1772  000186  D7F3               	goto	l288
  1773  000188                     l2185:
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;doprnt.c: 787: (putch(*cp++) );
  1777  000188  C071  FFD9         	movff	printf@cp,fsr2l
  1778  00018C  C072  FFDA         	movff	printf@cp+1,fsr2h
  1779  000190  50DF               	movf	indf2,w,c
  1780  000192  EC89  F005         	call	_putch
  1781  000196  0100               	movlb	0	; () banked
  1782  000198  4B71               	infsnz	printf@cp& (0+255),f,b
  1783  00019A  2B72               	incf	(printf@cp+1)& (0+255),f,b
  1784  00019C                     l290:
  1785                           
  1786                           ; BSR set to: 0
  1787                           
  1788                           ; BSR set to: 0
  1789  00019C  0779               	decf	printf@len& (0+255),f,b
  1790  00019E  A0D8               	btfss	status,0,c
  1791  0001A0  077A               	decf	(printf@len+1)& (0+255),f,b
  1792  0001A2  2979               	incf	printf@len& (0+255),w,b
  1793  0001A4  E1F1               	bnz	l2185
  1794  0001A6  297A               	incf	(printf@len+1)& (0+255),w,b
  1795  0001A8  B4D8               	btfsc	status,2,c
  1796  0001AA  D0B8               	goto	u1630
  1797  0001AC  D7ED               	goto	l291
  1798  0001AE                     
  1799                           ; BSR set to: 0
  1800                           ;doprnt.c: 818: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  1801                           
  1802                           ; BSR set to: 0
  1803  0001AE  C077  FFD9         	movff	printf@ap,fsr2l
  1804  0001B2  C078  FFDA         	movff	printf@ap+1,fsr2h
  1805  0001B6  50DF               	movf	indf2,w,c
  1806  0001B8  6F7D               	movwf	printf@c& (0+255),b
  1807                           
  1808                           ; BSR set to: 0
  1809  0001BA  0E02               	movlw	2
  1810  0001BC  2777               	addwf	printf@ap& (0+255),f,b
  1811  0001BE  0E00               	movlw	0
  1812  0001C0  2378               	addwfc	(printf@ap+1)& (0+255),f,b
  1813  0001C2                     
  1814                           ; BSR set to: 0
  1815                           ;doprnt.c: 824: cp = (char *)&c;
  1816                           
  1817                           ; BSR set to: 0
  1818  0001C2  0E7D               	movlw	low printf@c
  1819  0001C4  6F71               	movwf	printf@cp& (0+255),b
  1820  0001C6  0E00               	movlw	high printf@c
  1821  0001C8  6F72               	movwf	(printf@cp+1)& (0+255),b
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;doprnt.c: 825: len = 1;
  1825  0001CA  0E00               	movlw	0
  1826  0001CC  6F7A               	movwf	(printf@len+1)& (0+255),b
  1827  0001CE  0E01               	movlw	1
  1828  0001D0  6F79               	movwf	printf@len& (0+255),b
  1829                           
  1830                           ;doprnt.c: 826: goto dostring;
  1831  0001D2  D7BC               	goto	l284
  1832  0001D4                     l279:
  1833                           
  1834                           ; BSR set to: 0
  1835  0001D4  C068  FFF6         	movff	printf@f,tblptrl
  1836  0001D8  C069  FFF7         	movff	printf@f+1,tblptrh
  1837  0001DC  0100               	movlb	0	; () banked
  1838  0001DE  4B68               	infsnz	printf@f& (0+255),f,b
  1839  0001E0  2B69               	incf	(printf@f+1)& (0+255),f,b
  1840  0001E2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1841  0001E2  6AF8               	clrf	tblptru,c
  1842  0001E4                     	endif
  1843  0001E4                     	if	0	;tblptru may be non-zero
  1844  0001E4                     	endif
  1845  0001E4  0008               	tblrd		*
  1846  0001E6  CFF5 F07D          	movff	tablat,printf@c
  1847  0001EA  517D               	movf	printf@c& (0+255),w,b
  1848                           
  1849                           ; Switch size 1, requested type "space"
  1850                           ; Number of cases is 3, Range of values is 0 to 120
  1851                           ; switch strategies available:
  1852                           ; Name         Instructions Cycles
  1853                           ; simple_byte           10     6 (average)
  1854                           ;	Chosen strategy is simple_byte
  1855  0001EC  0A00               	xorlw	0	; case 0
  1856  0001EE  B4D8               	btfsc	status,2,c
  1857  0001F0  0012               	return	
  1858  0001F2  0A63               	xorlw	99	; case 99
  1859  0001F4  B4D8               	btfsc	status,2,c
  1860  0001F6  D7DB               	goto	l293
  1861  0001F8  0A1B               	xorlw	27	; case 120
  1862  0001FA  A4D8               	btfss	status,2,c
  1863  0001FC  D7E2               	goto	l294
  1864                           
  1865                           ;doprnt.c: 1292: {;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (uns
      +                          igned)0));
  1866                           
  1867                           ; BSR set to: 0
  1868  0001FE  C077  FFD9         	movff	printf@ap,fsr2l
  1869  000202  C078  FFDA         	movff	printf@ap+1,fsr2h
  1870  000206  CFDE F074          	movff	postinc2,printf@val
  1871  00020A  CFDD F075          	movff	postdec2,printf@val+1
  1872  00020E  0E02               	movlw	2
  1873  000210  0100               	movlb	0	; () banked
  1874  000212  2777               	addwf	printf@ap& (0+255),f,b
  1875  000214  0E00               	movlw	0
  1876  000216  2378               	addwfc	(printf@ap+1)& (0+255),f,b
  1877                           
  1878                           ; BSR set to: 0
  1879                           ;doprnt.c: 1306: };doprnt.c: 1335: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0]
      +                           ; c++)
  1880  000218  0E01               	movlw	1
  1881  00021A  6F7D               	movwf	printf@c& (0+255),b
  1882  00021C                     l2209:
  1883                           
  1884                           ; BSR set to: 0
  1885  00021C  0E04               	movlw	4
  1886  00021E  197D               	xorwf	printf@c& (0+255),w,b
  1887  000220  B4D8               	btfsc	status,2,c
  1888  000222  D015               	goto	u1560
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;doprnt.c: 1336: if(val < hexpowers[c])
  1892                           
  1893                           ; BSR set to: 0
  1894                           
  1895                           ; BSR set to: 0
  1896  000224  517D               	movf	printf@c& (0+255),w,b
  1897  000226  0D02               	mullw	2
  1898  000228  0EE3               	movlw	low _hexpowers
  1899  00022A  24F3               	addwf	prodl,w,c
  1900  00022C  6EF6               	movwf	tblptrl,c
  1901  00022E  0EFD               	movlw	high _hexpowers
  1902  000230  20F4               	addwfc	prodh,w,c
  1903  000232  6EF7               	movwf	tblptrh,c
  1904  000234                     	if	1	;There are 3 active tblptr bytes
  1905  000234  6AF8               	clrf	tblptru,c
  1906  000236  0E00               	movlw	low (__mediumconst shr (0+16))
  1907  000238  22F8               	addwfc	tblptru,f,c
  1908  00023A                     	endif
  1909  00023A  0009               	tblrd		*+
  1910  00023C  50F5               	movf	tablat,w,c
  1911  00023E  5D74               	subwf	printf@val& (0+255),w,b
  1912  000240  0009               	tblrd		*+
  1913  000242  50F5               	movf	tablat,w,c
  1914  000244  5975               	subwfb	(printf@val+1)& (0+255),w,b
  1915  000246  A0D8               	btfss	status,0,c
  1916  000248  D002               	goto	u1560
  1917                           
  1918                           ; BSR set to: 0
  1919                           
  1920                           ; BSR set to: 0
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;doprnt.c: 1337: break;
  1924  00024A  2B7D               	incf	printf@c& (0+255),f,b
  1925  00024C  D7E7               	goto	l2209
  1926  00024E                     u1560:
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;doprnt.c: 1400: if(width > c)
  1930                           
  1931                           ; BSR set to: 0
  1932  00024E  517D               	movf	printf@c& (0+255),w,b
  1933  000250  6F6C               	movwf	??_printf& (0+255),b
  1934  000252  6B6D               	clrf	(??_printf+1)& (0+255),b
  1935  000254  517B               	movf	printf@width& (0+255),w,b
  1936  000256  5D6C               	subwf	??_printf& (0+255),w,b
  1937  000258  516D               	movf	(??_printf+1)& (0+255),w,b
  1938  00025A  0A80               	xorlw	128
  1939  00025C  6F6E               	movwf	(??_printf+2)& (0+255),b
  1940  00025E  517C               	movf	(printf@width+1)& (0+255),w,b
  1941  000260  0A80               	xorlw	128
  1942  000262  596E               	subwfb	(??_printf+2)& (0+255),w,b
  1943  000264  B0D8               	btfsc	status,0,c
  1944  000266  D005               	goto	l298
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;doprnt.c: 1401: width -= c;
  1948  000268  517D               	movf	printf@c& (0+255),w,b
  1949  00026A  5F7B               	subwf	printf@width& (0+255),f,b
  1950  00026C  0E00               	movlw	0
  1951  00026E  5B7C               	subwfb	(printf@width+1)& (0+255),f,b
  1952  000270  D004               	goto	l299
  1953  000272                     l298:
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  1957                           
  1958                           ; BSR set to: 0
  1959  000272  0E00               	movlw	0
  1960  000274  6F7C               	movwf	(printf@width+1)& (0+255),b
  1961  000276  0E00               	movlw	0
  1962  000278  6F7B               	movwf	printf@width& (0+255),b
  1963  00027A                     l299:
  1964                           
  1965                           ; BSR set to: 0
  1966                           ;doprnt.c: 1406: if(flag & 0x04) {
  1967                           
  1968                           ; BSR set to: 0
  1969  00027A  A573               	btfss	printf@flag& (0+255),2,b
  1970  00027C  D00C               	goto	l300
  1971  00027E                     
  1972                           ; BSR set to: 0
  1973                           ;doprnt.c: 1434: if(width)
  1974  00027E  517B               	movf	printf@width& (0+255),w,b
  1975  000280  117C               	iorwf	(printf@width+1)& (0+255),w,b
  1976  000282  B4D8               	btfsc	status,2,c
  1977  000284  D017               	goto	u1620
  1978                           
  1979                           ; BSR set to: 0
  1980                           ;doprnt.c: 1436: (putch('0') );
  1981                           
  1982                           ; BSR set to: 0
  1983                           
  1984                           ;doprnt.c: 1435: do
  1985  000286  0E30               	movlw	48
  1986  000288  EC89  F005         	call	_putch
  1987                           
  1988                           ;doprnt.c: 1437: while(--width);
  1989  00028C  0100               	movlb	0	; () banked
  1990  00028E  077B               	decf	printf@width& (0+255),f,b
  1991  000290  A0D8               	btfss	status,0,c
  1992  000292  077C               	decf	(printf@width+1)& (0+255),f,b
  1993  000294  D7F4               	goto	L2
  1994  000296                     l300:
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  1998                           
  1999                           ; BSR set to: 0
  2000  000296  517B               	movf	printf@width& (0+255),w,b
  2001  000298  117C               	iorwf	(printf@width+1)& (0+255),w,b
  2002  00029A  B4D8               	btfsc	status,2,c
  2003  00029C  D00B               	goto	u1620
  2004  00029E                     u1610:
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;doprnt.c: 1449: (putch(' ') );
  2008                           
  2009                           ; BSR set to: 0
  2010                           
  2011                           ;doprnt.c: 1448: do
  2012  00029E  0E20               	movlw	32
  2013  0002A0  EC89  F005         	call	_putch
  2014                           
  2015                           ;doprnt.c: 1450: while(--width);
  2016  0002A4  0100               	movlb	0	; () banked
  2017  0002A6  077B               	decf	printf@width& (0+255),f,b
  2018  0002A8  A0D8               	btfss	status,0,c
  2019  0002AA  077C               	decf	(printf@width+1)& (0+255),f,b
  2020  0002AC  517B               	movf	printf@width& (0+255),w,b
  2021  0002AE  117C               	iorwf	(printf@width+1)& (0+255),w,b
  2022  0002B0  A4D8               	btfss	status,2,c
  2023  0002B2  D7F5               	goto	u1610
  2024  0002B4                     u1620:
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  2028                           
  2029                           ; BSR set to: 0
  2030                           
  2031                           ; BSR set to: 0
  2032  0002B4  C07D  F076         	movff	printf@c,printf@prec
  2033                           
  2034                           ;doprnt.c: 1493: while(prec--) {
  2035  0002B8  D02C               	goto	l308
  2036  0002BA                     
  2037                           ; BSR set to: 0
  2038                           ;doprnt.c: 1497: {;doprnt.c: 1518: {;doprnt.c: 1519: unsigned char idx = (val / hexpower
      +                          s[prec]) & 0xF;
  2039                           
  2040                           ; BSR set to: 0
  2041  0002BA  C074  F060         	movff	printf@val,___lwdiv@dividend
  2042  0002BE  C075  F061         	movff	printf@val+1,___lwdiv@dividend+1
  2043  0002C2  5176               	movf	printf@prec& (0+255),w,b
  2044  0002C4  0D02               	mullw	2
  2045  0002C6  0EE3               	movlw	low _hexpowers
  2046  0002C8  24F3               	addwf	prodl,w,c
  2047  0002CA  6EF6               	movwf	tblptrl,c
  2048  0002CC  0EFD               	movlw	high _hexpowers
  2049  0002CE  20F4               	addwfc	prodh,w,c
  2050  0002D0  6EF7               	movwf	tblptrh,c
  2051  0002D2                     	if	1	;There are 3 active tblptr bytes
  2052  0002D2  6AF8               	clrf	tblptru,c
  2053  0002D4  0E00               	movlw	low (__mediumconst shr (0+16))
  2054  0002D6  22F8               	addwfc	tblptru,f,c
  2055  0002D8                     	endif
  2056  0002D8  0009               	tblrd		*+
  2057  0002DA  CFF5 F062          	movff	tablat,___lwdiv@divisor
  2058  0002DE  000A               	tblrd		*-
  2059  0002E0  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  2060  0002E4  EC4D  F004         	call	___lwdiv	;wreg free
  2061  0002E8  0100               	movlb	0	; () banked
  2062  0002EA  5160               	movf	?___lwdiv& (0+255),w,b
  2063  0002EC  0B0F               	andlw	15
  2064  0002EE  6F70               	movwf	printf@idx& (0+255),b
  2065                           
  2066                           ; BSR set to: 0
  2067                           ;doprnt.c: 1525: c = "0123456789abcdef"[idx];
  2068  0002F0  5170               	movf	printf@idx& (0+255),w,b
  2069  0002F2  0D01               	mullw	1
  2070  0002F4  0EBC               	movlw	low STR_27
  2071  0002F6  24F3               	addwf	prodl,w,c
  2072  0002F8  6EF6               	movwf	tblptrl,c
  2073  0002FA  0EFF               	movlw	high STR_27
  2074  0002FC  20F4               	addwfc	prodh,w,c
  2075  0002FE  6EF7               	movwf	tblptrh,c
  2076  000300                     	if	1	;There are 3 active tblptr bytes
  2077  000300  6AF8               	clrf	tblptru,c
  2078  000302  0E00               	movlw	low (__mediumconst shr (0+16))
  2079  000304  22F8               	addwfc	tblptru,f,c
  2080  000306                     	endif
  2081  000306  0008               	tblrd		*
  2082  000308  CFF5 F07D          	movff	tablat,printf@c
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;doprnt.c: 1527: };doprnt.c: 1542: };doprnt.c: 1543: (putch(c) );
  2086  00030C  517D               	movf	printf@c& (0+255),w,b
  2087  00030E  EC89  F005         	call	_putch
  2088  000312                     l308:
  2089  000312  0100               	movlb	0	; () banked
  2090  000314  0776               	decf	printf@prec& (0+255),f,b
  2091  000316  2976               	incf	printf@prec& (0+255),w,b
  2092  000318  A4D8               	btfss	status,2,c
  2093  00031A  D7CF               	goto	l309
  2094  00031C                     u1630:
  2095                           
  2096                           ; BSR set to: 0
  2097                           
  2098                           ; BSR set to: 0
  2099  00031C  C068  FFF6         	movff	printf@f,tblptrl
  2100  000320  C069  FFF7         	movff	printf@f+1,tblptrh
  2101  000324  0100               	movlb	0	; () banked
  2102  000326  4B68               	infsnz	printf@f& (0+255),f,b
  2103  000328  2B69               	incf	(printf@f+1)& (0+255),f,b
  2104  00032A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2105  00032A  6AF8               	clrf	tblptru,c
  2106  00032C                     	endif
  2107  00032C                     	if	0	;tblptru may be non-zero
  2108  00032C                     	endif
  2109  00032C  0008               	tblrd		*
  2110  00032E  CFF5 F07D          	movff	tablat,printf@c
  2111  000332  517D               	movf	printf@c& (0+255),w,b
  2112  000334  B4D8               	btfsc	status,2,c
  2113  000336  0012               	return	
  2114  000338  D6A8               	goto	l268
  2115  00033A                     __end_of_printf:
  2116                           	opt stack 0
  2117                           tblptru	equ	0xFF8
  2118                           tblptrh	equ	0xFF7
  2119                           tblptrl	equ	0xFF6
  2120                           tablat	equ	0xFF5
  2121                           prodh	equ	0xFF4
  2122                           prodl	equ	0xFF3
  2123                           intcon	equ	0xFF2
  2124                           postinc0	equ	0xFEE
  2125                           wreg	equ	0xFE8
  2126                           postdec1	equ	0xFE5
  2127                           fsr1l	equ	0xFE1
  2128                           indf2	equ	0xFDF
  2129                           postinc2	equ	0xFDE
  2130                           postdec2	equ	0xFDD
  2131                           fsr2h	equ	0xFDA
  2132                           fsr2l	equ	0xFD9
  2133                           status	equ	0xFD8
  2134                           
  2135 ;; *************** function _putch *****************
  2136 ;; Defined at:
  2137 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  txData          1    wreg     unsigned char 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  txData          1    1[BANK0 ] unsigned char 
  2142 ;; Return value:  Size  Location     Type
  2143 ;;                  1    wreg      void 
  2144 ;; Registers used:
  2145 ;;		wreg, status,2, cstack
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2154 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2155 ;;Total ram usage:        1 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    7
  2158 ;; This function calls:
  2159 ;;		_EUSART1_Write
  2160 ;; This function is called by:
  2161 ;;		_printf
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text2
  2166  000B12                     __ptext2:
  2167                           	opt stack 0
  2168  000B12                     _putch:
  2169                           	opt stack 22
  2170                           
  2171                           ;incstack = 0
  2172                           ;putch@txData stored from wreg
  2173  000B12  0100               	movlb	0	; () banked
  2174  000B14  6F61               	movwf	putch@txData& (0+255),b
  2175                           
  2176                           ;eusart1.c: 112: EUSART1_Write(txData);
  2177  000B16  0100               	movlb	0	; () banked
  2178  000B18  5161               	movf	putch@txData& (0+255),w,b
  2179  000B1A  EC90  F005         	call	_EUSART1_Write
  2180  000B1E  0012               	return		;funcret
  2181  000B20                     __end_of_putch:
  2182                           	opt stack 0
  2183                           tblptru	equ	0xFF8
  2184                           tblptrh	equ	0xFF7
  2185                           tblptrl	equ	0xFF6
  2186                           tablat	equ	0xFF5
  2187                           prodh	equ	0xFF4
  2188                           prodl	equ	0xFF3
  2189                           intcon	equ	0xFF2
  2190                           postinc0	equ	0xFEE
  2191                           wreg	equ	0xFE8
  2192                           postdec1	equ	0xFE5
  2193                           fsr1l	equ	0xFE1
  2194                           indf2	equ	0xFDF
  2195                           postinc2	equ	0xFDE
  2196                           postdec2	equ	0xFDD
  2197                           fsr2h	equ	0xFDA
  2198                           fsr2l	equ	0xFD9
  2199                           status	equ	0xFD8
  2200                           
  2201 ;; *************** function _EUSART1_Write *****************
  2202 ;; Defined at:
  2203 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;  txData          1    wreg     unsigned char 
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;  txData          1    0[BANK0 ] unsigned char 
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  1    wreg      void 
  2210 ;; Registers used:
  2211 ;;		wreg
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2220 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;Total ram usage:        1 bytes
  2222 ;; Hardware stack levels used:    1
  2223 ;; Hardware stack levels required when called:    6
  2224 ;; This function calls:
  2225 ;;		Nothing
  2226 ;; This function is called by:
  2227 ;;		_putch
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           	psect	text3
  2232  000B20                     __ptext3:
  2233                           	opt stack 0
  2234  000B20                     _EUSART1_Write:
  2235                           	opt stack 22
  2236                           
  2237                           ;incstack = 0
  2238                           ;EUSART1_Write@txData stored from wreg
  2239  000B20  0100               	movlb	0	; () banked
  2240  000B22  6F60               	movwf	EUSART1_Write@txData& (0+255),b
  2241  000B24                     
  2242                           ;eusart1.c: 99: {
  2243                           
  2244                           ;eusart1.c: 98: while(0 == PIR1bits.TX1IF)
  2245  000B24  A89E               	btfss	3998,4,c	;volatile
  2246  000B26  D7FE               	goto	l2073
  2247                           
  2248                           ;eusart1.c: 100: };eusart1.c: 102: TXREG1 = txData;
  2249  000B28  C060  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  2250  000B2C  0012               	return		;funcret
  2251  000B2E                     __end_of_EUSART1_Write:
  2252                           	opt stack 0
  2253                           tblptru	equ	0xFF8
  2254                           tblptrh	equ	0xFF7
  2255                           tblptrl	equ	0xFF6
  2256                           tablat	equ	0xFF5
  2257                           prodh	equ	0xFF4
  2258                           prodl	equ	0xFF3
  2259                           intcon	equ	0xFF2
  2260                           postinc0	equ	0xFEE
  2261                           wreg	equ	0xFE8
  2262                           postdec1	equ	0xFE5
  2263                           fsr1l	equ	0xFE1
  2264                           indf2	equ	0xFDF
  2265                           postinc2	equ	0xFDE
  2266                           postdec2	equ	0xFDD
  2267                           fsr2h	equ	0xFDA
  2268                           fsr2l	equ	0xFD9
  2269                           status	equ	0xFD8
  2270                           
  2271 ;; *************** function _isdigit *****************
  2272 ;; Defined at:
  2273 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  2274 ;; Parameters:    Size  Location     Type
  2275 ;;  c               1    wreg     unsigned char 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;  c               1    2[BANK0 ] unsigned char 
  2278 ;; Return value:  Size  Location     Type
  2279 ;;		None               void
  2280 ;; Registers used:
  2281 ;;		wreg, status,2, status,0
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2288 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;Total ram usage:        3 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    6
  2294 ;; This function calls:
  2295 ;;		Nothing
  2296 ;; This function is called by:
  2297 ;;		_printf
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           	psect	text4
  2302  000A48                     __ptext4:
  2303                           	opt stack 0
  2304  000A48                     _isdigit:
  2305                           	opt stack 23
  2306                           
  2307                           ;incstack = 0
  2308                           ;isdigit@c stored from wreg
  2309  000A48  0100               	movlb	0	; () banked
  2310  000A4A  6F62               	movwf	isdigit@c& (0+255),b
  2311  000A4C  0E00               	movlw	0
  2312  000A4E  0100               	movlb	0	; () banked
  2313  000A50  6F61               	movwf	_isdigit$1289& (0+255),b
  2314                           
  2315                           ; BSR set to: 0
  2316  000A52  0E3A               	movlw	58
  2317  000A54  6162               	cpfslt	isdigit@c& (0+255),b
  2318  000A56  D005               	goto	l978
  2319                           
  2320                           ; BSR set to: 0
  2321  000A58  0E2F               	movlw	47
  2322  000A5A  6562               	cpfsgt	isdigit@c& (0+255),b
  2323  000A5C  D002               	goto	l978
  2324                           
  2325                           ; BSR set to: 0
  2326  000A5E  0E01               	movlw	1
  2327  000A60  6F61               	movwf	_isdigit$1289& (0+255),b
  2328  000A62                     l978:
  2329                           
  2330                           ; BSR set to: 0
  2331                           
  2332                           ; BSR set to: 0
  2333  000A62  C061  F060         	movff	_isdigit$1289,??_isdigit
  2334  000A66  3160               	rrcf	??_isdigit& (0+255),w,b
  2335  000A68  0012               	return	
  2336  000A6A                     __end_of_isdigit:
  2337                           	opt stack 0
  2338                           tblptru	equ	0xFF8
  2339                           tblptrh	equ	0xFF7
  2340                           tblptrl	equ	0xFF6
  2341                           tablat	equ	0xFF5
  2342                           prodh	equ	0xFF4
  2343                           prodl	equ	0xFF3
  2344                           intcon	equ	0xFF2
  2345                           postinc0	equ	0xFEE
  2346                           wreg	equ	0xFE8
  2347                           postdec1	equ	0xFE5
  2348                           fsr1l	equ	0xFE1
  2349                           indf2	equ	0xFDF
  2350                           postinc2	equ	0xFDE
  2351                           postdec2	equ	0xFDD
  2352                           fsr2h	equ	0xFDA
  2353                           fsr2l	equ	0xFD9
  2354                           status	equ	0xFD8
  2355                           
  2356 ;; *************** function ___wmul *****************
  2357 ;; Defined at:
  2358 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2361 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;  product         2    4[BANK0 ] unsigned int 
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  2    0[BANK0 ] unsigned int 
  2366 ;; Registers used:
  2367 ;;		wreg, status,2, status,0, prodl, prodh
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2373 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2374 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2376 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2377 ;;Total ram usage:        6 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; Hardware stack levels required when called:    6
  2380 ;; This function calls:
  2381 ;;		Nothing
  2382 ;; This function is called by:
  2383 ;;		_printf
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           	psect	text5
  2388  0009D2                     __ptext5:
  2389                           	opt stack 0
  2390  0009D2                     ___wmul:
  2391                           	opt stack 23
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;incstack = 0
  2395  0009D2  0100               	movlb	0	; () banked
  2396  0009D4  5160               	movf	___wmul@multiplier& (0+255),w,b
  2397  0009D6  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2398  0009D8  CFF3 F064          	movff	prodl,___wmul@product
  2399  0009DC  CFF4 F065          	movff	prodh,___wmul@product+1
  2400  0009E0  5160               	movf	___wmul@multiplier& (0+255),w,b
  2401  0009E2  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2402  0009E4  50F3               	movf	prodl,w,c
  2403  0009E6  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2404  0009E8  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2405  0009EA  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2406  0009EC  50F3               	movf	prodl,w,c
  2407  0009EE  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2408                           
  2409                           ; BSR set to: 0
  2410  0009F0  C064  F060         	movff	___wmul@product,?___wmul
  2411  0009F4  C065  F061         	movff	___wmul@product+1,?___wmul+1
  2412  0009F8  0012               	return	
  2413  0009FA                     __end_of___wmul:
  2414                           	opt stack 0
  2415                           tblptru	equ	0xFF8
  2416                           tblptrh	equ	0xFF7
  2417                           tblptrl	equ	0xFF6
  2418                           tablat	equ	0xFF5
  2419                           prodh	equ	0xFF4
  2420                           prodl	equ	0xFF3
  2421                           intcon	equ	0xFF2
  2422                           postinc0	equ	0xFEE
  2423                           wreg	equ	0xFE8
  2424                           postdec1	equ	0xFE5
  2425                           fsr1l	equ	0xFE1
  2426                           indf2	equ	0xFDF
  2427                           postinc2	equ	0xFDE
  2428                           postdec2	equ	0xFDD
  2429                           fsr2h	equ	0xFDA
  2430                           fsr2l	equ	0xFD9
  2431                           status	equ	0xFD8
  2432                           
  2433 ;; *************** function ___lwdiv *****************
  2434 ;; Defined at:
  2435 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;  dividend        2    0[BANK0 ] unsigned int 
  2438 ;;  divisor         2    2[BANK0 ] unsigned int 
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;  quotient        2    5[BANK0 ] unsigned int 
  2441 ;;  counter         1    4[BANK0 ] unsigned char 
  2442 ;; Return value:  Size  Location     Type
  2443 ;;                  2    0[BANK0 ] unsigned int 
  2444 ;; Registers used:
  2445 ;;		wreg, status,2, status,0
  2446 ;; Tracked objects:
  2447 ;;		On entry : 0/0
  2448 ;;		On exit  : 0/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2451 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2452 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2454 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2455 ;;Total ram usage:        7 bytes
  2456 ;; Hardware stack levels used:    1
  2457 ;; Hardware stack levels required when called:    6
  2458 ;; This function calls:
  2459 ;;		Nothing
  2460 ;; This function is called by:
  2461 ;;		_printf
  2462 ;; This function uses a non-reentrant model
  2463 ;;
  2464                           
  2465                           	psect	text6
  2466  00089A                     __ptext6:
  2467                           	opt stack 0
  2468  00089A                     ___lwdiv:
  2469                           	opt stack 23
  2470                           
  2471                           ; BSR set to: 0
  2472                           ;incstack = 0
  2473  00089A  0E00               	movlw	0
  2474  00089C  0100               	movlb	0	; () banked
  2475  00089E  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2476  0008A0  0E00               	movlw	0
  2477  0008A2  6F65               	movwf	___lwdiv@quotient& (0+255),b
  2478                           
  2479                           ; BSR set to: 0
  2480  0008A4  5162               	movf	___lwdiv@divisor& (0+255),w,b
  2481  0008A6  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2482  0008A8  B4D8               	btfsc	status,2,c
  2483  0008AA  D01C               	goto	l800
  2484                           
  2485                           ; BSR set to: 0
  2486  0008AC  0E01               	movlw	1
  2487  0008AE  6F64               	movwf	___lwdiv@counter& (0+255),b
  2488  0008B0  D004               	goto	l795
  2489  0008B2                     
  2490                           ; BSR set to: 0
  2491                           
  2492                           ; BSR set to: 0
  2493  0008B2  90D8               	bcf	status,0,c
  2494  0008B4  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  2495  0008B6  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  2496  0008B8  2B64               	incf	___lwdiv@counter& (0+255),f,b
  2497  0008BA                     l795:
  2498                           
  2499                           ; BSR set to: 0
  2500                           
  2501                           ; BSR set to: 0
  2502  0008BA  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  2503  0008BC  D7FA               	goto	l796
  2504  0008BE                     u1440:
  2505                           
  2506                           ; BSR set to: 0
  2507                           
  2508                           ; BSR set to: 0
  2509                           
  2510                           ; BSR set to: 0
  2511  0008BE  90D8               	bcf	status,0,c
  2512  0008C0  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  2513  0008C2  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2514                           
  2515                           ; BSR set to: 0
  2516  0008C4  5162               	movf	___lwdiv@divisor& (0+255),w,b
  2517  0008C6  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  2518  0008C8  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2519  0008CA  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2520  0008CC  A0D8               	btfss	status,0,c
  2521  0008CE  D005               	goto	l799
  2522                           
  2523                           ; BSR set to: 0
  2524  0008D0  5162               	movf	___lwdiv@divisor& (0+255),w,b
  2525  0008D2  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  2526  0008D4  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2527  0008D6  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2528                           
  2529                           ; BSR set to: 0
  2530  0008D8  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  2531  0008DA                     l799:
  2532                           
  2533                           ; BSR set to: 0
  2534                           
  2535                           ; BSR set to: 0
  2536  0008DA  90D8               	bcf	status,0,c
  2537  0008DC  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2538  0008DE  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  2539                           
  2540                           ; BSR set to: 0
  2541  0008E0  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  2542  0008E2  D7ED               	goto	u1440
  2543  0008E4                     l800:
  2544                           
  2545                           ; BSR set to: 0
  2546                           
  2547                           ; BSR set to: 0
  2548  0008E4  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  2549  0008E8  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2550                           
  2551                           ; BSR set to: 0
  2552  0008EC  0012               	return		;funcret
  2553  0008EE                     __end_of___lwdiv:
  2554                           	opt stack 0
  2555                           tblptru	equ	0xFF8
  2556                           tblptrh	equ	0xFF7
  2557                           tblptrl	equ	0xFF6
  2558                           tablat	equ	0xFF5
  2559                           prodh	equ	0xFF4
  2560                           prodl	equ	0xFF3
  2561                           intcon	equ	0xFF2
  2562                           postinc0	equ	0xFEE
  2563                           wreg	equ	0xFE8
  2564                           postdec1	equ	0xFE5
  2565                           fsr1l	equ	0xFE1
  2566                           indf2	equ	0xFDF
  2567                           postinc2	equ	0xFDE
  2568                           postdec2	equ	0xFDD
  2569                           fsr2h	equ	0xFDA
  2570                           fsr2l	equ	0xFD9
  2571                           status	equ	0xFD8
  2572                           
  2573 ;; *************** function _TMR1_ReadTimer *****************
  2574 ;; Defined at:
  2575 ;;		line 106 in file "mcc_generated_files/tmr1.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;		None
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;  readVal         2    4[BANK0 ] unsigned int 
  2580 ;;  readValLow      1    7[BANK0 ] unsigned char 
  2581 ;;  readValHigh     1    6[BANK0 ] unsigned char 
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  2    0[BANK0 ] unsigned int 
  2584 ;; Registers used:
  2585 ;;		wreg, status,2
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2591 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;Total ram usage:        8 bytes
  2596 ;; Hardware stack levels used:    1
  2597 ;; Hardware stack levels required when called:    6
  2598 ;; This function calls:
  2599 ;;		Nothing
  2600 ;; This function is called by:
  2601 ;;		_main
  2602 ;; This function uses a non-reentrant model
  2603 ;;
  2604                           
  2605                           	psect	text7
  2606  000A6A                     __ptext7:
  2607                           	opt stack 0
  2608  000A6A                     _TMR1_ReadTimer:
  2609                           	opt stack 24
  2610                           
  2611                           ;tmr1.c: 108: uint16_t readVal;;tmr1.c: 109: uint8_t readValHigh;;tmr1.c: 110: uint8_t r
      +                          eadValLow;;tmr1.c: 112: readValLow = TMR1L;
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;incstack = 0
  2615  000A6A  CFCE F067          	movff	4046,TMR1_ReadTimer@readValLow	;volatile
  2616                           
  2617                           ;tmr1.c: 113: readValHigh = TMR1H;
  2618  000A6E  CFCF F066          	movff	4047,TMR1_ReadTimer@readValHigh	;volatile
  2619                           
  2620                           ;tmr1.c: 115: readVal = ((uint16_t)readValHigh << 8) | readValLow;
  2621  000A72  0100               	movlb	0	; () banked
  2622  000A74  5166               	movf	TMR1_ReadTimer@readValHigh& (0+255),w,b
  2623  000A76  6F62               	movwf	??_TMR1_ReadTimer& (0+255),b
  2624  000A78  5167               	movf	TMR1_ReadTimer@readValLow& (0+255),w,b
  2625  000A7A  6F64               	movwf	TMR1_ReadTimer@readVal& (0+255),b
  2626  000A7C  C062  F065         	movff	??_TMR1_ReadTimer,TMR1_ReadTimer@readVal+1
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;tmr1.c: 117: return readVal;
  2630  000A80  C064  F060         	movff	TMR1_ReadTimer@readVal,?_TMR1_ReadTimer
  2631  000A84  C065  F061         	movff	TMR1_ReadTimer@readVal+1,?_TMR1_ReadTimer+1
  2632  000A88  0012               	return	
  2633  000A8A                     __end_of_TMR1_ReadTimer:
  2634                           	opt stack 0
  2635                           tblptru	equ	0xFF8
  2636                           tblptrh	equ	0xFF7
  2637                           tblptrl	equ	0xFF6
  2638                           tablat	equ	0xFF5
  2639                           prodh	equ	0xFF4
  2640                           prodl	equ	0xFF3
  2641                           intcon	equ	0xFF2
  2642                           postinc0	equ	0xFEE
  2643                           wreg	equ	0xFE8
  2644                           postdec1	equ	0xFE5
  2645                           fsr1l	equ	0xFE1
  2646                           indf2	equ	0xFDF
  2647                           postinc2	equ	0xFDE
  2648                           postdec2	equ	0xFDD
  2649                           fsr2h	equ	0xFDA
  2650                           fsr2l	equ	0xFD9
  2651                           status	equ	0xFD8
  2652                           
  2653 ;; *************** function _SYSTEM_Initialize *****************
  2654 ;; Defined at:
  2655 ;;		line 111 in file "mcc_generated_files/mcc.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;		None
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;		None
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  1    wreg      void 
  2662 ;; Registers used:
  2663 ;;		wreg, status,2, status,0, cstack
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2673 ;;Total ram usage:        0 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; Hardware stack levels required when called:    8
  2676 ;; This function calls:
  2677 ;;		_EUSART1_Initialize
  2678 ;;		_INTERRUPT_Initialize
  2679 ;;		_OSCILLATOR_Initialize
  2680 ;;		_PIN_MANAGER_Initialize
  2681 ;;		_TMR1_Initialize
  2682 ;; This function is called by:
  2683 ;;		_main
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           	psect	text8
  2688  000AC4                     __ptext8:
  2689                           	opt stack 0
  2690  000AC4                     _SYSTEM_Initialize:
  2691                           	opt stack 22
  2692                           
  2693                           ;mcc.c: 114: INTERRUPT_Initialize();
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;incstack = 0
  2697  000AC4  ECAC  F005         	call	_INTERRUPT_Initialize	;wreg free
  2698                           
  2699                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  2700  000AC8  ECD3  F004         	call	_PIN_MANAGER_Initialize	;wreg free
  2701                           
  2702                           ;mcc.c: 116: OSCILLATOR_Initialize();
  2703  000ACC  EC78  F005         	call	_OSCILLATOR_Initialize	;wreg free
  2704                           
  2705                           ;mcc.c: 117: TMR1_Initialize();
  2706  000AD0  ECBB  F004         	call	_TMR1_Initialize	;wreg free
  2707                           
  2708                           ;mcc.c: 118: EUSART1_Initialize();
  2709  000AD4  EC6D  F005         	call	_EUSART1_Initialize	;wreg free
  2710  000AD8  0012               	return		;funcret
  2711  000ADA                     __end_of_SYSTEM_Initialize:
  2712                           	opt stack 0
  2713                           tblptru	equ	0xFF8
  2714                           tblptrh	equ	0xFF7
  2715                           tblptrl	equ	0xFF6
  2716                           tablat	equ	0xFF5
  2717                           prodh	equ	0xFF4
  2718                           prodl	equ	0xFF3
  2719                           intcon	equ	0xFF2
  2720                           postinc0	equ	0xFEE
  2721                           wreg	equ	0xFE8
  2722                           postdec1	equ	0xFE5
  2723                           fsr1l	equ	0xFE1
  2724                           indf2	equ	0xFDF
  2725                           postinc2	equ	0xFDE
  2726                           postdec2	equ	0xFDD
  2727                           fsr2h	equ	0xFDA
  2728                           fsr2l	equ	0xFD9
  2729                           status	equ	0xFD8
  2730                           
  2731 ;; *************** function _TMR1_Initialize *****************
  2732 ;; Defined at:
  2733 ;;		line 62 in file "mcc_generated_files/tmr1.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;		None
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;		None
  2738 ;; Return value:  Size  Location     Type
  2739 ;;                  1    wreg      void 
  2740 ;; Registers used:
  2741 ;;		wreg, status,2, status,0, cstack
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2751 ;;Total ram usage:        0 bytes
  2752 ;; Hardware stack levels used:    1
  2753 ;; Hardware stack levels required when called:    7
  2754 ;; This function calls:
  2755 ;;		_TMR1_SetInterruptHandler
  2756 ;;		_TMR1_StartTimer
  2757 ;; This function is called by:
  2758 ;;		_SYSTEM_Initialize
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text9
  2763  000976                     __ptext9:
  2764                           	opt stack 0
  2765  000976                     _TMR1_Initialize:
  2766                           	opt stack 22
  2767                           
  2768                           ;tmr1.c: 67: T1CON = 0x00;
  2769                           
  2770                           ;incstack = 0
  2771  000976  0E00               	movlw	0
  2772  000978  6ECD               	movwf	4045,c	;volatile
  2773                           
  2774                           ;tmr1.c: 70: T1GCON = 0x00;
  2775  00097A  0E00               	movlw	0
  2776  00097C  6ECC               	movwf	4044,c	;volatile
  2777                           
  2778                           ;tmr1.c: 73: TMR1H = 0x00;
  2779  00097E  0E00               	movlw	0
  2780  000980  6ECF               	movwf	4047,c	;volatile
  2781                           
  2782                           ;tmr1.c: 76: TMR1L = 0x00;
  2783  000982  0E00               	movlw	0
  2784  000984  6ECE               	movwf	4046,c	;volatile
  2785                           
  2786                           ;tmr1.c: 79: timer1ReloadVal=TMR1;
  2787  000986  CFCE F032          	movff	4046,_timer1ReloadVal	;volatile
  2788  00098A  CFCF F033          	movff	4047,_timer1ReloadVal+1	;volatile
  2789                           
  2790                           ;tmr1.c: 82: PIR1bits.TMR1IF = 0;
  2791  00098E  909E               	bcf	3998,0,c	;volatile
  2792                           
  2793                           ;tmr1.c: 85: PIE1bits.TMR1IE = 1;
  2794  000990  809D               	bsf	3997,0,c	;volatile
  2795                           
  2796                           ;tmr1.c: 88: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  2797  000992  0E0C               	movlw	low _TMR1_DefaultInterruptHandler
  2798  000994  0100               	movlb	0	; () banked
  2799  000996  6F60               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  2800  000998  0E08               	movlw	high _TMR1_DefaultInterruptHandler
  2801  00099A  6F61               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2802  00099C  EC9D  F005         	call	_TMR1_SetInterruptHandler	;wreg free
  2803                           
  2804                           ;tmr1.c: 91: TMR1_StartTimer();
  2805  0009A0  ECAA  F005         	call	_TMR1_StartTimer	;wreg free
  2806  0009A4  0012               	return		;funcret
  2807  0009A6                     __end_of_TMR1_Initialize:
  2808                           	opt stack 0
  2809                           tblptru	equ	0xFF8
  2810                           tblptrh	equ	0xFF7
  2811                           tblptrl	equ	0xFF6
  2812                           tablat	equ	0xFF5
  2813                           prodh	equ	0xFF4
  2814                           prodl	equ	0xFF3
  2815                           intcon	equ	0xFF2
  2816                           postinc0	equ	0xFEE
  2817                           wreg	equ	0xFE8
  2818                           postdec1	equ	0xFE5
  2819                           fsr1l	equ	0xFE1
  2820                           indf2	equ	0xFDF
  2821                           postinc2	equ	0xFDE
  2822                           postdec2	equ	0xFDD
  2823                           fsr2h	equ	0xFDA
  2824                           fsr2l	equ	0xFD9
  2825                           status	equ	0xFD8
  2826                           
  2827 ;; *************** function _TMR1_StartTimer *****************
  2828 ;; Defined at:
  2829 ;;		line 94 in file "mcc_generated_files/tmr1.c"
  2830 ;; Parameters:    Size  Location     Type
  2831 ;;		None
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;		None
  2834 ;; Return value:  Size  Location     Type
  2835 ;;                  1    wreg      void 
  2836 ;; Registers used:
  2837 ;;		None
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2847 ;;Total ram usage:        0 bytes
  2848 ;; Hardware stack levels used:    1
  2849 ;; Hardware stack levels required when called:    6
  2850 ;; This function calls:
  2851 ;;		Nothing
  2852 ;; This function is called by:
  2853 ;;		_TMR1_Initialize
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text10
  2858  000B54                     __ptext10:
  2859                           	opt stack 0
  2860  000B54                     _TMR1_StartTimer:
  2861                           	opt stack 22
  2862                           
  2863                           ;tmr1.c: 97: T1CONbits.TMR1ON = 1;
  2864                           
  2865                           ;incstack = 0
  2866  000B54  80CD               	bsf	4045,0,c	;volatile
  2867  000B56  0012               	return		;funcret
  2868  000B58                     __end_of_TMR1_StartTimer:
  2869                           	opt stack 0
  2870                           tblptru	equ	0xFF8
  2871                           tblptrh	equ	0xFF7
  2872                           tblptrl	equ	0xFF6
  2873                           tablat	equ	0xFF5
  2874                           prodh	equ	0xFF4
  2875                           prodl	equ	0xFF3
  2876                           intcon	equ	0xFF2
  2877                           postinc0	equ	0xFEE
  2878                           wreg	equ	0xFE8
  2879                           postdec1	equ	0xFE5
  2880                           fsr1l	equ	0xFE1
  2881                           indf2	equ	0xFDF
  2882                           postinc2	equ	0xFDE
  2883                           postdec2	equ	0xFDD
  2884                           fsr2h	equ	0xFDA
  2885                           fsr2l	equ	0xFD9
  2886                           status	equ	0xFD8
  2887                           
  2888 ;; *************** function _TMR1_SetInterruptHandler *****************
  2889 ;; Defined at:
  2890 ;;		line 176 in file "mcc_generated_files/tmr1.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  2893 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;		None
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  1    wreg      void 
  2898 ;; Registers used:
  2899 ;;		wreg, status,2, status,0
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2905 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;Total ram usage:        2 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    6
  2912 ;; This function calls:
  2913 ;;		Nothing
  2914 ;; This function is called by:
  2915 ;;		_TMR1_Initialize
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           	psect	text11
  2920  000B3A                     __ptext11:
  2921                           	opt stack 0
  2922  000B3A                     _TMR1_SetInterruptHandler:
  2923                           	opt stack 22
  2924                           
  2925                           ;tmr1.c: 177: TMR1_InterruptHandler = InterruptHandler;
  2926                           
  2927                           ;incstack = 0
  2928  000B3A  C060  F030         	movff	TMR1_SetInterruptHandler@InterruptHandler,_TMR1_InterruptHandler
  2929  000B3E  C061  F031         	movff	TMR1_SetInterruptHandler@InterruptHandler+1,_TMR1_InterruptHandler+1
  2930  000B42  0012               	return		;funcret
  2931  000B44                     __end_of_TMR1_SetInterruptHandler:
  2932                           	opt stack 0
  2933                           tblptru	equ	0xFF8
  2934                           tblptrh	equ	0xFF7
  2935                           tblptrl	equ	0xFF6
  2936                           tablat	equ	0xFF5
  2937                           prodh	equ	0xFF4
  2938                           prodl	equ	0xFF3
  2939                           intcon	equ	0xFF2
  2940                           postinc0	equ	0xFEE
  2941                           wreg	equ	0xFE8
  2942                           postdec1	equ	0xFE5
  2943                           fsr1l	equ	0xFE1
  2944                           indf2	equ	0xFDF
  2945                           postinc2	equ	0xFDE
  2946                           postdec2	equ	0xFDD
  2947                           fsr2h	equ	0xFDA
  2948                           fsr2l	equ	0xFD9
  2949                           status	equ	0xFD8
  2950                           
  2951 ;; *************** function _PIN_MANAGER_Initialize *****************
  2952 ;; Defined at:
  2953 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;		None
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;		None
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  1    wreg      void 
  2960 ;; Registers used:
  2961 ;;		wreg, status,2
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;Total ram usage:        0 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    6
  2974 ;; This function calls:
  2975 ;;		Nothing
  2976 ;; This function is called by:
  2977 ;;		_SYSTEM_Initialize
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           	psect	text12
  2982  0009A6                     __ptext12:
  2983                           	opt stack 0
  2984  0009A6                     _PIN_MANAGER_Initialize:
  2985                           	opt stack 23
  2986                           
  2987                           ;pin_manager.c: 56: LATA = 0x00;
  2988                           
  2989                           ;incstack = 0
  2990  0009A6  0E00               	movlw	0
  2991  0009A8  6E89               	movwf	3977,c	;volatile
  2992                           
  2993                           ;pin_manager.c: 57: LATB = 0x00;
  2994  0009AA  0E00               	movlw	0
  2995  0009AC  6E8A               	movwf	3978,c	;volatile
  2996                           
  2997                           ;pin_manager.c: 58: LATC = 0x00;
  2998  0009AE  0E00               	movlw	0
  2999  0009B0  6E8B               	movwf	3979,c	;volatile
  3000                           
  3001                           ;pin_manager.c: 63: TRISA = 0xFF;
  3002  0009B2  6892               	setf	3986,c	;volatile
  3003                           
  3004                           ;pin_manager.c: 64: TRISB = 0xDF;
  3005  0009B4  0EDF               	movlw	223
  3006  0009B6  6E93               	movwf	3987,c	;volatile
  3007                           
  3008                           ;pin_manager.c: 65: TRISC = 0xBD;
  3009  0009B8  0EBD               	movlw	189
  3010  0009BA  6E94               	movwf	3988,c	;volatile
  3011                           
  3012                           ;pin_manager.c: 70: ANSELC = 0x3C;
  3013  0009BC  0E3C               	movlw	60
  3014  0009BE  010F               	movlb	15	; () banked
  3015  0009C0  6F3A               	movwf	58,b	;volatile
  3016                           
  3017                           ;pin_manager.c: 71: ANSELB = 0x1F;
  3018  0009C2  0E1F               	movlw	31
  3019  0009C4  6F39               	movwf	57,b	;volatile
  3020                           
  3021                           ;pin_manager.c: 72: ANSELA = 0x2F;
  3022  0009C6  0E2F               	movlw	47
  3023  0009C8  6F38               	movwf	56,b	;volatile
  3024                           
  3025                           ;pin_manager.c: 77: WPUB = 0xDF;
  3026  0009CA  0EDF               	movlw	223
  3027  0009CC  6E61               	movwf	3937,c	;volatile
  3028                           
  3029                           ; BSR set to: 15
  3030                           ;pin_manager.c: 78: INTCON2bits.nRBPU = 0;
  3031  0009CE  9EF1               	bcf	intcon2,7,c	;volatile
  3032                           
  3033                           ; BSR set to: 15
  3034  0009D0  0012               	return		;funcret
  3035  0009D2                     __end_of_PIN_MANAGER_Initialize:
  3036                           	opt stack 0
  3037                           tblptru	equ	0xFF8
  3038                           tblptrh	equ	0xFF7
  3039                           tblptrl	equ	0xFF6
  3040                           tablat	equ	0xFF5
  3041                           prodh	equ	0xFF4
  3042                           prodl	equ	0xFF3
  3043                           intcon	equ	0xFF2
  3044                           intcon2	equ	0xFF1
  3045                           postinc0	equ	0xFEE
  3046                           wreg	equ	0xFE8
  3047                           postdec1	equ	0xFE5
  3048                           fsr1l	equ	0xFE1
  3049                           indf2	equ	0xFDF
  3050                           postinc2	equ	0xFDE
  3051                           postdec2	equ	0xFDD
  3052                           fsr2h	equ	0xFDA
  3053                           fsr2l	equ	0xFD9
  3054                           status	equ	0xFD8
  3055                           
  3056 ;; *************** function _OSCILLATOR_Initialize *****************
  3057 ;; Defined at:
  3058 ;;		line 121 in file "mcc_generated_files/mcc.c"
  3059 ;; Parameters:    Size  Location     Type
  3060 ;;		None
  3061 ;; Auto vars:     Size  Location     Type
  3062 ;;		None
  3063 ;; Return value:  Size  Location     Type
  3064 ;;                  1    wreg      void 
  3065 ;; Registers used:
  3066 ;;		wreg, status,2
  3067 ;; Tracked objects:
  3068 ;;		On entry : 0/0
  3069 ;;		On exit  : 0/0
  3070 ;;		Unchanged: 0/0
  3071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3076 ;;Total ram usage:        0 bytes
  3077 ;; Hardware stack levels used:    1
  3078 ;; Hardware stack levels required when called:    6
  3079 ;; This function calls:
  3080 ;;		Nothing
  3081 ;; This function is called by:
  3082 ;;		_SYSTEM_Initialize
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           	psect	text13
  3087  000AF0                     __ptext13:
  3088                           	opt stack 0
  3089  000AF0                     _OSCILLATOR_Initialize:
  3090                           	opt stack 23
  3091                           
  3092                           ;mcc.c: 124: OSCCON = 0x70;
  3093                           
  3094                           ; BSR set to: 15
  3095                           ;incstack = 0
  3096  000AF0  0E70               	movlw	112
  3097  000AF2  6ED3               	movwf	4051,c	;volatile
  3098                           
  3099                           ;mcc.c: 126: OSCCON2 = 0x04;
  3100  000AF4  0E04               	movlw	4
  3101  000AF6  6ED2               	movwf	4050,c	;volatile
  3102                           
  3103                           ;mcc.c: 128: OSCTUNE = 0x40;
  3104  000AF8  0E40               	movlw	64
  3105  000AFA  6E9B               	movwf	3995,c	;volatile
  3106  000AFC                     
  3107                           ;mcc.c: 131: {
  3108  000AFC  BED2               	btfsc	4050,7,c	;volatile
  3109  000AFE  0012               	return	
  3110  000B00  D7FD               	goto	l25
  3111  000B02                     __end_of_OSCILLATOR_Initialize:
  3112                           	opt stack 0
  3113                           tblptru	equ	0xFF8
  3114                           tblptrh	equ	0xFF7
  3115                           tblptrl	equ	0xFF6
  3116                           tablat	equ	0xFF5
  3117                           prodh	equ	0xFF4
  3118                           prodl	equ	0xFF3
  3119                           intcon	equ	0xFF2
  3120                           intcon2	equ	0xFF1
  3121                           postinc0	equ	0xFEE
  3122                           wreg	equ	0xFE8
  3123                           postdec1	equ	0xFE5
  3124                           fsr1l	equ	0xFE1
  3125                           indf2	equ	0xFDF
  3126                           postinc2	equ	0xFDE
  3127                           postdec2	equ	0xFDD
  3128                           fsr2h	equ	0xFDA
  3129                           fsr2l	equ	0xFD9
  3130                           status	equ	0xFD8
  3131                           
  3132 ;; *************** function _INTERRUPT_Initialize *****************
  3133 ;; Defined at:
  3134 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  3135 ;; Parameters:    Size  Location     Type
  3136 ;;		None
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;		None
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      void 
  3141 ;; Registers used:
  3142 ;;		None
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;Total ram usage:        0 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    6
  3155 ;; This function calls:
  3156 ;;		Nothing
  3157 ;; This function is called by:
  3158 ;;		_SYSTEM_Initialize
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text14
  3163  000B58                     __ptext14:
  3164                           	opt stack 0
  3165  000B58                     _INTERRUPT_Initialize:
  3166                           	opt stack 23
  3167                           
  3168                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  3169                           
  3170                           ;incstack = 0
  3171  000B58  9ED0               	bcf	4048,7,c	;volatile
  3172  000B5A  0012               	return		;funcret
  3173  000B5C                     __end_of_INTERRUPT_Initialize:
  3174                           	opt stack 0
  3175                           tblptru	equ	0xFF8
  3176                           tblptrh	equ	0xFF7
  3177                           tblptrl	equ	0xFF6
  3178                           tablat	equ	0xFF5
  3179                           prodh	equ	0xFF4
  3180                           prodl	equ	0xFF3
  3181                           intcon	equ	0xFF2
  3182                           intcon2	equ	0xFF1
  3183                           postinc0	equ	0xFEE
  3184                           wreg	equ	0xFE8
  3185                           postdec1	equ	0xFE5
  3186                           fsr1l	equ	0xFE1
  3187                           indf2	equ	0xFDF
  3188                           postinc2	equ	0xFDE
  3189                           postdec2	equ	0xFDD
  3190                           fsr2h	equ	0xFDA
  3191                           fsr2l	equ	0xFD9
  3192                           status	equ	0xFD8
  3193                           
  3194 ;; *************** function _EUSART1_Initialize *****************
  3195 ;; Defined at:
  3196 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;		None
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      void 
  3203 ;; Registers used:
  3204 ;;		wreg, status,2
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3214 ;;Total ram usage:        0 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    6
  3217 ;; This function calls:
  3218 ;;		Nothing
  3219 ;; This function is called by:
  3220 ;;		_SYSTEM_Initialize
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           	psect	text15
  3225  000ADA                     __ptext15:
  3226                           	opt stack 0
  3227  000ADA                     _EUSART1_Initialize:
  3228                           	opt stack 23
  3229                           
  3230                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  3231                           
  3232                           ;incstack = 0
  3233  000ADA  0E08               	movlw	8
  3234  000ADC  6EB8               	movwf	4024,c	;volatile
  3235                           
  3236                           ;eusart1.c: 63: RCSTA1 = 0x90;
  3237  000ADE  0E90               	movlw	144
  3238  000AE0  6EAB               	movwf	4011,c	;volatile
  3239                           
  3240                           ;eusart1.c: 66: TXSTA1 = 0x24;
  3241  000AE2  0E24               	movlw	36
  3242  000AE4  6EAC               	movwf	4012,c	;volatile
  3243                           
  3244                           ;eusart1.c: 69: SPBRG1 = 0x82;
  3245  000AE6  0E82               	movlw	130
  3246  000AE8  6EAF               	movwf	4015,c	;volatile
  3247                           
  3248                           ;eusart1.c: 72: SPBRGH1 = 0x06;
  3249  000AEA  0E06               	movlw	6
  3250  000AEC  6EB0               	movwf	4016,c	;volatile
  3251  000AEE  0012               	return		;funcret
  3252  000AF0                     __end_of_EUSART1_Initialize:
  3253                           	opt stack 0
  3254                           tblptru	equ	0xFF8
  3255                           tblptrh	equ	0xFF7
  3256                           tblptrl	equ	0xFF6
  3257                           tablat	equ	0xFF5
  3258                           prodh	equ	0xFF4
  3259                           prodl	equ	0xFF3
  3260                           intcon	equ	0xFF2
  3261                           intcon2	equ	0xFF1
  3262                           postinc0	equ	0xFEE
  3263                           wreg	equ	0xFE8
  3264                           postdec1	equ	0xFE5
  3265                           fsr1l	equ	0xFE1
  3266                           indf2	equ	0xFDF
  3267                           postinc2	equ	0xFDE
  3268                           postdec2	equ	0xFDD
  3269                           fsr2h	equ	0xFDA
  3270                           fsr2l	equ	0xFD9
  3271                           status	equ	0xFD8
  3272                           
  3273 ;; *************** function _EUSART1_Read *****************
  3274 ;; Defined at:
  3275 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  3276 ;; Parameters:    Size  Location     Type
  3277 ;;		None
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;		None
  3280 ;; Return value:  Size  Location     Type
  3281 ;;                  1    wreg      unsigned char 
  3282 ;; Registers used:
  3283 ;;		wreg, status,2
  3284 ;; Tracked objects:
  3285 ;;		On entry : 0/0
  3286 ;;		On exit  : 0/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;Total ram usage:        0 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:    6
  3296 ;; This function calls:
  3297 ;;		Nothing
  3298 ;; This function is called by:
  3299 ;;		_main
  3300 ;;		_getch
  3301 ;; This function uses a non-reentrant model
  3302 ;;
  3303                           
  3304                           	psect	text16
  3305  000B02                     __ptext16:
  3306                           	opt stack 0
  3307  000B02                     _EUSART1_Read:
  3308                           	opt stack 24
  3309                           
  3310                           ;eusart1.c: 81: {
  3311                           
  3312                           ;eusart1.c: 80: while(!PIR1bits.RC1IF)
  3313                           
  3314                           ;incstack = 0
  3315  000B02  AA9E               	btfss	3998,5,c	;volatile
  3316  000B04  D7FE               	goto	_EUSART1_Read
  3317                           
  3318                           ;eusart1.c: 82: };eusart1.c: 85: if(1 == RCSTA1bits.OERR)
  3319  000B06  A2AB               	btfss	4011,1,c	;volatile
  3320  000B08  D002               	goto	l163
  3321                           
  3322                           ;eusart1.c: 86: {;eusart1.c: 89: RCSTA1bits.SPEN = 0;
  3323  000B0A  9EAB               	bcf	4011,7,c	;volatile
  3324                           
  3325                           ;eusart1.c: 90: RCSTA1bits.SPEN = 1;
  3326  000B0C  8EAB               	bsf	4011,7,c	;volatile
  3327  000B0E                     l163:
  3328                           
  3329                           ;eusart1.c: 91: };eusart1.c: 93: return RCREG1;
  3330  000B0E  50AE               	movf	4014,w,c	;volatile
  3331  000B10  0012               	return	
  3332  000B12                     __end_of_EUSART1_Read:
  3333                           	opt stack 0
  3334                           tblptru	equ	0xFF8
  3335                           tblptrh	equ	0xFF7
  3336                           tblptrl	equ	0xFF6
  3337                           tablat	equ	0xFF5
  3338                           prodh	equ	0xFF4
  3339                           prodl	equ	0xFF3
  3340                           intcon	equ	0xFF2
  3341                           intcon2	equ	0xFF1
  3342                           postinc0	equ	0xFEE
  3343                           wreg	equ	0xFE8
  3344                           postdec1	equ	0xFE5
  3345                           fsr1l	equ	0xFE1
  3346                           indf2	equ	0xFDF
  3347                           postinc2	equ	0xFDE
  3348                           postdec2	equ	0xFDD
  3349                           fsr2h	equ	0xFDA
  3350                           fsr2l	equ	0xFD9
  3351                           status	equ	0xFD8
  3352                           
  3353 ;; *************** function _INTERRUPT_InterruptManager *****************
  3354 ;; Defined at:
  3355 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  3356 ;; Parameters:    Size  Location     Type
  3357 ;;		None
  3358 ;; Auto vars:     Size  Location     Type
  3359 ;;		None
  3360 ;; Return value:  Size  Location     Type
  3361 ;;                  1    wreg      void 
  3362 ;; Registers used:
  3363 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3364 ;; Tracked objects:
  3365 ;;		On entry : 0/0
  3366 ;;		On exit  : 0/0
  3367 ;;		Unchanged: 0/0
  3368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;Total ram usage:       12 bytes
  3374 ;; Hardware stack levels used:    1
  3375 ;; Hardware stack levels required when called:    5
  3376 ;; This function calls:
  3377 ;;		_TMR1_ISR
  3378 ;; This function is called by:
  3379 ;;		Interrupt level 2
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           	psect	intcode
  3384  000008                     __pintcode:
  3385                           	opt stack 0
  3386  000008                     _INTERRUPT_InterruptManager:
  3387                           	opt stack 22
  3388                           
  3389                           ;incstack = 0
  3390  000008  823E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3391  00000A  CFFA F024          	movff	pclath,??_INTERRUPT_InterruptManager
  3392  00000E  CFFB F025          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  3393  000012  CFE1 F026          	movff	fsr1l,??_INTERRUPT_InterruptManager+2
  3394  000016  CFE2 F027          	movff	fsr1h,??_INTERRUPT_InterruptManager+3
  3395  00001A  CFD9 F028          	movff	fsr2l,??_INTERRUPT_InterruptManager+4
  3396  00001E  CFDA F029          	movff	fsr2h,??_INTERRUPT_InterruptManager+5
  3397  000022  CFF3 F02A          	movff	prodl,??_INTERRUPT_InterruptManager+6
  3398  000026  CFF4 F02B          	movff	prodh,??_INTERRUPT_InterruptManager+7
  3399  00002A  CFF6 F02C          	movff	tblptrl,??_INTERRUPT_InterruptManager+8
  3400  00002E  CFF7 F02D          	movff	tblptrh,??_INTERRUPT_InterruptManager+9
  3401  000032  CFF8 F02E          	movff	tblptru,??_INTERRUPT_InterruptManager+10
  3402  000036  CFF5 F02F          	movff	tablat,??_INTERRUPT_InterruptManager+11
  3403                           
  3404                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bits.TM
      +                          R1IF == 1)
  3405  00003A  BCF2               	btfsc	intcon,6,c	;volatile
  3406  00003C  A09D               	btfss	3997,0,c	;volatile
  3407  00003E  D003               	goto	i2l134
  3408  000040  B09E               	btfsc	3998,0,c	;volatile
  3409                           
  3410                           ;interrupt_manager.c: 61: {;interrupt_manager.c: 62: TMR1_ISR();
  3411  000042  ECFD  F004         	call	_TMR1_ISR	;wreg free
  3412  000046                     i2l134:
  3413                           
  3414                           ;interrupt_manager.c: 64: else;interrupt_manager.c: 65: {
  3415  000046  C02F  FFF5         	movff	??_INTERRUPT_InterruptManager+11,tablat
  3416  00004A  C02E  FFF8         	movff	??_INTERRUPT_InterruptManager+10,tblptru
  3417  00004E  C02D  FFF7         	movff	??_INTERRUPT_InterruptManager+9,tblptrh
  3418  000052  C02C  FFF6         	movff	??_INTERRUPT_InterruptManager+8,tblptrl
  3419  000056  C02B  FFF4         	movff	??_INTERRUPT_InterruptManager+7,prodh
  3420  00005A  C02A  FFF3         	movff	??_INTERRUPT_InterruptManager+6,prodl
  3421  00005E  C029  FFDA         	movff	??_INTERRUPT_InterruptManager+5,fsr2h
  3422  000062  C028  FFD9         	movff	??_INTERRUPT_InterruptManager+4,fsr2l
  3423  000066  C027  FFE2         	movff	??_INTERRUPT_InterruptManager+3,fsr1h
  3424  00006A  C026  FFE1         	movff	??_INTERRUPT_InterruptManager+2,fsr1l
  3425  00006E  C025  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  3426  000072  C024  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  3427  000076  923E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3428  000078  0011               	retfie		f
  3429  00007A                     __end_of_INTERRUPT_InterruptManager:
  3430                           	opt stack 0
  3431                           pclatu	equ	0xFFB
  3432                           pclath	equ	0xFFA
  3433                           tblptru	equ	0xFF8
  3434                           tblptrh	equ	0xFF7
  3435                           tblptrl	equ	0xFF6
  3436                           tablat	equ	0xFF5
  3437                           prodh	equ	0xFF4
  3438                           prodl	equ	0xFF3
  3439                           intcon	equ	0xFF2
  3440                           intcon2	equ	0xFF1
  3441                           postinc0	equ	0xFEE
  3442                           wreg	equ	0xFE8
  3443                           postdec1	equ	0xFE5
  3444                           fsr1h	equ	0xFE2
  3445                           fsr1l	equ	0xFE1
  3446                           indf2	equ	0xFDF
  3447                           postinc2	equ	0xFDE
  3448                           postdec2	equ	0xFDD
  3449                           fsr2h	equ	0xFDA
  3450                           fsr2l	equ	0xFD9
  3451                           status	equ	0xFD8
  3452                           
  3453 ;; *************** function _TMR1_ISR *****************
  3454 ;; Defined at:
  3455 ;;		line 159 in file "mcc_generated_files/tmr1.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;		None
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;		None
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  1    wreg      void 
  3462 ;; Registers used:
  3463 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3473 ;;Total ram usage:        0 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    4
  3476 ;; This function calls:
  3477 ;;		Absolute function
  3478 ;;		_TMR1_DefaultInterruptHandler
  3479 ;; This function is called by:
  3480 ;;		_INTERRUPT_InterruptManager
  3481 ;; This function uses a non-reentrant model
  3482 ;;
  3483                           
  3484                           	psect	text18
  3485  0009FA                     __ptext18:
  3486                           	opt stack 0
  3487  0009FA                     _TMR1_ISR:
  3488                           	opt stack 22
  3489                           
  3490                           ;tmr1.c: 163: PIR1bits.TMR1IF = 0;
  3491                           
  3492                           ;incstack = 0
  3493  0009FA  909E               	bcf	3998,0,c	;volatile
  3494                           
  3495                           ;tmr1.c: 166: TMR1H = (timer1ReloadVal >> 8);
  3496  0009FC  5033               	movf	_timer1ReloadVal+1,w,c	;volatile
  3497  0009FE  6ECF               	movwf	4047,c	;volatile
  3498                           
  3499                           ;tmr1.c: 167: TMR1L = (uint8_t) timer1ReloadVal;
  3500  000A00  C032  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  3501                           
  3502                           ;tmr1.c: 169: if(TMR1_InterruptHandler)
  3503  000A04  5030               	movf	_TMR1_InterruptHandler,w,c
  3504  000A06  1031               	iorwf	_TMR1_InterruptHandler+1,w,c
  3505  000A08  B4D8               	btfsc	status,2,c
  3506  000A0A  0012               	return	
  3507                           
  3508                           ;tmr1.c: 170: {;tmr1.c: 171: TMR1_InterruptHandler();
  3509  000A0C  D801               	call	i2u109_48
  3510  000A0E  0012               	return	
  3511  000A10                     i2u109_48:
  3512  000A10  0005               	push	
  3513  000A12  6EFA               	movwf	pclath,c
  3514  000A14  5030               	movf	_TMR1_InterruptHandler,w,c
  3515  000A16  6EFD               	movwf	tosl,c
  3516  000A18  5031               	movf	_TMR1_InterruptHandler+1,w,c
  3517  000A1A  6EFE               	movwf	tosh,c
  3518  000A1C  6AFF               	clrf	tosu,c
  3519  000A1E  50FA               	movf	pclath,w,c
  3520  000A20  0012               	return		;indir
  3521  000A22                     __end_of_TMR1_ISR:
  3522                           	opt stack 0
  3523                           tosu	equ	0xFFF
  3524                           tosh	equ	0xFFE
  3525                           tosl	equ	0xFFD
  3526                           pclatu	equ	0xFFB
  3527                           pclath	equ	0xFFA
  3528                           tblptru	equ	0xFF8
  3529                           tblptrh	equ	0xFF7
  3530                           tblptrl	equ	0xFF6
  3531                           tablat	equ	0xFF5
  3532                           prodh	equ	0xFF4
  3533                           prodl	equ	0xFF3
  3534                           intcon	equ	0xFF2
  3535                           intcon2	equ	0xFF1
  3536                           postinc0	equ	0xFEE
  3537                           wreg	equ	0xFE8
  3538                           postdec1	equ	0xFE5
  3539                           fsr1h	equ	0xFE2
  3540                           fsr1l	equ	0xFE1
  3541                           indf2	equ	0xFDF
  3542                           postinc2	equ	0xFDE
  3543                           postdec2	equ	0xFDD
  3544                           fsr2h	equ	0xFDA
  3545                           fsr2l	equ	0xFD9
  3546                           status	equ	0xFD8
  3547                           
  3548 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  3549 ;; Defined at:
  3550 ;;		line 156 in file "main.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;		None
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;  halfPeriod      6   29[COMRAM] unsigned int [3]
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  1    wreg      void 
  3557 ;; Registers used:
  3558 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3565 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;Total ram usage:        8 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    3
  3571 ;; This function calls:
  3572 ;;		_TMR1_WriteTimer
  3573 ;;		i2_printf
  3574 ;; This function is called by:
  3575 ;;		_TMR1_Initialize
  3576 ;;		_TMR1_ISR
  3577 ;; This function uses a non-reentrant model
  3578 ;;
  3579                           
  3580                           	psect	text19
  3581  00080C                     __ptext19:
  3582                           	opt stack 0
  3583  00080C                     _TMR1_DefaultInterruptHandler:
  3584                           	opt stack 22
  3585                           
  3586                           ;main.c: 158: uint16_t halfPeriod[3] = {8112, 9088, 10208};
  3587                           
  3588                           ;incstack = 0
  3589  00080C  EE20  F038         	lfsr	2,TMR1_DefaultInterruptHandler@F5723
  3590  000810  EE10  F01E         	lfsr	1,TMR1_DefaultInterruptHandler@halfPeriod
  3591  000814  0E05               	movlw	5
  3592  000816                     i2u97_41:
  3593  000816  CFDB FFE3          	movff	plusw2,plusw1
  3594  00081A  06E8               	decf	wreg,f,c
  3595  00081C  E2FC               	bc	i2u97_41
  3596                           
  3597                           ;main.c: 159: static uint8_t noteIndex = 0;;main.c: 161: do { LATCbits.LATC1 = 1; } whil
      +                          e(0);
  3598  00081E  828B               	bsf	3979,1,c	;volatile
  3599                           
  3600                           ;main.c: 163: if (incNote == 1) {
  3601  000820  0436               	decf	_incNote,w,c
  3602  000822  A4D8               	btfss	status,2,c
  3603  000824  D008               	goto	i2l246
  3604                           
  3605                           ;main.c: 164: noteIndex += 1;
  3606  000826  2A34               	incf	TMR1_DefaultInterruptHandler@noteIndex,f,c
  3607                           
  3608                           ;main.c: 165: if (noteIndex >= 3) noteIndex = 0;
  3609  000828  0E02               	movlw	2
  3610  00082A  6434               	cpfsgt	TMR1_DefaultInterruptHandler@noteIndex,c
  3611  00082C  D002               	goto	i2l247
  3612  00082E  0E00               	movlw	0
  3613  000830  6E34               	movwf	TMR1_DefaultInterruptHandler@noteIndex,c
  3614  000832                     i2l247:
  3615                           
  3616                           ;main.c: 166: incNote = 0;
  3617  000832  0E00               	movlw	0
  3618  000834  6E36               	movwf	_incNote,c
  3619  000836                     i2l246:
  3620                           
  3621                           ;main.c: 167: };main.c: 169: if (playNote == 1) {
  3622  000836  0437               	decf	_playNote,w,c
  3623  000838  A4D8               	btfss	status,2,c
  3624  00083A  D024               	goto	i2l250
  3625                           
  3626                           ;main.c: 170: TMR1_WriteTimer(0x10000 - halfPeriod[noteIndex]);
  3627  00083C  5034               	movf	TMR1_DefaultInterruptHandler@noteIndex,w,c
  3628  00083E  0D02               	mullw	2
  3629  000840  0E1E               	movlw	low TMR1_DefaultInterruptHandler@halfPeriod
  3630  000842  24F3               	addwf	prodl,w,c
  3631  000844  6ED9               	movwf	fsr2l,c
  3632  000846  0E00               	movlw	high TMR1_DefaultInterruptHandler@halfPeriod
  3633  000848  20F4               	addwfc	prodh,w,c
  3634  00084A  6EDA               	movwf	fsr2h,c
  3635  00084C  CFDE F01C          	movff	postinc2,??_TMR1_DefaultInterruptHandler
  3636  000850  CFDD F01D          	movff	postdec2,??_TMR1_DefaultInterruptHandler+1
  3637  000854  1E1C               	comf	??_TMR1_DefaultInterruptHandler,f,c
  3638  000856  1E1D               	comf	??_TMR1_DefaultInterruptHandler+1,f,c
  3639  000858  4A1C               	infsnz	??_TMR1_DefaultInterruptHandler,f,c
  3640  00085A  2A1D               	incf	??_TMR1_DefaultInterruptHandler+1,f,c
  3641  00085C  C01C  F001         	movff	??_TMR1_DefaultInterruptHandler,TMR1_WriteTimer@timerVal
  3642  000860  C01D  F002         	movff	??_TMR1_DefaultInterruptHandler+1,TMR1_WriteTimer@timerVal+1
  3643  000864  EC54  F005         	call	_TMR1_WriteTimer	;wreg free
  3644                           
  3645                           ;main.c: 171: do { LATBbits.LATB5 = ~LATBbits.LATB5; } while(0);
  3646  000868  AA8A               	btfss	3978,5,c	;volatile
  3647  00086A  D002               	goto	i2u101_40
  3648  00086C  0E01               	movlw	1
  3649  00086E  D001               	goto	i2u101_46
  3650  000870                     i2u101_40:
  3651  000870  0E00               	movlw	0
  3652  000872                     i2u101_46:
  3653  000872  0AFF               	xorlw	255
  3654  000874  6E1C               	movwf	??_TMR1_DefaultInterruptHandler& (0+255),c
  3655  000876  3A1C               	swapf	??_TMR1_DefaultInterruptHandler,f,c
  3656  000878  461C               	rlncf	??_TMR1_DefaultInterruptHandler,f,c
  3657  00087A  508A               	movf	3978,w,c	;volatile
  3658  00087C  181C               	xorwf	??_TMR1_DefaultInterruptHandler,w,c
  3659  00087E  0BDF               	andlw	-33
  3660  000880  181C               	xorwf	??_TMR1_DefaultInterruptHandler,w,c
  3661  000882  6E8A               	movwf	3978,c	;volatile
  3662  000884                     i2l250:
  3663                           
  3664                           ;main.c: 172: };main.c: 176: if (doSomethingBad == 1) {
  3665  000884  0435               	decf	_doSomethingBad,w,c
  3666  000886  A4D8               	btfss	status,2,c
  3667  000888  D006               	goto	i2l251
  3668                           
  3669                           ;main.c: 177: printf("hello world\r\n");
  3670  00088A  0EE2               	movlw	low (STR_15+17)
  3671  00088C  6E08               	movwf	i2printf@f,c
  3672  00088E  0EFE               	movlw	high (STR_15+17)
  3673  000890  6E09               	movwf	i2printf@f+1,c
  3674  000892  EC9D  F001         	call	i2_printf	;wreg free
  3675  000896                     i2l251:
  3676                           
  3677                           ;main.c: 178: };main.c: 180: do { LATCbits.LATC1 = 0; } while(0);
  3678  000896  928B               	bcf	3979,1,c	;volatile
  3679  000898  0012               	return	
  3680  00089A                     __end_of_TMR1_DefaultInterruptHandler:
  3681                           	opt stack 0
  3682                           tosu	equ	0xFFF
  3683                           tosh	equ	0xFFE
  3684                           tosl	equ	0xFFD
  3685                           pclatu	equ	0xFFB
  3686                           pclath	equ	0xFFA
  3687                           tblptru	equ	0xFF8
  3688                           tblptrh	equ	0xFF7
  3689                           tblptrl	equ	0xFF6
  3690                           tablat	equ	0xFF5
  3691                           prodh	equ	0xFF4
  3692                           prodl	equ	0xFF3
  3693                           intcon	equ	0xFF2
  3694                           intcon2	equ	0xFF1
  3695                           postinc0	equ	0xFEE
  3696                           wreg	equ	0xFE8
  3697                           postdec1	equ	0xFE5
  3698                           plusw1	equ	0xFE3
  3699                           fsr1h	equ	0xFE2
  3700                           fsr1l	equ	0xFE1
  3701                           indf2	equ	0xFDF
  3702                           postinc2	equ	0xFDE
  3703                           postdec2	equ	0xFDD
  3704                           plusw2	equ	0xFDB
  3705                           fsr2h	equ	0xFDA
  3706                           fsr2l	equ	0xFD9
  3707                           status	equ	0xFD8
  3708                           
  3709 ;; *************** function i2_printf *****************
  3710 ;; Defined at:
  3711 ;;		line 472 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\doprnt.c"
  3712 ;; Parameters:    Size  Location     Type
  3713 ;;  f               2    7[COMRAM] PTR const unsigned char 
  3714 ;;		 -> STR_26(14), STR_25(17), STR_24(3), STR_23(3), 
  3715 ;;		 -> STR_22(5), STR_21(14), STR_20(81), STR_19(21), 
  3716 ;;		 -> STR_18(21), STR_17(22), STR_16(33), STR_15(31), 
  3717 ;;		 -> STR_14(39), STR_13(29), STR_12(32), STR_11(24), 
  3718 ;;		 -> STR_10(21), STR_9(7), STR_8(15), STR_7(33), 
  3719 ;;		 -> STR_6(24), STR_5(33), STR_4(5), STR_3(45), 
  3720 ;;		 -> STR_2(22), STR_1(20), 
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  printf          4    0        struct .
  3723 ;;  printf          2   24[COMRAM] int 
  3724 ;;  printf          2   22[COMRAM] unsigned int 
  3725 ;;  printf          2   20[COMRAM] PTR void [1]
  3726 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3727 ;;  printf          2   17[COMRAM] unsigned int 
  3728 ;;  printf          2   13[COMRAM] PTR const unsigned char 
  3729 ;;		 -> i2printf@c(1), printf@c(1), 
  3730 ;;  printf          1   26[COMRAM] unsigned char 
  3731 ;;  printf          1   19[COMRAM] char 
  3732 ;;  printf          1   16[COMRAM] unsigned char 
  3733 ;;  printf          1   15[COMRAM] unsigned char 
  3734 ;; Return value:  Size  Location     Type
  3735 ;;                  2    7[COMRAM] int 
  3736 ;; Registers used:
  3737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3738 ;; Tracked objects:
  3739 ;;		On entry : 0/0
  3740 ;;		On exit  : 0/0
  3741 ;;		Unchanged: 0/0
  3742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3743 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;Total ram usage:       20 bytes
  3748 ;; Hardware stack levels used:    1
  3749 ;; Hardware stack levels required when called:    2
  3750 ;; This function calls:
  3751 ;;		i2___lwdiv
  3752 ;;		i2___wmul
  3753 ;;		i2_isdigit
  3754 ;;		i2_putch
  3755 ;; This function is called by:
  3756 ;;		_TMR1_DefaultInterruptHandler
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           	psect	text20
  3761  00033A                     __ptext20:
  3762                           	opt stack 0
  3763  00033A                     i2_printf:
  3764                           	opt stack 22
  3765                           
  3766                           ;doprnt.c: 474: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          16: signed char prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c
      +                          : 536: unsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c:
      +                           540: unsigned int val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;dop
      +                          rnt.c: 545: *ap = __va_start();
  3767                           
  3768                           ;incstack = 0
  3769  00033A  0E0A               	movlw	low (?i2_printf+2)
  3770  00033C  6E15               	movwf	i2printf@ap,c
  3771  00033E  0E00               	movlw	high (?i2_printf+2)
  3772  000340  6E16               	movwf	i2printf@ap+1,c
  3773                           
  3774                           ;doprnt.c: 548: while((c = *f++)) {
  3775  000342  D13B               	goto	i2u94_40
  3776  000344                     
  3777                           ;doprnt.c: 550: if(c != '%')
  3778  000344  0E25               	movlw	37
  3779  000346  181B               	xorwf	i2printf@c,w,c
  3780  000348  B4D8               	btfsc	status,2,c
  3781  00034A  D004               	goto	i2l269
  3782                           
  3783                           ;doprnt.c: 552: {;doprnt.c: 553: (putch(c) );
  3784  00034C  501B               	movf	i2printf@c,w,c
  3785  00034E  ECA2  F005         	call	i2_putch
  3786                           
  3787                           ;doprnt.c: 554: continue;
  3788  000352  D133               	goto	i2u94_40
  3789  000354                     i2l269:
  3790                           
  3791                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  3792  000354  0E00               	movlw	0
  3793  000356  6E1A               	movwf	i2printf@width+1,c
  3794  000358  0E00               	movlw	0
  3795  00035A  6E19               	movwf	i2printf@width,c
  3796                           
  3797                           ;doprnt.c: 560: flag = 0;
  3798  00035C  0E00               	movlw	0
  3799  00035E  6E11               	movwf	i2printf@flag,c
  3800                           
  3801                           ;doprnt.c: 563: switch(*f) {
  3802                           
  3803                           ;doprnt.c: 562: for(;;) {
  3804  000360  D003               	goto	i2l271
  3805  000362                     
  3806                           ;doprnt.c: 592: flag |= 0x04;
  3807  000362  8411               	bsf	i2printf@flag,2,c
  3808                           
  3809                           ;doprnt.c: 593: f++;
  3810  000364  4A08               	infsnz	i2printf@f,f,c
  3811  000366  2A09               	incf	i2printf@f+1,f,c
  3812  000368                     i2l271:
  3813  000368  C008  FFF6         	movff	i2printf@f,tblptrl
  3814  00036C  C009  FFF7         	movff	i2printf@f+1,tblptrh
  3815  000370                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3816  000370  6AF8               	clrf	tblptru,c
  3817  000372                     	endif
  3818  000372                     	if	0	;tblptru may be non-zero
  3819  000372                     	endif
  3820  000372  0008               	tblrd		*
  3821  000374  50F5               	movf	tablat,w,c
  3822                           
  3823                           ; Switch size 1, requested type "space"
  3824                           ; Number of cases is 1, Range of values is 48 to 48
  3825                           ; switch strategies available:
  3826                           ; Name         Instructions Cycles
  3827                           ; simple_byte            4     3 (average)
  3828                           ;	Chosen strategy is simple_byte
  3829  000376  0A30               	xorlw	48	; case 48
  3830  000378  B4D8               	btfsc	status,2,c
  3831  00037A  D7F3               	goto	i2l272
  3832                           
  3833                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  3834                           
  3835                           ;doprnt.c: 598: }
  3836                           
  3837                           ;doprnt.c: 597: break;
  3838  00037C  C008  FFF6         	movff	i2printf@f,tblptrl
  3839  000380  C009  FFF7         	movff	i2printf@f+1,tblptrh
  3840  000384                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3841  000384  6AF8               	clrf	tblptru,c
  3842  000386                     	endif
  3843  000386                     	if	0	;tblptru may be non-zero
  3844  000386                     	endif
  3845  000386  0008               	tblrd		*
  3846  000388  50F5               	movf	tablat,w,c
  3847  00038A  EC45  F005         	call	i2_isdigit
  3848  00038E  A0D8               	btfss	status,0,c
  3849  000390  D076               	goto	i2l279
  3850                           
  3851                           ;doprnt.c: 610: width = 0;
  3852  000392  0E00               	movlw	0
  3853  000394  6E1A               	movwf	i2printf@width+1,c
  3854  000396  0E00               	movlw	0
  3855  000398  6E19               	movwf	i2printf@width,c
  3856  00039A                     
  3857                           ;doprnt.c: 612: width *= 10;
  3858  00039A  C019  F001         	movff	i2printf@width,i2___wmul@multiplier
  3859  00039E  C01A  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  3860  0003A2  0E00               	movlw	0
  3861  0003A4  6E04               	movwf	i2___wmul@multiplicand+1,c
  3862  0003A6  0E0A               	movlw	10
  3863  0003A8  6E03               	movwf	i2___wmul@multiplicand,c
  3864  0003AA  EC11  F005         	call	i2___wmul	;wreg free
  3865  0003AE  C001  F019         	movff	?i2___wmul,i2printf@width
  3866  0003B2  C002  F01A         	movff	?i2___wmul+1,i2printf@width+1
  3867                           
  3868                           ;doprnt.c: 613: width += *f++ - '0';
  3869  0003B6  0ED0               	movlw	208
  3870  0003B8  6E0A               	movwf	??i2_printf& (0+255),c
  3871  0003BA  0EFF               	movlw	255
  3872  0003BC  6E0B               	movwf	(??i2_printf+1)& (0+255),c
  3873  0003BE  C008  FFF6         	movff	i2printf@f,tblptrl
  3874  0003C2  C009  FFF7         	movff	i2printf@f+1,tblptrh
  3875  0003C6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3876  0003C6  6AF8               	clrf	tblptru,c
  3877  0003C8                     	endif
  3878  0003C8                     	if	0	;tblptru may be non-zero
  3879  0003C8                     	endif
  3880  0003C8  0008               	tblrd		*
  3881  0003CA  50F5               	movf	tablat,w,c
  3882  0003CC  6E0C               	movwf	(??i2_printf+2)& (0+255),c
  3883  0003CE  6A0D               	clrf	(??i2_printf+3)& (0+255),c
  3884  0003D0  500A               	movf	??i2_printf,w,c
  3885  0003D2  260C               	addwf	??i2_printf+2,f,c
  3886  0003D4  500B               	movf	??i2_printf+1,w,c
  3887  0003D6  220D               	addwfc	??i2_printf+3,f,c
  3888  0003D8  500C               	movf	??i2_printf+2,w,c
  3889  0003DA  2619               	addwf	i2printf@width,f,c
  3890  0003DC  500D               	movf	??i2_printf+3,w,c
  3891  0003DE  221A               	addwfc	i2printf@width+1,f,c
  3892  0003E0  4A08               	infsnz	i2printf@f,f,c
  3893  0003E2  2A09               	incf	i2printf@f+1,f,c
  3894                           
  3895                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  3896  0003E4  C008  FFF6         	movff	i2printf@f,tblptrl
  3897  0003E8  C009  FFF7         	movff	i2printf@f+1,tblptrh
  3898  0003EC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3899  0003EC  6AF8               	clrf	tblptru,c
  3900  0003EE                     	endif
  3901  0003EE                     	if	0	;tblptru may be non-zero
  3902  0003EE                     	endif
  3903  0003EE  0008               	tblrd		*
  3904  0003F0  50F5               	movf	tablat,w,c
  3905  0003F2  EC45  F005         	call	i2_isdigit
  3906  0003F6  A0D8               	btfss	status,0,c
  3907  0003F8  D042               	goto	i2l279
  3908  0003FA  D7CF               	goto	i2l277
  3909  0003FC                     
  3910                           ;doprnt.c: 776: if(width > len)
  3911  0003FC  5019               	movf	i2printf@width,w,c
  3912  0003FE  5C17               	subwf	i2printf@len,w,c
  3913  000400  501A               	movf	i2printf@width+1,w,c
  3914  000402  5818               	subwfb	i2printf@len+1,w,c
  3915  000404  B0D8               	btfsc	status,0,c
  3916  000406  D005               	goto	i2l285
  3917                           
  3918                           ;doprnt.c: 777: width -= len;
  3919  000408  5017               	movf	i2printf@len,w,c
  3920  00040A  5E19               	subwf	i2printf@width,f,c
  3921  00040C  5018               	movf	i2printf@len+1,w,c
  3922  00040E  5A1A               	subwfb	i2printf@width+1,f,c
  3923  000410  D008               	goto	i2l287
  3924  000412                     i2l285:
  3925                           
  3926                           ;doprnt.c: 778: else;doprnt.c: 779: width = 0;
  3927  000412  0E00               	movlw	0
  3928  000414  6E1A               	movwf	i2printf@width+1,c
  3929  000416  0E00               	movlw	0
  3930  000418  6E19               	movwf	i2printf@width,c
  3931                           
  3932                           ;doprnt.c: 783: while(width--)
  3933  00041A  D003               	goto	i2l287
  3934  00041C                     i2l1673:
  3935                           
  3936                           ;doprnt.c: 784: (putch(' ') );
  3937  00041C  0E20               	movlw	32
  3938  00041E  ECA2  F005         	call	i2_putch
  3939  000422                     i2l287:
  3940  000422  0619               	decf	i2printf@width,f,c
  3941  000424  A0D8               	btfss	status,0,c
  3942  000426  061A               	decf	i2printf@width+1,f,c
  3943  000428  2819               	incf	i2printf@width,w,c
  3944  00042A  E1F8               	bnz	i2l1673
  3945  00042C  281A               	incf	i2printf@width+1,w,c
  3946  00042E  B4D8               	btfsc	status,2,c
  3947  000430  D00A               	goto	i2l290
  3948  000432  D7F4               	goto	i2l288
  3949  000434                     i2l1677:
  3950                           
  3951                           ;doprnt.c: 787: (putch(*cp++) );
  3952  000434  C00E  FFD9         	movff	i2printf@cp,fsr2l
  3953  000438  C00F  FFDA         	movff	i2printf@cp+1,fsr2h
  3954  00043C  50DF               	movf	indf2,w,c
  3955  00043E  ECA2  F005         	call	i2_putch
  3956  000442  4A0E               	infsnz	i2printf@cp,f,c
  3957  000444  2A0F               	incf	i2printf@cp+1,f,c
  3958  000446                     i2l290:
  3959  000446  0617               	decf	i2printf@len,f,c
  3960  000448  A0D8               	btfss	status,0,c
  3961  00044A  0618               	decf	i2printf@len+1,f,c
  3962  00044C  2817               	incf	i2printf@len,w,c
  3963  00044E  E1F2               	bnz	i2l1677
  3964  000450  2818               	incf	i2printf@len+1,w,c
  3965  000452  B4D8               	btfsc	status,2,c
  3966  000454  D0B2               	goto	i2u94_40
  3967  000456  D7EE               	goto	i2l291
  3968  000458                     
  3969                           ;doprnt.c: 818: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3970  000458  C015  FFD9         	movff	i2printf@ap,fsr2l
  3971  00045C  C016  FFDA         	movff	i2printf@ap+1,fsr2h
  3972  000460  50DF               	movf	indf2,w,c
  3973  000462  6E1B               	movwf	i2printf@c,c
  3974  000464  0E02               	movlw	2
  3975  000466  2615               	addwf	i2printf@ap,f,c
  3976  000468  0E00               	movlw	0
  3977  00046A  2216               	addwfc	i2printf@ap+1,f,c
  3978  00046C                     
  3979                           ;doprnt.c: 824: cp = (char *)&c;
  3980  00046C  0E1B               	movlw	low i2printf@c
  3981  00046E  6E0E               	movwf	i2printf@cp,c
  3982  000470  0E00               	movlw	high i2printf@c
  3983  000472  6E0F               	movwf	i2printf@cp+1,c
  3984                           
  3985                           ;doprnt.c: 825: len = 1;
  3986  000474  0E00               	movlw	0
  3987  000476  6E18               	movwf	i2printf@len+1,c
  3988  000478  0E01               	movlw	1
  3989  00047A  6E17               	movwf	i2printf@len,c
  3990                           
  3991                           ;doprnt.c: 826: goto dostring;
  3992  00047C  D7BF               	goto	i2l284
  3993  00047E                     i2l279:
  3994  00047E  C008  FFF6         	movff	i2printf@f,tblptrl
  3995  000482  C009  FFF7         	movff	i2printf@f+1,tblptrh
  3996  000486  4A08               	infsnz	i2printf@f,f,c
  3997  000488  2A09               	incf	i2printf@f+1,f,c
  3998  00048A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3999  00048A  6AF8               	clrf	tblptru,c
  4000  00048C                     	endif
  4001  00048C                     	if	0	;tblptru may be non-zero
  4002  00048C                     	endif
  4003  00048C  0008               	tblrd		*
  4004  00048E  CFF5 F01B          	movff	tablat,i2printf@c
  4005  000492  501B               	movf	i2printf@c,w,c
  4006                           
  4007                           ; Switch size 1, requested type "space"
  4008                           ; Number of cases is 3, Range of values is 0 to 120
  4009                           ; switch strategies available:
  4010                           ; Name         Instructions Cycles
  4011                           ; simple_byte           10     6 (average)
  4012                           ;	Chosen strategy is simple_byte
  4013  000494  0A00               	xorlw	0	; case 0
  4014  000496  B4D8               	btfsc	status,2,c
  4015  000498  0012               	return	
  4016  00049A  0A63               	xorlw	99	; case 99
  4017  00049C  B4D8               	btfsc	status,2,c
  4018  00049E  D7DC               	goto	i2l293
  4019  0004A0  0A1B               	xorlw	27	; case 120
  4020  0004A2  A4D8               	btfss	status,2,c
  4021  0004A4  D7E3               	goto	i2l294
  4022                           
  4023                           ;doprnt.c: 1292: {;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (uns
      +                          igned)0));
  4024  0004A6  C015  FFD9         	movff	i2printf@ap,fsr2l
  4025  0004AA  C016  FFDA         	movff	i2printf@ap+1,fsr2h
  4026  0004AE  CFDE F012          	movff	postinc2,i2printf@val
  4027  0004B2  CFDD F013          	movff	postdec2,i2printf@val+1
  4028  0004B6  0E02               	movlw	2
  4029  0004B8  2615               	addwf	i2printf@ap,f,c
  4030  0004BA  0E00               	movlw	0
  4031  0004BC  2216               	addwfc	i2printf@ap+1,f,c
  4032                           
  4033                           ;doprnt.c: 1306: };doprnt.c: 1335: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0]
      +                           ; c++)
  4034  0004BE  0E01               	movlw	1
  4035  0004C0  6E1B               	movwf	i2printf@c,c
  4036  0004C2                     i2l1701:
  4037  0004C2  0E04               	movlw	4
  4038  0004C4  181B               	xorwf	i2printf@c,w,c
  4039  0004C6  B4D8               	btfsc	status,2,c
  4040  0004C8  D015               	goto	i2u87_40
  4041                           
  4042                           ;doprnt.c: 1336: if(val < hexpowers[c])
  4043  0004CA  501B               	movf	i2printf@c,w,c
  4044  0004CC  0D02               	mullw	2
  4045  0004CE  0EE3               	movlw	low _hexpowers
  4046  0004D0  24F3               	addwf	prodl,w,c
  4047  0004D2  6EF6               	movwf	tblptrl,c
  4048  0004D4  0EFD               	movlw	high _hexpowers
  4049  0004D6  20F4               	addwfc	prodh,w,c
  4050  0004D8  6EF7               	movwf	tblptrh,c
  4051  0004DA                     	if	1	;There are 3 active tblptr bytes
  4052  0004DA  6AF8               	clrf	tblptru,c
  4053  0004DC  0E00               	movlw	low (__mediumconst shr (0+16))
  4054  0004DE  22F8               	addwfc	tblptru,f,c
  4055  0004E0                     	endif
  4056  0004E0  0009               	tblrd		*+
  4057  0004E2  50F5               	movf	tablat,w,c
  4058  0004E4  5C12               	subwf	i2printf@val,w,c
  4059  0004E6  0009               	tblrd		*+
  4060  0004E8  50F5               	movf	tablat,w,c
  4061  0004EA  5813               	subwfb	i2printf@val+1,w,c
  4062  0004EC  A0D8               	btfss	status,0,c
  4063  0004EE  D002               	goto	i2u87_40
  4064                           
  4065                           ;doprnt.c: 1337: break;
  4066  0004F0  2A1B               	incf	i2printf@c,f,c
  4067  0004F2  D7E7               	goto	i2l1701
  4068  0004F4                     i2u87_40:
  4069                           
  4070                           ;doprnt.c: 1400: if(width > c)
  4071  0004F4  501B               	movf	i2printf@c,w,c
  4072  0004F6  6E0A               	movwf	??i2_printf& (0+255),c
  4073  0004F8  6A0B               	clrf	(??i2_printf+1)& (0+255),c
  4074  0004FA  5019               	movf	i2printf@width,w,c
  4075  0004FC  5C0A               	subwf	??i2_printf,w,c
  4076  0004FE  500B               	movf	??i2_printf+1,w,c
  4077  000500  0A80               	xorlw	128
  4078  000502  6E0C               	movwf	(??i2_printf+2)& (0+255),c
  4079  000504  501A               	movf	i2printf@width+1,w,c
  4080  000506  0A80               	xorlw	128
  4081  000508  580C               	subwfb	(??i2_printf+2)& (0+255),w,c
  4082  00050A  B0D8               	btfsc	status,0,c
  4083  00050C  D005               	goto	i2l298
  4084                           
  4085                           ;doprnt.c: 1401: width -= c;
  4086  00050E  501B               	movf	i2printf@c,w,c
  4087  000510  5E19               	subwf	i2printf@width,f,c
  4088  000512  0E00               	movlw	0
  4089  000514  5A1A               	subwfb	i2printf@width+1,f,c
  4090  000516  D004               	goto	i2l299
  4091  000518                     i2l298:
  4092                           
  4093                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  4094  000518  0E00               	movlw	0
  4095  00051A  6E1A               	movwf	i2printf@width+1,c
  4096  00051C  0E00               	movlw	0
  4097  00051E  6E19               	movwf	i2printf@width,c
  4098  000520                     i2l299:
  4099                           
  4100                           ;doprnt.c: 1406: if(flag & 0x04) {
  4101  000520  A411               	btfss	i2printf@flag,2,c
  4102  000522  D00B               	goto	i2l300
  4103  000524                     
  4104                           ;doprnt.c: 1434: if(width)
  4105  000524  5019               	movf	i2printf@width,w,c
  4106  000526  101A               	iorwf	i2printf@width+1,w,c
  4107  000528  B4D8               	btfsc	status,2,c
  4108  00052A  D015               	goto	i2u93_40
  4109                           
  4110                           ;doprnt.c: 1436: (putch('0') );
  4111                           
  4112                           ;doprnt.c: 1435: do
  4113  00052C  0E30               	movlw	48
  4114  00052E  ECA2  F005         	call	i2_putch
  4115                           
  4116                           ;doprnt.c: 1437: while(--width);
  4117  000532  0619               	decf	i2printf@width,f,c
  4118  000534  A0D8               	btfss	status,0,c
  4119  000536  061A               	decf	i2printf@width+1,f,c
  4120  000538  D7F5               	goto	L3
  4121  00053A                     i2l300:
  4122                           
  4123                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  4124  00053A  5019               	movf	i2printf@width,w,c
  4125  00053C  101A               	iorwf	i2printf@width+1,w,c
  4126  00053E  B4D8               	btfsc	status,2,c
  4127  000540  D00A               	goto	i2u93_40
  4128  000542                     i2u92_40:
  4129                           
  4130                           ;doprnt.c: 1449: (putch(' ') );
  4131                           
  4132                           ;doprnt.c: 1448: do
  4133  000542  0E20               	movlw	32
  4134  000544  ECA2  F005         	call	i2_putch
  4135                           
  4136                           ;doprnt.c: 1450: while(--width);
  4137  000548  0619               	decf	i2printf@width,f,c
  4138  00054A  A0D8               	btfss	status,0,c
  4139  00054C  061A               	decf	i2printf@width+1,f,c
  4140  00054E  5019               	movf	i2printf@width,w,c
  4141  000550  101A               	iorwf	i2printf@width+1,w,c
  4142  000552  A4D8               	btfss	status,2,c
  4143  000554  D7F6               	goto	i2u92_40
  4144  000556                     i2u93_40:
  4145                           
  4146                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  4147  000556  C01B  F014         	movff	i2printf@c,i2printf@prec
  4148                           
  4149                           ;doprnt.c: 1493: while(prec--) {
  4150  00055A  D02B               	goto	i2l308
  4151  00055C                     
  4152                           ;doprnt.c: 1497: {;doprnt.c: 1518: {;doprnt.c: 1519: unsigned char idx = (val / hexpower
      +                          s[prec]) & 0xF;
  4153  00055C  C012  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4154  000560  C013  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4155  000564  5014               	movf	i2printf@prec,w,c
  4156  000566  0D02               	mullw	2
  4157  000568  0EE3               	movlw	low _hexpowers
  4158  00056A  24F3               	addwf	prodl,w,c
  4159  00056C  6EF6               	movwf	tblptrl,c
  4160  00056E  0EFD               	movlw	high _hexpowers
  4161  000570  20F4               	addwfc	prodh,w,c
  4162  000572  6EF7               	movwf	tblptrh,c
  4163  000574                     	if	1	;There are 3 active tblptr bytes
  4164  000574  6AF8               	clrf	tblptru,c
  4165  000576  0E00               	movlw	low (__mediumconst shr (0+16))
  4166  000578  22F8               	addwfc	tblptru,f,c
  4167  00057A                     	endif
  4168  00057A  0009               	tblrd		*+
  4169  00057C  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4170  000580  000A               	tblrd		*-
  4171  000582  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4172  000586  EC77  F004         	call	i2___lwdiv	;wreg free
  4173  00058A  5001               	movf	?i2___lwdiv,w,c
  4174  00058C  0B0F               	andlw	15
  4175  00058E  6E10               	movwf	i2printf@idx,c
  4176                           
  4177                           ;doprnt.c: 1525: c = "0123456789abcdef"[idx];
  4178  000590  5010               	movf	i2printf@idx,w,c
  4179  000592  0D01               	mullw	1
  4180  000594  0EBC               	movlw	low STR_27
  4181  000596  24F3               	addwf	prodl,w,c
  4182  000598  6EF6               	movwf	tblptrl,c
  4183  00059A  0EFF               	movlw	high STR_27
  4184  00059C  20F4               	addwfc	prodh,w,c
  4185  00059E  6EF7               	movwf	tblptrh,c
  4186  0005A0                     	if	1	;There are 3 active tblptr bytes
  4187  0005A0  6AF8               	clrf	tblptru,c
  4188  0005A2  0E00               	movlw	low (__mediumconst shr (0+16))
  4189  0005A4  22F8               	addwfc	tblptru,f,c
  4190  0005A6                     	endif
  4191  0005A6  0008               	tblrd		*
  4192  0005A8  CFF5 F01B          	movff	tablat,i2printf@c
  4193                           
  4194                           ;doprnt.c: 1527: };doprnt.c: 1542: };doprnt.c: 1543: (putch(c) );
  4195  0005AC  501B               	movf	i2printf@c,w,c
  4196  0005AE  ECA2  F005         	call	i2_putch
  4197  0005B2                     i2l308:
  4198  0005B2  0614               	decf	i2printf@prec,f,c
  4199  0005B4  2814               	incf	i2printf@prec,w,c
  4200  0005B6  A4D8               	btfss	status,2,c
  4201  0005B8  D7D1               	goto	i2l309
  4202  0005BA                     i2u94_40:
  4203  0005BA  C008  FFF6         	movff	i2printf@f,tblptrl
  4204  0005BE  C009  FFF7         	movff	i2printf@f+1,tblptrh
  4205  0005C2  4A08               	infsnz	i2printf@f,f,c
  4206  0005C4  2A09               	incf	i2printf@f+1,f,c
  4207  0005C6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4208  0005C6  6AF8               	clrf	tblptru,c
  4209  0005C8                     	endif
  4210  0005C8                     	if	0	;tblptru may be non-zero
  4211  0005C8                     	endif
  4212  0005C8  0008               	tblrd		*
  4213  0005CA  CFF5 F01B          	movff	tablat,i2printf@c
  4214  0005CE  501B               	movf	i2printf@c,w,c
  4215  0005D0  B4D8               	btfsc	status,2,c
  4216  0005D2  0012               	return	
  4217  0005D4  D6B7               	goto	i2l268
  4218  0005D6                     __end_ofi2_printf:
  4219                           	opt stack 0
  4220                           tosu	equ	0xFFF
  4221                           tosh	equ	0xFFE
  4222                           tosl	equ	0xFFD
  4223                           pclatu	equ	0xFFB
  4224                           pclath	equ	0xFFA
  4225                           tblptru	equ	0xFF8
  4226                           tblptrh	equ	0xFF7
  4227                           tblptrl	equ	0xFF6
  4228                           tablat	equ	0xFF5
  4229                           prodh	equ	0xFF4
  4230                           prodl	equ	0xFF3
  4231                           intcon	equ	0xFF2
  4232                           intcon2	equ	0xFF1
  4233                           postinc0	equ	0xFEE
  4234                           wreg	equ	0xFE8
  4235                           postdec1	equ	0xFE5
  4236                           plusw1	equ	0xFE3
  4237                           fsr1h	equ	0xFE2
  4238                           fsr1l	equ	0xFE1
  4239                           indf2	equ	0xFDF
  4240                           postinc2	equ	0xFDE
  4241                           postdec2	equ	0xFDD
  4242                           plusw2	equ	0xFDB
  4243                           fsr2h	equ	0xFDA
  4244                           fsr2l	equ	0xFD9
  4245                           status	equ	0xFD8
  4246                           
  4247 ;; *************** function i2_putch *****************
  4248 ;; Defined at:
  4249 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  4250 ;; Parameters:    Size  Location     Type
  4251 ;;  txData          1    wreg     unsigned char 
  4252 ;; Auto vars:     Size  Location     Type
  4253 ;;  txData          1    1[COMRAM] unsigned char 
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  1    wreg      void 
  4256 ;; Registers used:
  4257 ;;		wreg, status,2, cstack
  4258 ;; Tracked objects:
  4259 ;;		On entry : 0/0
  4260 ;;		On exit  : 0/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4264 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4267 ;;Total ram usage:        1 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; Hardware stack levels required when called:    1
  4270 ;; This function calls:
  4271 ;;		i2_EUSART1_Write
  4272 ;; This function is called by:
  4273 ;;		i2_printf
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           	psect	text21
  4278  000B44                     __ptext21:
  4279                           	opt stack 0
  4280  000B44                     i2_putch:
  4281                           	opt stack 22
  4282                           
  4283                           ;incstack = 0
  4284                           ;i2putch@txData stored from wreg
  4285  000B44  6E02               	movwf	i2putch@txData,c
  4286                           
  4287                           ;eusart1.c: 112: EUSART1_Write(txData);
  4288  000B46  5002               	movf	i2putch@txData,w,c
  4289  000B48  EC97  F005         	call	i2_EUSART1_Write
  4290  000B4C  0012               	return		;funcret
  4291  000B4E                     __end_ofi2_putch:
  4292                           	opt stack 0
  4293                           tosu	equ	0xFFF
  4294                           tosh	equ	0xFFE
  4295                           tosl	equ	0xFFD
  4296                           pclatu	equ	0xFFB
  4297                           pclath	equ	0xFFA
  4298                           tblptru	equ	0xFF8
  4299                           tblptrh	equ	0xFF7
  4300                           tblptrl	equ	0xFF6
  4301                           tablat	equ	0xFF5
  4302                           prodh	equ	0xFF4
  4303                           prodl	equ	0xFF3
  4304                           intcon	equ	0xFF2
  4305                           intcon2	equ	0xFF1
  4306                           postinc0	equ	0xFEE
  4307                           wreg	equ	0xFE8
  4308                           postdec1	equ	0xFE5
  4309                           plusw1	equ	0xFE3
  4310                           fsr1h	equ	0xFE2
  4311                           fsr1l	equ	0xFE1
  4312                           indf2	equ	0xFDF
  4313                           postinc2	equ	0xFDE
  4314                           postdec2	equ	0xFDD
  4315                           plusw2	equ	0xFDB
  4316                           fsr2h	equ	0xFDA
  4317                           fsr2l	equ	0xFD9
  4318                           status	equ	0xFD8
  4319                           
  4320 ;; *************** function i2_EUSART1_Write *****************
  4321 ;; Defined at:
  4322 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  4323 ;; Parameters:    Size  Location     Type
  4324 ;;  txData          1    wreg     unsigned char 
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;  txData          1    0[COMRAM] unsigned char 
  4327 ;; Return value:  Size  Location     Type
  4328 ;;                  1    wreg      void 
  4329 ;; Registers used:
  4330 ;;		wreg
  4331 ;; Tracked objects:
  4332 ;;		On entry : 0/0
  4333 ;;		On exit  : 0/0
  4334 ;;		Unchanged: 0/0
  4335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;Total ram usage:        1 bytes
  4341 ;; Hardware stack levels used:    1
  4342 ;; This function calls:
  4343 ;;		Nothing
  4344 ;; This function is called by:
  4345 ;;		i2_putch
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           	psect	text22
  4350  000B2E                     __ptext22:
  4351                           	opt stack 0
  4352  000B2E                     i2_EUSART1_Write:
  4353                           	opt stack 22
  4354                           
  4355                           ;incstack = 0
  4356                           ;i2EUSART1_Write@txData stored from wreg
  4357  000B2E  6E01               	movwf	i2EUSART1_Write@txData,c
  4358  000B30                     
  4359                           ;eusart1.c: 99: {
  4360                           
  4361                           ;eusart1.c: 98: while(0 == PIR1bits.TX1IF)
  4362  000B30  A89E               	btfss	3998,4,c	;volatile
  4363  000B32  D7FE               	goto	i2l1573
  4364                           
  4365                           ;eusart1.c: 100: };eusart1.c: 102: TXREG1 = txData;
  4366  000B34  C001  FFAD         	movff	i2EUSART1_Write@txData,4013	;volatile
  4367  000B38  0012               	return		;funcret
  4368  000B3A                     __end_ofi2_EUSART1_Write:
  4369                           	opt stack 0
  4370                           tosu	equ	0xFFF
  4371                           tosh	equ	0xFFE
  4372                           tosl	equ	0xFFD
  4373                           pclatu	equ	0xFFB
  4374                           pclath	equ	0xFFA
  4375                           tblptru	equ	0xFF8
  4376                           tblptrh	equ	0xFF7
  4377                           tblptrl	equ	0xFF6
  4378                           tablat	equ	0xFF5
  4379                           prodh	equ	0xFF4
  4380                           prodl	equ	0xFF3
  4381                           intcon	equ	0xFF2
  4382                           intcon2	equ	0xFF1
  4383                           postinc0	equ	0xFEE
  4384                           wreg	equ	0xFE8
  4385                           postdec1	equ	0xFE5
  4386                           plusw1	equ	0xFE3
  4387                           fsr1h	equ	0xFE2
  4388                           fsr1l	equ	0xFE1
  4389                           indf2	equ	0xFDF
  4390                           postinc2	equ	0xFDE
  4391                           postdec2	equ	0xFDD
  4392                           plusw2	equ	0xFDB
  4393                           fsr2h	equ	0xFDA
  4394                           fsr2l	equ	0xFD9
  4395                           status	equ	0xFD8
  4396                           
  4397 ;; *************** function i2_isdigit *****************
  4398 ;; Defined at:
  4399 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\isdigit.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  c               1    wreg     unsigned char 
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;  c               1    2[COMRAM] unsigned char 
  4404 ;; Return value:  Size  Location     Type
  4405 ;;		None               void
  4406 ;; Registers used:
  4407 ;;		wreg, status,2, status,0
  4408 ;; Tracked objects:
  4409 ;;		On entry : 0/0
  4410 ;;		On exit  : 0/0
  4411 ;;		Unchanged: 0/0
  4412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4414 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4415 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4417 ;;Total ram usage:        3 bytes
  4418 ;; Hardware stack levels used:    1
  4419 ;; This function calls:
  4420 ;;		Nothing
  4421 ;; This function is called by:
  4422 ;;		i2_printf
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           	psect	text23
  4427  000A8A                     __ptext23:
  4428                           	opt stack 0
  4429  000A8A                     i2_isdigit:
  4430                           	opt stack 23
  4431                           
  4432                           ;incstack = 0
  4433                           ;i2isdigit@c stored from wreg
  4434  000A8A  6E03               	movwf	i2isdigit@c,c
  4435  000A8C  0E00               	movlw	0
  4436  000A8E  6E02               	movwf	i2_isdigit$1289,c
  4437  000A90  0E3A               	movlw	58
  4438  000A92  6003               	cpfslt	i2isdigit@c,c
  4439  000A94  D005               	goto	i2l978
  4440  000A96  0E2F               	movlw	47
  4441  000A98  6403               	cpfsgt	i2isdigit@c,c
  4442  000A9A  D002               	goto	i2l978
  4443  000A9C  0E01               	movlw	1
  4444  000A9E  6E02               	movwf	i2_isdigit$1289,c
  4445  000AA0                     i2l978:
  4446  000AA0  C002  F001         	movff	i2_isdigit$1289,??i2_isdigit
  4447  000AA4  3001               	rrcf	??i2_isdigit,w,c
  4448  000AA6  0012               	return	
  4449  000AA8                     __end_ofi2_isdigit:
  4450                           	opt stack 0
  4451                           tosu	equ	0xFFF
  4452                           tosh	equ	0xFFE
  4453                           tosl	equ	0xFFD
  4454                           pclatu	equ	0xFFB
  4455                           pclath	equ	0xFFA
  4456                           tblptru	equ	0xFF8
  4457                           tblptrh	equ	0xFF7
  4458                           tblptrl	equ	0xFF6
  4459                           tablat	equ	0xFF5
  4460                           prodh	equ	0xFF4
  4461                           prodl	equ	0xFF3
  4462                           intcon	equ	0xFF2
  4463                           intcon2	equ	0xFF1
  4464                           postinc0	equ	0xFEE
  4465                           wreg	equ	0xFE8
  4466                           postdec1	equ	0xFE5
  4467                           plusw1	equ	0xFE3
  4468                           fsr1h	equ	0xFE2
  4469                           fsr1l	equ	0xFE1
  4470                           indf2	equ	0xFDF
  4471                           postinc2	equ	0xFDE
  4472                           postdec2	equ	0xFDD
  4473                           plusw2	equ	0xFDB
  4474                           fsr2h	equ	0xFDA
  4475                           fsr2l	equ	0xFD9
  4476                           status	equ	0xFD8
  4477                           
  4478 ;; *************** function i2___wmul *****************
  4479 ;; Defined at:
  4480 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;  multiplier      2    0[COMRAM] unsigned int 
  4483 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4484 ;; Auto vars:     Size  Location     Type
  4485 ;;  __wmul          2    4[COMRAM] unsigned int 
  4486 ;; Return value:  Size  Location     Type
  4487 ;;                  2    0[COMRAM] unsigned int 
  4488 ;; Registers used:
  4489 ;;		wreg, status,2, status,0, prodl, prodh
  4490 ;; Tracked objects:
  4491 ;;		On entry : 0/0
  4492 ;;		On exit  : 0/0
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4495 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;Total ram usage:        6 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; This function calls:
  4502 ;;		Nothing
  4503 ;; This function is called by:
  4504 ;;		i2_printf
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           	psect	text24
  4509  000A22                     __ptext24:
  4510                           	opt stack 0
  4511  000A22                     i2___wmul:
  4512                           	opt stack 23
  4513                           
  4514                           ;incstack = 0
  4515  000A22  5001               	movf	i2___wmul@multiplier,w,c
  4516  000A24  0203               	mulwf	i2___wmul@multiplicand,c
  4517  000A26  CFF3 F005          	movff	prodl,i2___wmul@product
  4518  000A2A  CFF4 F006          	movff	prodh,i2___wmul@product+1
  4519  000A2E  5001               	movf	i2___wmul@multiplier,w,c
  4520  000A30  0204               	mulwf	i2___wmul@multiplicand+1,c
  4521  000A32  50F3               	movf	prodl,w,c
  4522  000A34  2606               	addwf	i2___wmul@product+1,f,c
  4523  000A36  5002               	movf	i2___wmul@multiplier+1,w,c
  4524  000A38  0203               	mulwf	i2___wmul@multiplicand,c
  4525  000A3A  50F3               	movf	prodl,w,c
  4526  000A3C  2606               	addwf	i2___wmul@product+1,f,c
  4527  000A3E  C005  F001         	movff	i2___wmul@product,?i2___wmul
  4528  000A42  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  4529  000A46  0012               	return	
  4530  000A48                     __end_ofi2___wmul:
  4531                           	opt stack 0
  4532                           tosu	equ	0xFFF
  4533                           tosh	equ	0xFFE
  4534                           tosl	equ	0xFFD
  4535                           pclatu	equ	0xFFB
  4536                           pclath	equ	0xFFA
  4537                           tblptru	equ	0xFF8
  4538                           tblptrh	equ	0xFF7
  4539                           tblptrl	equ	0xFF6
  4540                           tablat	equ	0xFF5
  4541                           prodh	equ	0xFF4
  4542                           prodl	equ	0xFF3
  4543                           intcon	equ	0xFF2
  4544                           intcon2	equ	0xFF1
  4545                           postinc0	equ	0xFEE
  4546                           wreg	equ	0xFE8
  4547                           postdec1	equ	0xFE5
  4548                           plusw1	equ	0xFE3
  4549                           fsr1h	equ	0xFE2
  4550                           fsr1l	equ	0xFE1
  4551                           indf2	equ	0xFDF
  4552                           postinc2	equ	0xFDE
  4553                           postdec2	equ	0xFDD
  4554                           plusw2	equ	0xFDB
  4555                           fsr2h	equ	0xFDA
  4556                           fsr2l	equ	0xFD9
  4557                           status	equ	0xFD8
  4558                           
  4559 ;; *************** function i2___lwdiv *****************
  4560 ;; Defined at:
  4561 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;  dividend        2    0[COMRAM] unsigned int 
  4564 ;;  divisor         2    2[COMRAM] unsigned int 
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  4567 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  4568 ;; Return value:  Size  Location     Type
  4569 ;;                  2    0[COMRAM] unsigned int 
  4570 ;; Registers used:
  4571 ;;		wreg, status,2, status,0
  4572 ;; Tracked objects:
  4573 ;;		On entry : 0/0
  4574 ;;		On exit  : 0/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4577 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4578 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4580 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4581 ;;Total ram usage:        7 bytes
  4582 ;; Hardware stack levels used:    1
  4583 ;; This function calls:
  4584 ;;		Nothing
  4585 ;; This function is called by:
  4586 ;;		i2_printf
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           	psect	text25
  4591  0008EE                     __ptext25:
  4592                           	opt stack 0
  4593  0008EE                     i2___lwdiv:
  4594                           	opt stack 23
  4595                           
  4596                           ;incstack = 0
  4597  0008EE  0E00               	movlw	0
  4598  0008F0  6E06               	movwf	i2___lwdiv@quotient+1,c
  4599  0008F2  0E00               	movlw	0
  4600  0008F4  6E05               	movwf	i2___lwdiv@quotient,c
  4601  0008F6  5003               	movf	i2___lwdiv@divisor,w,c
  4602  0008F8  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  4603  0008FA  B4D8               	btfsc	status,2,c
  4604  0008FC  D01C               	goto	i2l800
  4605  0008FE  0E01               	movlw	1
  4606  000900  6E07               	movwf	i2___lwdiv@counter,c
  4607  000902  D004               	goto	i2l795
  4608  000904  90D8               	bcf	status,0,c
  4609  000906  3603               	rlcf	i2___lwdiv@divisor,f,c
  4610  000908  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  4611  00090A  2A07               	incf	i2___lwdiv@counter,f,c
  4612  00090C                     i2l795:
  4613  00090C  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  4614  00090E  D7FA               	goto	i2l796
  4615  000910                     i2u73_40:
  4616  000910  90D8               	bcf	status,0,c
  4617  000912  3605               	rlcf	i2___lwdiv@quotient,f,c
  4618  000914  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  4619  000916  5003               	movf	i2___lwdiv@divisor,w,c
  4620  000918  5C01               	subwf	i2___lwdiv@dividend,w,c
  4621  00091A  5004               	movf	i2___lwdiv@divisor+1,w,c
  4622  00091C  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  4623  00091E  A0D8               	btfss	status,0,c
  4624  000920  D005               	goto	i2l799
  4625  000922  5003               	movf	i2___lwdiv@divisor,w,c
  4626  000924  5E01               	subwf	i2___lwdiv@dividend,f,c
  4627  000926  5004               	movf	i2___lwdiv@divisor+1,w,c
  4628  000928  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  4629  00092A  8005               	bsf	i2___lwdiv@quotient,0,c
  4630  00092C                     i2l799:
  4631  00092C  90D8               	bcf	status,0,c
  4632  00092E  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  4633  000930  3203               	rrcf	i2___lwdiv@divisor,f,c
  4634  000932  2E07               	decfsz	i2___lwdiv@counter,f,c
  4635  000934  D7ED               	goto	i2u73_40
  4636  000936                     i2l800:
  4637  000936  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  4638  00093A  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  4639  00093E  0012               	return		;funcret
  4640  000940                     __end_ofi2___lwdiv:
  4641                           	opt stack 0
  4642                           tosu	equ	0xFFF
  4643                           tosh	equ	0xFFE
  4644                           tosl	equ	0xFFD
  4645                           pclatu	equ	0xFFB
  4646                           pclath	equ	0xFFA
  4647                           tblptru	equ	0xFF8
  4648                           tblptrh	equ	0xFF7
  4649                           tblptrl	equ	0xFF6
  4650                           tablat	equ	0xFF5
  4651                           prodh	equ	0xFF4
  4652                           prodl	equ	0xFF3
  4653                           intcon	equ	0xFF2
  4654                           intcon2	equ	0xFF1
  4655                           postinc0	equ	0xFEE
  4656                           wreg	equ	0xFE8
  4657                           postdec1	equ	0xFE5
  4658                           plusw1	equ	0xFE3
  4659                           fsr1h	equ	0xFE2
  4660                           fsr1l	equ	0xFE1
  4661                           indf2	equ	0xFDF
  4662                           postinc2	equ	0xFDE
  4663                           postdec2	equ	0xFDD
  4664                           plusw2	equ	0xFDB
  4665                           fsr2h	equ	0xFDA
  4666                           fsr2l	equ	0xFD9
  4667                           status	equ	0xFD8
  4668                           
  4669 ;; *************** function _TMR1_WriteTimer *****************
  4670 ;; Defined at:
  4671 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  4672 ;; Parameters:    Size  Location     Type
  4673 ;;  timerVal        2    0[COMRAM] unsigned int 
  4674 ;; Auto vars:     Size  Location     Type
  4675 ;;		None
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  1    wreg      void 
  4678 ;; Registers used:
  4679 ;;		wreg, status,2
  4680 ;; Tracked objects:
  4681 ;;		On entry : 0/0
  4682 ;;		On exit  : 0/0
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4685 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4688 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4689 ;;Total ram usage:        2 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; This function calls:
  4692 ;;		Nothing
  4693 ;; This function is called by:
  4694 ;;		_TMR1_DefaultInterruptHandler
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           	psect	text26
  4699  000AA8                     __ptext26:
  4700                           	opt stack 0
  4701  000AA8                     _TMR1_WriteTimer:
  4702                           	opt stack 24
  4703                           
  4704                           ;tmr1.c: 122: if (T1CONbits.T1SYNC == 1)
  4705                           
  4706                           ;incstack = 0
  4707  000AA8  A4CD               	btfss	4045,2,c	;volatile
  4708  000AAA  D007               	goto	i2l98
  4709                           
  4710                           ;tmr1.c: 123: {;tmr1.c: 125: T1CONbits.TMR1ON = 0;
  4711  000AAC  90CD               	bcf	4045,0,c	;volatile
  4712                           
  4713                           ;tmr1.c: 128: TMR1H = (timerVal >> 8);
  4714  000AAE  5002               	movf	TMR1_WriteTimer@timerVal+1,w,c
  4715  000AB0  6ECF               	movwf	4047,c	;volatile
  4716                           
  4717                           ;tmr1.c: 129: TMR1L = (uint8_t) timerVal;
  4718  000AB2  C001  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
  4719                           
  4720                           ;tmr1.c: 132: T1CONbits.TMR1ON =1;
  4721  000AB6  80CD               	bsf	4045,0,c	;volatile
  4722                           
  4723                           ;tmr1.c: 133: }
  4724  000AB8  0012               	return	
  4725  000ABA                     i2l98:
  4726                           
  4727                           ;tmr1.c: 134: else;tmr1.c: 135: {;tmr1.c: 137: TMR1H = (timerVal >> 8);
  4728  000ABA  5002               	movf	TMR1_WriteTimer@timerVal+1,w,c
  4729  000ABC  6ECF               	movwf	4047,c	;volatile
  4730                           
  4731                           ;tmr1.c: 138: TMR1L = (uint8_t) timerVal;
  4732  000ABE  C001  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
  4733  000AC2  0012               	return	
  4734  000AC4                     __end_of_TMR1_WriteTimer:
  4735                           	opt stack 0
  4736                           tosu	equ	0xFFF
  4737                           tosh	equ	0xFFE
  4738                           tosl	equ	0xFFD
  4739                           pclatu	equ	0xFFB
  4740                           pclath	equ	0xFFA
  4741                           tblptru	equ	0xFF8
  4742                           tblptrh	equ	0xFF7
  4743                           tblptrl	equ	0xFF6
  4744                           tablat	equ	0xFF5
  4745                           prodh	equ	0xFF4
  4746                           prodl	equ	0xFF3
  4747                           intcon	equ	0xFF2
  4748                           intcon2	equ	0xFF1
  4749                           postinc0	equ	0xFEE
  4750                           wreg	equ	0xFE8
  4751                           postdec1	equ	0xFE5
  4752                           plusw1	equ	0xFE3
  4753                           fsr1h	equ	0xFE2
  4754                           fsr1l	equ	0xFE1
  4755                           indf2	equ	0xFDF
  4756                           postinc2	equ	0xFDE
  4757                           postdec2	equ	0xFDD
  4758                           plusw2	equ	0xFDB
  4759                           fsr2h	equ	0xFDA
  4760                           fsr2l	equ	0xFD9
  4761                           status	equ	0xFD8
  4762                           tosu	equ	0xFFF
  4763                           tosh	equ	0xFFE
  4764                           tosl	equ	0xFFD
  4765                           pclatu	equ	0xFFB
  4766                           pclath	equ	0xFFA
  4767                           tblptru	equ	0xFF8
  4768                           tblptrh	equ	0xFF7
  4769                           tblptrl	equ	0xFF6
  4770                           tablat	equ	0xFF5
  4771                           prodh	equ	0xFF4
  4772                           prodl	equ	0xFF3
  4773                           intcon	equ	0xFF2
  4774                           intcon2	equ	0xFF1
  4775                           postinc0	equ	0xFEE
  4776                           wreg	equ	0xFE8
  4777                           postdec1	equ	0xFE5
  4778                           plusw1	equ	0xFE3
  4779                           fsr1h	equ	0xFE2
  4780                           fsr1l	equ	0xFE1
  4781                           indf2	equ	0xFDF
  4782                           postinc2	equ	0xFDE
  4783                           postdec2	equ	0xFDD
  4784                           plusw2	equ	0xFDB
  4785                           fsr2h	equ	0xFDA
  4786                           fsr2l	equ	0xFD9
  4787                           status	equ	0xFD8
  4788                           
  4789                           	psect	text27
  4790  000000                     __ptext27:
  4791                           	opt stack 0
  4792                           tosu	equ	0xFFF
  4793                           tosh	equ	0xFFE
  4794                           tosl	equ	0xFFD
  4795                           pclatu	equ	0xFFB
  4796                           pclath	equ	0xFFA
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           prodh	equ	0xFF4
  4802                           prodl	equ	0xFF3
  4803                           intcon	equ	0xFF2
  4804                           intcon2	equ	0xFF1
  4805                           postinc0	equ	0xFEE
  4806                           wreg	equ	0xFE8
  4807                           postdec1	equ	0xFE5
  4808                           plusw1	equ	0xFE3
  4809                           fsr1h	equ	0xFE2
  4810                           fsr1l	equ	0xFE1
  4811                           indf2	equ	0xFDF
  4812                           postinc2	equ	0xFDE
  4813                           postdec2	equ	0xFDD
  4814                           plusw2	equ	0xFDB
  4815                           fsr2h	equ	0xFDA
  4816                           fsr2l	equ	0xFD9
  4817                           status	equ	0xFD8
  4818                           
  4819                           	psect	rparam
  4820  0000                     tosu	equ	0xFFF
  4821                           tosh	equ	0xFFE
  4822                           tosl	equ	0xFFD
  4823                           pclatu	equ	0xFFB
  4824                           pclath	equ	0xFFA
  4825                           tblptru	equ	0xFF8
  4826                           tblptrh	equ	0xFF7
  4827                           tblptrl	equ	0xFF6
  4828                           tablat	equ	0xFF5
  4829                           prodh	equ	0xFF4
  4830                           prodl	equ	0xFF3
  4831                           intcon	equ	0xFF2
  4832                           intcon2	equ	0xFF1
  4833                           postinc0	equ	0xFEE
  4834                           wreg	equ	0xFE8
  4835                           postdec1	equ	0xFE5
  4836                           plusw1	equ	0xFE3
  4837                           fsr1h	equ	0xFE2
  4838                           fsr1l	equ	0xFE1
  4839                           indf2	equ	0xFDF
  4840                           postinc2	equ	0xFDE
  4841                           postdec2	equ	0xFDD
  4842                           plusw2	equ	0xFDB
  4843                           fsr2h	equ	0xFDA
  4844                           fsr2l	equ	0xFD9
  4845                           status	equ	0xFD8
  4846                           
  4847                           	psect	temp
  4848  00003E                     btemp:
  4849                           	opt stack 0
  4850  00003E                     	ds	1
  4851  0000                     int$flags	set	btemp
  4852  0000                     wtemp8	set	btemp+1
  4853  0000                     ttemp5	set	btemp+1
  4854  0000                     ttemp6	set	btemp+4
  4855  0000                     ttemp7	set	btemp+8
  4856                           tosu	equ	0xFFF
  4857                           tosh	equ	0xFFE
  4858                           tosl	equ	0xFFD
  4859                           pclatu	equ	0xFFB
  4860                           pclath	equ	0xFFA
  4861                           tblptru	equ	0xFF8
  4862                           tblptrh	equ	0xFF7
  4863                           tblptrl	equ	0xFF6
  4864                           tablat	equ	0xFF5
  4865                           prodh	equ	0xFF4
  4866                           prodl	equ	0xFF3
  4867                           intcon	equ	0xFF2
  4868                           intcon2	equ	0xFF1
  4869                           postinc0	equ	0xFEE
  4870                           wreg	equ	0xFE8
  4871                           postdec1	equ	0xFE5
  4872                           plusw1	equ	0xFE3
  4873                           fsr1h	equ	0xFE2
  4874                           fsr1l	equ	0xFE1
  4875                           indf2	equ	0xFDF
  4876                           postinc2	equ	0xFDE
  4877                           postdec2	equ	0xFDD
  4878                           plusw2	equ	0xFDB
  4879                           fsr2h	equ	0xFDA
  4880                           fsr2l	equ	0xFD9
  4881                           status	equ	0xFD8


Data Sizes:
    Strings     531
    Constant    8
    Data        6
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      61
    BANK0           160     32      32
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 81
		 -> STR_26(CODE[14]), STR_25(CODE[17]), STR_24(CODE[3]), STR_23(CODE[3]), 
		 -> STR_22(CODE[5]), STR_21(CODE[14]), STR_20(CODE[81]), STR_19(CODE[21]), 
		 -> STR_18(CODE[21]), STR_17(CODE[22]), STR_16(CODE[33]), STR_15(CODE[31]), 
		 -> STR_14(CODE[39]), STR_13(CODE[29]), STR_12(CODE[32]), STR_11(CODE[24]), 
		 -> STR_10(CODE[21]), STR_9(CODE[7]), STR_8(CODE[15]), STR_7(CODE[33]), 
		 -> STR_6(CODE[24]), STR_5(CODE[33]), STR_4(CODE[5]), STR_3(CODE[45]), 
		 -> STR_2(CODE[22]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR1_ISR->_TMR1_DefaultInterruptHandler
    _TMR1_DefaultInterruptHandler->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_EUSART1_Write

Critical Paths under _main in BANK0

    _main->_printf
    _printf->_TMR1_ReadTimer
    _putch->_EUSART1_Write
    _TMR1_Initialize->_TMR1_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    4924
                                             30 BANK0      2     2      0
                       _EUSART1_Read
                  _SYSTEM_Initialize
                     _TMR1_ReadTimer
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              26    22      4    4471
                                              8 BANK0     22    18      4
                     _TMR1_ReadTimer (ARG)
                            ___lwdiv
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      62
                                              1 BANK0      1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     412
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _TMR1_ReadTimer                                       8     6      2      69
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     121
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     121
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          12    12      0    1571
                                             35 COMRAM    12    12      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                             0     0      0    1571
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR1_DefaultInterruptHandler                         8     8      0    1571
                                             27 COMRAM     8     8      0
                    _TMR1_WriteTimer
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            24    22      2    1383
                                              7 COMRAM    20    18      2
                          i2___lwdiv
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0      44
                                              1 COMRAM     1     1      0
                    i2_EUSART1_Write
 ---------------------------------------------------------------------------------
 (9) i2_EUSART1_Write                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     211
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) _TMR1_WriteTimer                                      2     0      2     164
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART1_Read
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
       _TMR1_StartTimer
   _TMR1_ReadTimer
   _printf
     _TMR1_ReadTimer (ARG)
     ___lwdiv (ARG)
     ___wmul (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _EUSART1_Write

 _INTERRUPT_InterruptManager (ROOT)
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
       _TMR1_WriteTimer
       i2_printf
         i2___lwdiv
         i2___wmul
         i2_isdigit
         i2_putch
           i2_EUSART1_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      20       5       20.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2F      3D       1       64.9%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5D      12        0.0%
DATA                 0      0      5D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Tue Apr 16 13:12:58 2019

                                      l25 0AFC                       ___wmul@multiplicand 0062  
                      i2___lwdiv@dividend 0001                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                               __CFG_LVP$ON 000000  
                                     l210 06D8                                       l211 06EA  
                                     l300 0296                                       l212 06FE  
                                     l213 0712                                       l205 0616  
                                     l230 0780                                       l207 07CA  
                                     l215 0720                                       l232 0796  
                                     l224 0756                                       l208 0624  
                                     l233 07A4                                       l217 072E  
                                     l163 0B0E                                       l235 07B6  
                                     l219 073C                                       l308 0312  
                                     l228 0762                                       l309 02BA  
                                     l229 0772                                       l271 00B2  
                                     l272 00AA                                       l290 019C  
                                     l291 0188                                       l284 014C  
                                     l268 008A                                       l293 01AE  
                                     l285 0164                                       l277 00E6  
                                     l269 009A                                       l294 01C2  
                                     l279 01D4                                       l287 0174  
                                     l800 08E4                                       l288 016E  
                                     l298 0272                                       l299 027A  
                                     l795 08BA                                       l796 08B2  
                                     l799 08DA                                       l978 0A62  
                            __CFG_CPB$OFF 000000                              __CFG_CPD$OFF 000000  
                         _timer1ReloadVal 0032                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                                    l2073 0B24                                      l2209 021C  
                                    l2313 0778                                      l2181 016E  
                                    l2325 079C                                      l2185 0188  
                                    STR_1 FFA8                                      STR_2 FF53  
                                    STR_3 FE3C                                      STR_4 FFF9  
                                    STR_5 FE90                                      STR_6 FF25  
                                    STR_7 FE90                                      STR_8 FFDE  
                                    STR_9 FFED                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    u1440 08BE                                      u1610 029E  
                                    u1620 02B4                                      u1630 031C  
                                    u1710 0792                                      u1560 024E  
                                    i2l98 0ABA                                      _TMR1 000FCE  
                                    _WPUB 000F61                             _EUSART1_Write 0B20  
                                    _main 05D6                             ?_EUSART1_Read 0001  
                                    fsr1h 000FE2                        i2___lwdiv@quotient 0005  
                                    fsr2h 000FDA                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 003E                             __CFG_BORV$190 000000  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 007A                             __CFG_IESO$OFF 000000  
                         __end_ofi2_putch 0B4E                ??_TMR1_SetInterruptHandler 0062  
                            ___param_bank 000000                  __size_ofi2_EUSART1_Write 000C  
          __size_of_OSCILLATOR_Initialize 0012             __end_of_OSCILLATOR_Initialize 0B02  
                                   ?_main 0001                                     STR_10 FF93  
                                   STR_11 FF0D                                     STR_12 FEB1  
                                   STR_20 FDEB                                     STR_21 FEE2  
                                   STR_13 FEF0                                     STR_22 FFF4  
                                   STR_14 FE69                                     STR_23 FEAE  
                                   STR_15 FED1                                     STR_24 FEAE  
                                   STR_16 FE90                                     STR_25 FFCD  
                                   STR_17 FF3D                                     STR_26 FEE2  
                                   STR_18 FF69                                     STR_27 FFBC  
                                   STR_19 FF7E                           _TMR1_StartTimer 0B54  
                                   _T1CON 000FCD                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwdiv 08EE                                     i2l300 053A  
                                   i2l134 0046                                     i2l250 0884  
                                   i2l251 0896                                     i2l308 05B2  
                                   i2l309 055C                                     i2l246 0836  
                                   i2l271 0368                                     i2l247 0832  
                                   i2l272 0362                                     i2l290 0446  
                                   i2l291 0434                                     i2l284 03FC  
                                   i2l268 0344                                     i2l293 0458  
                                   i2l285 0412                                     i2l277 039A  
                                   i2l269 0354                                     i2l294 046C  
                                   i2l279 047E                                     i2l287 0422  
                                   i2l800 0936                                     i2l288 041C  
                                   i2l298 0518                                     i2l299 0520  
                                   i2l795 090C                                     i2l796 0904  
                                   i2l799 092C                                     i2l978 0AA0  
                                   _TMR1H 000FCF                                     _TMR1L 000FCE  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
                           __CFG_WRT3$OFF 000000                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                        __end_of_TMR1_ISR 0A22                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                                i2isdigit@c 0003  
                         __end_of_isdigit 0A6A                        __CFG_MCLRE$EXTMCLR 000000  
                                   _putch 0B12                                     main@i 007F  
                          ?_EUSART1_Write 0001                   __end_of_TMR1_Initialize 09A6  
                                   pclath 000FFA                                     tablat 000FF5  
                        __end_ofi2___wmul 0A48                            ??_EUSART1_Read 0060  
                                   plusw1 000FE3                                     plusw2 000FDB  
                                   ttemp5 003F                                     ttemp6 0042  
                                   ttemp7 0046                                     status 000FD8  
                                   wtemp8 003F                            __CFG_HFOFST$ON 000000  
                         _TMR1_WriteTimer 0AA8                            __CFG_PBADEN$ON 000000  
                           i2printf@width 0019                          __end_ofi2_printf 05D6  
                      __size_ofi2___lwdiv 0052                           __initialization 0940  
              __end_of_EUSART1_Initialize 0AF0                              __end_of_main 080C  
                              i2printf@ap 0015                                i2printf@cp 000E  
                      __size_ofi2_isdigit 001E               ?_INTERRUPT_InterruptManager 0001  
                                  ??_main 007E                             __activetblptr 000003  
                                  _ANSELA 000F38                                    ?_putch 0001  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _T1GCON 000FCC                   TMR1_WriteTimer@timerVal 0001  
                                  i2l1701 04C2                                    i2l1573 0B30  
                          __CFG_WDTEN$OFF 000000                                    i2l1673 041C  
                                  i2l1677 0434                             i2putch@txData 0002  
                                  _RCREG1 000FAE                                    _RCSTA1 000FAB  
                                  _OSCCON 000FD3                                    _PLLRDY 007E97  
                                  _SPBRG1 000FAF                                 ??i2_putch 0002  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                          __CFG_XINST$OFF 000000      __end_of_TMR1_DefaultInterruptHandler 089A  
   __size_of_TMR1_DefaultInterruptHandler 008E              _TMR1_DefaultInterruptHandler 080C  
                 __end_of_TMR1_StartTimer 0B58                                    ___wmul 09D2  
                          __CFG_STVREN$ON 000000         TMR1_DefaultInterruptHandler@F5723 0038  
                               ??___lwdiv 0064                                    clear_0 0966  
                                  _printf 007E                         ??i2_EUSART1_Write 0001  
                            __pdataCOMRAM 0038                                 ??_isdigit 0060  
                       __end_ofi2___lwdiv 0940                              __mediumconst FDE2  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                           ??_EUSART1_Write 0060  
TMR1_SetInterruptHandler@InterruptHandler 0060                   __end_of_TMR1_WriteTimer 0AC4  
           __size_of_INTERRUPT_Initialize 0004                          ?_TMR1_Initialize 0001  
                       __end_ofi2_isdigit 0AA8                         _SYSTEM_Initialize 0AC4  
                              __accesstop 0060                   __end_of__initialization 096C  
                      ?_SYSTEM_Initialize 0001                             ___rparam_used 000001  
                          __pcstackCOMRAM 0001                       ??_SYSTEM_Initialize 0062  
                               ?_TMR1_ISR 0001             ?_TMR1_DefaultInterruptHandler 0001  
                           __end_of_putch 0B20                               i2printf@idx 0010  
                             i2printf@len 0017                               i2printf@val 0012  
                    __end_of_EUSART1_Read 0B12                                 ?i2___wmul 0001  
                          _doSomethingBad 0035                   __size_of_TMR1_ReadTimer 0020  
                               ?i2_printf 0008                     i2EUSART1_Write@txData 0001  
               __end_of_SYSTEM_Initialize 0ADA                                   ??_putch 0061  
                         __CFG_PLLCFG$OFF 000000                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___wmul 0060                          ?_TMR1_StartTimer 0001  
                              ??_TMR1_ISR 0024                        __CFG_CCP3MX$PORTB5 000000  
                                 ?_printf 0068                                ??i2___wmul 0005  
                                 _OSCCON2 000FD2                                ??i2_printf 000A  
                                 _OSCTUNE 000F9B                                   i2u73_40 0910  
                                 _SPBRGH1 000FB0                                   i2u92_40 0542  
                                 i2u93_40 0556                                   i2u94_40 05BA  
                                 i2u87_40 04F4                                   i2u97_41 0816  
                        ?_TMR1_WriteTimer 0001                                   i2_putch 0B44  
                         __CFG_PWRTEN$OFF 000000                                   __Hparam 0000  
                                 __Lparam 0000                           __size_of___wmul 0028  
                                 ___lwdiv 089A                                   __pcinit 0940  
                                 __ramtop 1000                  TMR1_ReadTimer@readValLow 0067  
                                 __ptext0 05D6                                   __ptext1 007E  
                                 __ptext2 0B12                                   __ptext3 0B20  
                                 __ptext4 0A48                                   __ptext5 09D2  
                                 __ptext6 089A                                   __ptext7 0A6A  
                                 __ptext8 0AC4                                   __ptext9 0976  
                         __size_of_printf 02BC                                   _incNote 0036  
          ??_TMR1_DefaultInterruptHandler 001C                 TMR1_ReadTimer@readValHigh 0066  
                       __end_of_hexpowers FDEB                                 _T1CONbits 000FCD  
                   _OSCILLATOR_Initialize 0AF0                                   _isdigit 0A48  
       __size_of_TMR1_SetInterruptHandler 000A                        _EUSART1_Initialize 0ADA  
                ??_PIN_MANAGER_Initialize 0060                 ?_TMR1_SetInterruptHandler 0060  
                                 main@cmd 007E                __size_of_SYSTEM_Initialize 0016  
                    end_of_initialization 096C                       ?_EUSART1_Initialize 0001  
                     i2___wmul@multiplier 0001                           i2_EUSART1_Write 0B2E  
  TMR1_DefaultInterruptHandler@halfPeriod 001E                                   printf@c 007D  
                                 printf@f 0068                                   postdec1 000FE5  
                                 postdec2 000FDD                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0010  
                    ??_EUSART1_Initialize 0060                            _TMR1_ReadTimer 0A6A  
                     EUSART1_Write@txData 0060                         i2___lwdiv@divisor 0003  
                               i2___lwdiv 08EE                         i2___lwdiv@counter 0007  
                             printf@width 007B                              _EUSART1_Read 0B02  
                               i2_isdigit 0A8A              __end_of_INTERRUPT_Initialize 0B5C  
                          __end_of___wmul 09FA                             __pidataCOMRAM 0B4E  
                       __size_of_TMR1_ISR 0028                    ?_OSCILLATOR_Initialize 0001  
                  __end_of_TMR1_ReadTimer 0A8A                          i2___wmul@product 0005  
                          __end_of_printf 033A                              i2printf@flag 0011  
                            i2printf@prec 0014                       start_initialization 0940  
                       __size_ofi2___wmul 0026           __size_of_PIN_MANAGER_Initialize 002C  
                               i2printf@c 001B                                 i2printf@f 0008  
                             putch@txData 0061                                ?i2___lwdiv 0001  
                       __size_ofi2_printf 029C                     __end_of_EUSART1_Write 0B2E  
                 __end_ofi2_EUSART1_Write 0B3A                                ?i2_isdigit 0001  
                __size_of_TMR1_Initialize 0030                                  ??___wmul 0064  
                                ??_printf 006C                           ?_TMR1_ReadTimer 0060  
                             __pbssCOMRAM 0030                             __pcstackBANK0 0060  
                            _isdigit$1289 0061                                  ?i2_putch 0001  
                        ___lwdiv@dividend 0060                    _PIN_MANAGER_Initialize 09A6  
                               __pintcode 0008          __end_of_TMR1_SetInterruptHandler 0B44  
                           __pmediumconst FDE2                                  ?___lwdiv 0060  
            ??_INTERRUPT_InterruptManager 0024                          __CFG_PRICLKEN$ON 000000  
                                _BAUDCON1 000FB8                  __size_of_TMR1_StartTimer 0004  
                                ?_isdigit 0001                                 _hexpowers FDE3  
                        ___lwdiv@quotient 0065                               ??i2___lwdiv 0005  
                          __size_of_putch 000E                      _INTERRUPT_Initialize 0B58  
                        ?i2_EUSART1_Write 0001                            ___wmul@product 0064  
                                _LATBbits 000F8A                                  _LATCbits 000F8B  
                                _PIE1bits 000F9D                               ??i2_isdigit 0001  
                                i2u101_40 0870                                  i2u101_46 0872  
                __size_of_TMR1_WriteTimer 001C                                  i2u109_48 0A10  
     __size_of_INTERRUPT_InterruptManager 0072                                  _PIR1bits 000F9E  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                                _TMR1_ISR 09FA                         ??_TMR1_Initialize 0062  
                       ___wmul@multiplier 0060                                  i2___wmul 0A22  
                              printf@flag 0073                                printf@prec 0076  
                                i2_printf 033A                               _INTCON2bits 000FF1  
                               copy_data0 0954                     ?_INTERRUPT_Initialize 0001  
                        __size_ofi2_putch 000A     TMR1_DefaultInterruptHandler@noteIndex 0034  
                                __Hrparam 0000                                  __Lrparam 0000  
                      __CFG_BOREN$SBORDIS 000000                     TMR1_ReadTimer@readVal 0064  
                       __CFG_P2BMX$PORTB5 000000                   ??_OSCILLATOR_Initialize 0060  
                   i2___wmul@multiplicand 0003               __size_of_EUSART1_Initialize 0016  
                        __size_of___lwdiv 0054                  _TMR1_SetInterruptHandler 0B3A  
                   _TMR1_InterruptHandler 0030                          __size_of_isdigit 0022  
                         ___lwdiv@divisor 0062                           ___lwdiv@counter 0064  
                                __ptext10 0B54                                  __ptext11 0B3A  
                                __ptext20 033A                                  __ptext12 09A6  
                                __ptext21 0B44                                  __ptext13 0AF0  
                              _T1GCONbits 000FCC                                  __ptext22 0B2E  
                                __ptext14 0B58                                  __ptext23 0A8A  
                                __ptext15 0ADA                                  __ptext24 0A22  
                                __ptext16 0B02                                  __ptext25 08EE  
                                __ptext26 0AA8                                  __ptext18 09FA  
                                __ptext27 0000                                  __ptext19 080C  
                       ??_TMR1_StartTimer 0060                            i2_isdigit$1289 0002  
                           __size_of_main 0236                                  _playNote 0037  
                        ??_TMR1_ReadTimer 0062                                  int$flags 003E  
      __end_of_INTERRUPT_InterruptManager 007A                _INTERRUPT_InterruptManager 0008  
                               printf@idx 0070                                 printf@len 0079  
                               printf@val 0074                         ??_TMR1_WriteTimer 0003  
                              _INTCONbits 000FF2                                  isdigit@c 0062  
                  ??_INTERRUPT_Initialize 0060                                  intlevel2 0000  
                 ?_PIN_MANAGER_Initialize 0001                                _RCSTA1bits 000FAB  
                                printf@ap 0077                                  printf@cp 0071  
                  __size_of_EUSART1_Write 000E                         __CFG_T3CMX$PORTC0 000000  
          __end_of_PIN_MANAGER_Initialize 09D2                         __CFG_FOSC$INTIO67 000000  
                         _TMR1_Initialize 0976  
