
<!DOCTYPE html>
<html lang="en">
    <head>
        <title>EENG 498</title>
        <meta name="description" content="EENG 498">
        <meta name="author" content="Todd Branchflower">
        <link rel='stylesheet' type='text/css' href='//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.min.css'>
        <script src='//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/js/bootstrap.min.js'></script>
		<META HTTP-EQUIV="refresh" CONTENT="600"> <!--added this line to force page refresh every 600 seconds-->
    </head>
    <body>

        <div class = "container">
            <div class = "navbar navbar-inverse">
                <div class = "navbar-inner">
                    <a class = "brand" href="../../index.html">EENG 498</a>
                    <ul class="nav pull-right">
                        <li><a href="../lab04/lab04.html">&ltPrev</a></li>
                        <li><a href="../lab06/lab06.html">Next&gt</a></li>
                    </ul>
                </div>
            </div>

<table class="table table-striped table-bordered table-condensed">
<tr><td>Lab:</td>		<td>5</td></tr>
</table>


<h1>Software control of the enhancedPwm hardware</h1>
The purpose of this lab is to work through the tool chain to build a
stand-alone piece of hardware that interfaces to the Arm Coretex-A9.

<br><img src="./img/armWithEnhancedPwm.PNG"><br><br>

<h2>Interface enhancedPwm to AXI bus</h2>
The first step of this process will be to wrap the enhancedPwm
module inside a pair of wrpper files, enhancedPwm_ip_v_0.vhd and
enhancedPwm_ip_v_0_S00_AXI.vhd.  
This process is described in the 
<a href="../../howTo/howTo 08 Build IP For Zynq.docx ">Build IP</a>
document. This file is also avaiable at the top of the main page
under the HowTo pull-down.



<h2>Interface AXI compatiable enhancedPwm to ARM A9</h2>
The result of the previous step is a IP block that you can place
on a block diagram.  In this step, you will interface the enhancedPwm 
IP block to the ARM Coretex-A9 in the block diagram editor.  As part
of this process, you will configure the ARM-A9, an involved process.
When complete you will have the following block diagram.

<br><img src="../../lecture/img/armWithEnhancedPwmBlock.PNG"><br><br>

This process is described in the 
<a href="../../howTo 09 Interface IP to the Zynq.docx">Interface IP to the Arm-A9</a>
document. This file is also avaiable at the top of the main page
under the HowTo pull-down.

<h2>Use Vitis to program ARM-A9</h2>
The result of the previous step is a wrapper file that you will import
into the Vitis development environment.  This is a tricky process which
is described in the 
<a href="../../howTo/howTo 10 Program IP.docx">Communicate with IP through the Zynq</a>
document. This file is also avaiable at the top of the main page
under the HowTo pull-down.  <br><br>

In order to complete this process, you will need some code.  You should find
this <a href="./code/helloWorld.c">helloWorld.c</a> performs all the actions
needed to exercise the enhancedPwm and TTC.


<h2>Use Interrupts with the ARM-A9</h2>
Once you get the previous step working, you are pretty much done.  In order
to understand the relationship between the TTC interrupt and the ARM-A9, 
you can read the
<br><a href="../../howTo/howTo 12 TTC Interrupt.docx">Program with the Zynq interrupt</a>
document. This file is also avaiable at the top of the main page
under the HowTo pull-down.


</body>
</html>
